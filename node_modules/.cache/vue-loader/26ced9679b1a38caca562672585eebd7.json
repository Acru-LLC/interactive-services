{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\visa\\visa.vue?vue&type=template&id=09bb67f2&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\visa\\visa.vue","mtime":1675054786274},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1675061970779},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjwhLS0gPExheW91dD4gLS0+CjxkaXY+CiAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIHRleHQtY2VudGVyIj4KICAgIDxkaXYgY2xhc3M9Img0IG1iLTQgZC1pbmxpbmUtYmxvY2siPnt7ICR0KCdzdWJtb2R1bGVzLmR4YS52aXNhJykgfX08L2Rpdj4KICA8L2Rpdj4KICA8TW9kYWwKICAgICAgOnNjcm9sbD0idHJ1ZSIKICAgICAgOnZhcmlhbnRPaz0iJ3N1Y2Nlc3MnIgogICAgICA6dmFsdWU9ImVkaXRNb2RhbCIKICAgICAgQG9rTW9kYWw9Im9rTW9kYWwiCiAgICAgIEBjbG9zZU1vZGFsPSJlZGl0TW9kYWwgPSBmYWxzZSIKICAgICAgOnRpdGxlPSJzZWxlY3RlZFRySXRlbS5maWxlTmFtZSIKICAgICAgOmNhbmNlbFRleHQ9IidhY3Rpb25zLmNhbmNlbCciCiAgICAgIEB2aWV3TW9kYWxDbGljaz0idmlld01vZGFsQ2xpY2siCiAgICAgIDpva1RleHQ9IidhY3Rpb25zLnNhdmUnIgogICAgICA6c2lnbmVySGlkZT0iZmFsc2UiCiAgICAgIHJlZj0iZWRpdE1vZGFsUmVmIgogICAgICA6c2l6ZT0iJ3hsJyIKICA+CiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+CiAgICAgIDxkaXY+CiAgICAgICAgPEVkaXRvcgogICAgICAgICAgICByZWY9ImVkaXRvclJlZiIKICAgICAgICAgICAgQGNoYW5nZVRleHQ9ImNoYW5nZVRleHQiCiAgICAgICAgLz4KICAgICAgPC9kaXY+CiAgICA8L3RlbXBsYXRlPgogIDwvTW9kYWw+CgogIDwhLS0gPFBhZ2VIZWFkZXIgOnRpdGxlPSJ0aXRsZSIgOml0ZW1zPSJpdGVtcyIgLz4gLS0+CiAgPCEtLSBmb3IgdmlldyBpbG92YSAtLT4KICA8Yi1tb2RhbAogICAgICBzY3JvbGxhYmxlCiAgICAgIHYtbW9kZWw9InZpZXdJbG92YU1vZGFsIgogICAgICBzaXplPSJ4bCIKICAgICAgOnRpdGxlPSIkdCgnYWN0aW9ucy52aWV3JykiCiAgPgogICAgPGRpdgogICAgICAgIHN0eWxlPSJoZWlnaHQ6IDcwMHB4IgogICAgICAgIHYtaWY9Imlsb3ZhVXBsb2FkUGF0aCIKICAgID4KICAgICAgPGVtYmVkCiAgICAgICAgICB3aWR0aD0iMTAwJSIKICAgICAgICAgIGhlaWdodD0iODAwIgogICAgICAgICAgOnNyYz0iYCR7YmFzZVVybH0vJHtpbG92YVVwbG9hZFBhdGh9YCIKICAgICAgICAgIHR5cGU9ImFwcGxpY2F0aW9uL3BkZiIKICAgICAgLz4KICAgIDwvZGl2PgogICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI+CiAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgdmFyaWFudD0ic2Vjb25kYXJ5IgogICAgICAgICAgQGNsaWNrPSJ2aWV3SWxvdmFNb2RhbCA9IGZhbHNlIgogICAgICA+e3sKICAgICAgICAgICR0KCJhY3Rpb25zLmNsb3NlIikKICAgICAgICB9fQogICAgICA8L2ItYnV0dG9uPgogICAgPC90ZW1wbGF0ZT4KICA8L2ItbW9kYWw+CiAgPCEtLSBzaWduIGtleXMgbW9kYWwgLS0+CiAgPGItbW9kYWwKICAgICAgc2Nyb2xsYWJsZQogICAgICB2LW1vZGVsPSJzaWduYXR1cmVNb2RhbCIKICAgICAgaGlkZS1mb290ZXIKICAgICAgc2l6ZT0ibGciCiAgICAgIDp0aXRsZT0iYCR7JHQoJ3N1Ym1vZHVsZXMucmVwb3J0cy5tYWtlX3NpZ24nKX1gIgogID4KICAgIDxTaWduS2V5cwogICAgICAgIEBzaWduPSJzaWduU3VjY2VzcyIKICAgICAgICA6ZGF0YVRvU2lnbj0ic2VsZWN0ZWRUckl0ZW0iCiAgICAvPgogIDwvYi1tb2RhbD4KCiAgPCEtLSBmb3IgdmlldyBkb2N1bWVudCAtLT4KICA8Yi1tb2RhbAogICAgICBzY3JvbGxhYmxlCiAgICAgIHYtbW9kZWw9InZpZXdNb2RhbCIKICAgICAgc2l6ZT0ieGwiCiAgICAgIDp0aXRsZT0ic2VsZWN0ZWRUckl0ZW0uaWQgPyBzZWxlY3RlZFRySXRlbS5maWxlTmFtZSA6ICcnIgogID4KICAgIDxkaXYKICAgICAgICBzdHlsZT0iaGVpZ2h0OiA3MDBweCIKICAgICAgICB2LWlmPSJzZWxlY3RlZFRySXRlbS51cmwiCiAgICA+CiAgICAgIDxlbWJlZAogICAgICAgICAgd2lkdGg9IjEwMCUiCiAgICAgICAgICBoZWlnaHQ9IjgwMCIKICAgICAgICAgIDpzcmM9ImAke2Jhc2VVcmx9LyR7c2VsZWN0ZWRUckl0ZW0udXJsfWAiCiAgICAgICAgICB0eXBlPSJhcHBsaWNhdGlvbi9wZGYiCiAgICAgIC8+CiAgICA8L2Rpdj4KICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPgogICAgICA8Yi1idXR0b24KICAgICAgICAgIHZhcmlhbnQ9InNlY29uZGFyeSIKICAgICAgICAgIEBjbGljaz0idmlld01vZGFsID0gZmFsc2UiCiAgICAgID57ewogICAgICAgICAgJHQoImFjdGlvbnMuY2xvc2UiKQogICAgICAgIH19CiAgICAgIDwvYi1idXR0b24+CiAgICA8L3RlbXBsYXRlPgogIDwvYi1tb2RhbD4KCiAgPCEtLSBtb2RhbCB2aWV3IGJlZm9yZSBtb2RhbCAtLT4KICA8Yi1tb2RhbAogICAgICBzY3JvbGxhYmxlCiAgICAgIHYtbW9kZWw9InZpZXdNb2RhbEJlZm9yZVNpZ25lZCIKICAgICAgc2l6ZT0ieGwiCiAgICAgIGJvZHktYmctdmFyaWFudD0ibGlnaHQiCiAgICAgIDp0aXRsZT0ic2VsZWN0ZWRUckl0ZW0uaWQgPyBzZWxlY3RlZFRySXRlbS5maWxlTmFtZSA6ICcnIgogID4KICAgIDxiLW92ZXJsYXkKICAgICAgICB2YXJpYW50PSJ3aGl0ZSIKICAgICAgICA6b3BhY2l0eT0iMSIKICAgICAgICA6c2hvdz0ibG9hZGVyUGRmIgogICAgICAgIHJvdW5kZWQ9ImxnIgogICAgPgogICAgICA8ZGl2IHN0eWxlPSJtaW4taGVpZ2h0OiA3MDBweCI+CiAgICAgICAgPGVtYmVkCiAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsiCiAgICAgICAgICAgIDpzdHlsZT0iYG1pbi1oZWlnaHQ6JHtoZWlnaHRXaW5kb3ctMjUwfXB4YCIKICAgICAgICAgICAgdi1pZj0iYmFzZTY0IgogICAgICAgICAgICA6c3JjPSJgZGF0YTphcHBsaWNhdGlvbi9wZGY7YmFzZTY0LCAke2Jhc2U2NH1gIgogICAgICAgIC8+CiAgICAgIDwvZGl2PgogICAgPC9iLW92ZXJsYXk+CgogICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI+CiAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgdmFyaWFudD0ic2Vjb25kYXJ5IgogICAgICAgICAgQGNsaWNrPSJ2aWV3TW9kYWxCZWZvcmVTaWduZWQgPSBmYWxzZSIKICAgICAgPnt7ICR0KCJhY3Rpb25zLmNsb3NlIikgfX0KICAgICAgPC9iLWJ1dHRvbj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLW1vZGFsPgogIDwhLS0gcmVqZWN0ZWQgbW9kYWwgLS0+CiAgPGItbW9kYWwKICAgICAgc2Nyb2xsYWJsZQogICAgICB2LW1vZGVsPSJpc1JlamVjdGVkTW9kYWwiCiAgICAgIHNpemU9Im1kIgogICAgICA6dGl0bGU9ImAkeyR0KCdzdWJtb2R1bGVzLnJlcG9ydHMucmVhc29uUmVqZWN0ZWQnKX1gIgogID4KICAgIDxiLWZvcm0tdGV4dGFyZWEKICAgICAgICB2LW1vZGVsPSJyZWFzb25SZWplY3RlZCIKICAgICAgICByb3dzPSI1IgogICAgPjwvYi1mb3JtLXRleHRhcmVhPgoKICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPgogICAgICA8Yi1idXR0b24KICAgICAgICAgIHZhcmlhbnQ9ImRhbmdlciIKICAgICAgICAgIEBjbGljaz0icmVqZWN0Q29uZmlybSIKICAgICAgPgogICAgICAgIDxiLW92ZXJsYXkKICAgICAgICAgICAgOm9wYWNpdHk9IjAuMSIKICAgICAgICAgICAgOnNob3c9InJlamVjdGVkTG9hZGVyIgogICAgICAgICAgICByb3VuZGVkPSJzbSIKICAgICAgICA+CiAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5yZXBvcnRzLnJlamVjdGVkIikgfX0KICAgICAgICA8L2Itb3ZlcmxheT4KICAgICAgPC9iLWJ1dHRvbj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLW1vZGFsPgogIDxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcC0yIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWlubGluZS1ibG9jayBtdC0xIG1sLTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWJveCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VhcmNoVmFsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgcm91bmRlZCBiZy1saWdodCBib3JkZXItbGlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0iJHQoJ2FjdGlvbnMuc2VhcmNoJykiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1tYWduaWZ5IHNlYXJjaC1pY29uIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zbS1yaWdodCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtci0zIGZsb2F0LXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tIDxiLWJ1dHRvbgogIEBjbGljay5wcmV2ZW50PSJhZGQiCiAgdHlwZT0iYnV0dG9uIgogIHZhcmlhbnQ9InByaW1hcnkiCj4KICA8aSBjbGFzcz0ibWRpIG1kaS1wbHVzIG1yLTEiPjwvaT4KICB7eyAkdCgiYWN0aW9ucy5jcmVhdGVOZXdEb2MiKSB9fQo8L2ItYnV0dG9uPiAtLT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC03Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+CiAgICAgICAgICAgICAgPGItb3ZlcmxheSA6b3BhY2l0eT0iMC4xIiA6c2hvdz0ibG9hZGluZyIgcm91bmRlZD0ic20iID4KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iIHRhYmxlIHRhYmxlLWNlbnRlcmVkIHRhYmxlLXN0cmlwZWQgdGFibGUtbm93cmFwIHRhYmxlLWhvdmVyIGJvcmRlcmVkICI+CiAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idGhlYWQtbGlnaHQiPgogICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMCUiCiAgICAgICAgICAgICAgICAgICAgPiDihJYKICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aAogICAgICAgICAgICAgICAgICAgICAgICBzY29wZT0iY29sIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtbC01Ij4ge3sgJHQoImNvbHVtbi5zdGF0dXMiKSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGV4dC1jZW50ZXIiIHNjb3BlPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAge3sgJHQoInN1Ym1vZHVsZXMuZHhhLmR4YV9hcHBsaWNhdGlvbl9udW1iZXIiKSB9fQogICAgICAgICAgICAgICAgICAgIDwvdGg+CgogICAgICAgICAgICAgICAgICAgIDx0aAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAge3sgJHQoInN1Ym1vZHVsZXMuZG9jLnNlbmRlckZJTyIpIH19CiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICAgIDx0aC0tPgogICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciItLT4KICAgICAgICAgICAgICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZT0iY29sIi0tPgogICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgPi0tPgogICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5kb2Muc2VuZGVyIikgfX0tLT4KICAgICAgICAgICAgICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICAgIDwvdGg+LS0+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJsaXN0Lmxlbmd0aCA9PSAwIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW49IjkiCiAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT0ibG9hZGluZyA/ICdoZWlnaHQ6NTBweCcgOiAnJyIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InZlcnRpY2FsLWFsaWduOiBtaWRkbGUiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgibWVzc2FnZXMuZGF0YV9ub3RfZm91bmQiKSB9fQogICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJjbGlja1RySXRlbShpdGVtKSIKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGxpc3QiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCArICdDUkVBVEVfRE9DJyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwX2N1cnNvciIKICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz0iIHNlbGVjdGVkVHJJdGVtLmlkID09IGl0ZW0uaWQgPyAnYmctY29sb3IgYmctc29mdC1wcmltYXJ5IHRleHQtcHJpbWFyeScgOiAnJyAiCiAgICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICB1dGlsX3BhZ2luYXRlKGluZGV4LCB2YXJfZGVmYXVsdF9zZWFyY2hfcGF5bG9hZC5wYWdlLCB2YXJfZGVmYXVsdF9zZWFyY2hfcGF5bG9hZC5pdGVtc1BlclBhZ2UpCiAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1iYWRnZQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InNlY29uZGFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Iml0ZW0uc3RhdHVzID09PSAnQ1JFQVRFRCcgfHwgaXRlbS5hcHBsaWNhdGlvblN0YXR1cyA9PT0gJ1JFQ0VJVkVEJyIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3N1Ym1vZHVsZXMuY29tbWlzc2lvbi5kb2Nfc3RhdHVzLmRvY19jcmVhdGVkJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0id2FybmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdCRUlOR19TRUVOJyIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3N1Ym1vZHVsZXMuY29tbWlzc2lvbi5kb2Nfc3RhdHVzLmRvY19zZWVuJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0iaW5mbyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdTRUVOJyIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3N1Ym1vZHVsZXMuY29tbWlzc2lvbi5kb2Nfc3RhdHVzLnNlZW4nKSB9fQogICAgICAgICAgICAgICAgICAgICAgPC9iLWJhZGdlPgogICAgICAgICAgICAgICAgICAgICAgPGItYmFkZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1lbHNlLWlmPSJpdGVtLnN0YXR1cyA9PT0gJ1NFTlQnIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgnc3VibW9kdWxlcy5yZXBvcnRzLnJlcG9ydF9zZW5kZWQnKSB9fQogICAgICAgICAgICAgICAgICAgICAgPC9iLWJhZGdlPgogICAgICAgICAgICAgICAgICAgICAgPGItYmFkZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PSJkYW5nZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWVsc2UtaWY9Iml0ZW0uc3RhdHVzID09PSAnQ0FOQ0VMTEVEJyIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ2RvY3Nfci5DQU5DRUxFRCcpIH19CiAgICAgICAgICAgICAgICAgICAgICA8L2ItYmFkZ2U+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1iYWRnZQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImluZm8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWVsc2UtaWY9Iml0ZW0uc3RhdHVzID09PSAnU0VORF9GT1JfQ09NTUlTU0lPTiciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdzdWJtb2R1bGVzLmNvbW1pc3Npb24uZG9jX3N0YXR1cy5zZW5kX2Zvcl9jb21taXNzaW9uJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0id2FybmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdDT01NSVNTSU9OX0JFSU5HX1NFRU4nIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgnc3VibW9kdWxlcy5jb21taXNzaW9uLmRvY19zdGF0dXMuY29tbWlzc2lvbl9iZWluZ19zZWVuJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0iaW5mbyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdDT01NSVNTSU9OX1NFRU4nIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgnc3VibW9kdWxlcy5jb21taXNzaW9uLmRvY19zdGF0dXMuY29tbWlzc2lvbl9zZWVuJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdDT01NSVNTSU9OX1NFTlQnIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgnc3VibW9kdWxlcy5jb21taXNzaW9uLmRvY19zdGF0dXMuY29tbWlzc2lvbl9zZW50JykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0ic3VjY2VzcyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdDT01NSVNTSU9OX1NJR05FRCciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdzdWJtb2R1bGVzLmNvbW1pc3Npb24uZG9jX3N0YXR1cy5jb21taXNzaW9uX3NpZ25lZCcpIH19CiAgICAgICAgICAgICAgICAgICAgICA8L2ItYmFkZ2U+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1iYWRnZQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImRhbmdlciIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdDT01NSVNTSU9OX0NBTkNFTExFRCciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdzdWJtb2R1bGVzLmNvbW1pc3Npb24uZG9jX3N0YXR1cy5jb21taXNzaW9uX2NhbmNlbGVkJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJhZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0id2FybmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZS1pZj0iaXRlbS5zdGF0dXMgPT09ICdTRU5EX0ZPUl9UQUtFX1ZJU0EnIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgnc3VibW9kdWxlcy5keGEuc2VuZF9mb3JfdmlzYScpIH19CiAgICAgICAgICAgICAgICAgICAgICA8L2ItYmFkZ2U+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1iYWRnZQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InN1Y2Nlc3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWVsc2UtaWY9Iml0ZW0uc3RhdHVzID09PSAnVklTQV9BUFBST1ZFRCciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdzdWJtb2R1bGVzLmR4YS5WSVNBX0FQUFJPVkVEJykgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYi1iYWRnZT4KCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW0uYXBwbGljYXRpb25SZWdOdW1iZXIgfX0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5vd25lckxhc3ROYW1lIH19IHt7IGl0ZW0ub3duZXJGaXJzdE5hbWUgfX0ge3sgaXRlbS5vd25lclBhcmVudE5hbWUgfX0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICA8L2Itb3ZlcmxheT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJyb3ciCiAgICAgICAgICAgICAgICB2LWlmPSJ0b3RhbCA+IDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgogICAgICAgICAgICAgICAgPGItcGFnaW5hdGlvbgogICAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtLTAiCiAgICAgICAgICAgICAgICAgICAgOnRvdGFsLXJvd3M9InRvdGFsIgogICAgICAgICAgICAgICAgICAgIDpwZXItcGFnZT0ibGltaXQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icGFnZSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC01Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1ib2R5Ij4KICAgICAgICAgICAgPCEtLSBGUk9NX0RYQSAtLT4KICAgICAgICAgICAgPGItb3ZlcmxheQogICAgICAgICAgICAgICAgOm9wYWNpdHk9IjAuMSIKICAgICAgICAgICAgICAgIDpzaG93PSJsb2FkaW5nQnlJZCIKICAgICAgICAgICAgICAgIHJvdW5kZWQ9InNtIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgIHYtaWY9InNlbGVjdGVkVHJJdGVtIgogICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUgbS0wICIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICA8Yj4ge3sgJHQoJ2NvbHVtbi5idXNpbmVzc19lbnRpdHknKSB9fTwvYj4gPGJyPgogICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDEycHgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LXJpZ2h0IgogICAgICAgICAgICAgID4KICAgICAgICB7eyBzZWxlY3RlZFRySXRlbS5jb250cmFjdG9yTmFtZUZyb21EWEEgfX0KICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgIDxiPiB7eyAkdCgnY29sdW1uLmlubicpIH19PC9iPiA8YnI+CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxMnB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNlbGVjdGVkVHJJdGVtLmNvbXBhbnlUaW5Gcm9tRFhBIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICA8Yj4ge3sgJHQoJ3N1Ym1vZHVsZXMuZG9jLmNyZWF0ZV9lbnRlcmVkX2RhdGVfbGVnYWwnKSB9fTwvYj4gPGJyPgogICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTJweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzZWxlY3RlZFRySXRlbS5jcmVhdGVkIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9iLW92ZXJsYXk+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgICB2LXNob3c9InNlbGVjdGVkVHJJdGVtLnN0YXR1cyA9PT0gJ1NFTkRfRk9SX1RBS0VfVklTQSciCiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLXRhYnMtYnV0dG9uIgogICAgICAgICAgICAgICAgICBAY2xpY2s9IlZJU0FCdG4iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZyA6c3JjPSJyZXF1aXJlKCdAL2Fzc2V0cy9kb2MvaW1nLnBuZycpIiBhbHQ9IkRPQyIgaGVpZ2h0PSIyMCIvPgogICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jcmVkaXQtY2FyZCI+PC9pPi0tPgogICAgICAgICAgICAgICAge3sgJHQoJ3N1Ym1vZHVsZXMucmVwb3J0cy5tYWtlX3NpZ24nKSB9fQogICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICAgIHYtaWY9IiEoT2JqZWN0LmtleXMoc2VsZWN0ZWRUckl0ZW0pLmxlbmd0aCA9PT0gMCkiCiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9Indhcm5pbmciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtbC0yICBjYXJkLXRhYnMtYnV0dG9uIgogICAgICAgICAgICAgICAgICBAY2xpY2s9IkRYQUluZm9CdG4iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWV5ZSI+PC9pPgogICAgICAgICAgICAgICAge3sgJHQoJ3N1Ym1vZHVsZXMuZHhhLnZpZXdfZHhhJykgfX0KICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwhLS0gVklTQSAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCIKICAgICAgICAgICAgICAgICB2LXNob3c9Ik9iamVjdC5rZXlzKHNlbGVjdGVkVHJJdGVtKS5sZW5ndGggIT09IDAgJiYgc2VsZWN0ZWRUckl0ZW0udmlzYUlzR2l2ZW4iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciBiZy13aGl0ZSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtc2l6ZS0xNiBmbGV4LWdyb3ctMSI+CiAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSgnQC9hc3NldHMvZG9jLzEucG5nJykiIGFsdD0iRE9DIiBoZWlnaHQ9IjQ1Ii8+CiAgICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9Im1sLTMiPnt7ICR0KCJzdWJtb2R1bGVzLmR4YS5WSVNBX0FQUFJPVkVEIikgfX08L3N0cm9uZz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1pbmZvIiBAY2xpY2s9InNob3dWaXNhRmlsZVZpZXcoc2VsZWN0ZWRUckl0ZW0uYXBwbGljYXRpb25JZCkiPgogICAgICAgICAgICAgICAgICB7eyAkdCgnYWN0aW9ucy52aWV3X2RvY3VtZW50JykgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+CiAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtY2VudGVyZWQgbS0wIj4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDogNTBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF2YXRhci1zbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImF2YXRhci10aXRsZSByb3VuZGVkLWNpcmNsZSBiZy1zb2Z0LXByaW1hcnkgZm9udC1zaXplLTIwIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9OYW1lID8gc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9OYW1lLmNoYXJBdCgwKSA6ICcnIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNCBtLTAgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWRhcmsgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5keGEudmlzYV9pc3N1ZXIiKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXNpemUtMTQgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtZGFyayBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNlbGVjdGVkVHJJdGVtLnZpc2FGcm9tV2hvTmFtZSB8fCAnJyB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXROYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVMdDogc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9ZdXJEZXBhcnRtZW50TmFtZUx0THQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lUnU6IHNlbGVjdGVkVHJJdGVtLnZpc2FGcm9tV2hvWXVyRGVwYXJ0bWVudE5hbWVMdFJ1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVV6OiBzZWxlY3RlZFRySXRlbS52aXNhRnJvbVdob1l1ckRlcGFydG1lbnROYW1lTHRVeiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXROYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVVejogc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9EZXBhcnRtZW50TmFtZVV6LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZUx0OiBzZWxlY3RlZFRySXRlbS52aXNhRnJvbVdob0RlcGFydG1lbnROYW1lTHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lUnU6IHNlbGVjdGVkVHJJdGVtLnZpc2FGcm9tV2hvRGVwYXJ0bWVudE5hbWVSdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXROYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVMdDogc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9Qb3NpdGlvbk5hbWVMdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVSdTogc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9Qb3NpdGlvbk5hbWVSdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVVejogc2VsZWN0ZWRUckl0ZW0udmlzYUZyb21XaG9Qb3NpdGlvbk5hbWVVeiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOiA1MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyLXNtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYXZhdGFyLXRpdGxlIHJvdW5kZWQtY2lyY2xlIGJnLXNvZnQtcHJpbWFyeSBmb250LXNpemUtMjAgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc2VsZWN0ZWRUckl0ZW0udmlzYVRvV2hvTmFtZSA/IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob05hbWUuY2hhckF0KDApIDogJycgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE0IG0tMCBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtZGFyayBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCJzdWJtb2R1bGVzLmR4YS5wZXJmb3JtZXIiKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXNpemUtMTQgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtZGFyayBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob05hbWUgfHwgJycgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtLTAgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TmFtZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob1l1ckRlcGFydG1lbnROYW1lTHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lUnU6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob1l1ckRlcGFydG1lbnROYW1lUnUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVXo6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob1l1ckRlcGFydG1lbnROYW1lVXosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtLTAgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TmFtZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVXo6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob0RlcGFydG1lbnROYW1lVXosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob0RlcGFydG1lbnROYW1lTHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lUnU6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob0RlcGFydG1lbnROYW1lVXosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtLTAgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TmFtZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkVHJJdGVtLnZpc2FUb1dob1Bvc2l0aW9uTmFtZUx0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVJ1OiBzZWxlY3RlZFRySXRlbS52aXNhVG9XaG9Qb3NpdGlvbk5hbWVSdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVVejogc2VsZWN0ZWRUckl0ZW0udmlzYVRvV2hvUG9zaXRpb25OYW1lVXosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiPgogICAgICAgICAgICAgICAgICAgICAgICB7e3NlbGVjdGVkVHJJdGVtLnZpc2FDb21tZW50fX0KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxiLXNpZGViYXIKICAgICAgd2lkdGg9Ijg1JSIKICAgICAgY2xhc3M9InNpZGViYXItcGFydCIKICAgICAgc2hhZG93CiAgICAgIHNpZGViYXItY2xhc3M9InAtMCIKICAgICAgcmlnaHQKICAgICAgOm5vLWhlYWRlcj0idHJ1ZSIKICAgICAgdi1tb2RlbD0iaXNTaWRlYmFyIgogID4KCiAgICA8RFhBQXBwbGljYXRpb25BbGxJbmZvCiAgICAgICAgcmVmPSJpc1NpZGViYXJfcmVmIgogICAgICAgIEBjbG9zZT0iY2xvc2VTaWRlYmFyIgogICAgICAgIDphcHBsaWNhdGlvbklkPSJzZWxlY3RlZFRySXRlbS5hcHBsaWNhdGlvbkRYQUlkIgogICAgICAgIDphcHBsaWNhdGlvblN0YXR1cz0ic2VsZWN0ZWRUckl0ZW0uYXBwbGljYXRpb25TdGF0dXMiCiAgICAvPgoKICA8L2Itc2lkZWJhcj4KCiAgPGItbW9kYWwgdi1tb2RlbD0idmlzYUZpbGVWaWV3Lm1vZGFsIiA6dGl0bGU9ImAkeyR0KCdhY3Rpb25zLnZpZXdfZG9jdW1lbnQnKX1gIiBzY3JvbGxhYmxlIHNpemU9ImxnIj4KICAgIDxwZGYgOnNyYz0idmlzYUZpbGVWaWV3LnNyYyI+PC9wZGY+CiAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWZvb3Rlcj4KICAgICAgPGEgOmhyZWY9InZpc2FGaWxlVmlldy5zcmMiIGNsYXNzPSJidG4gYnRuLWluZm8iIDpkb3dubG9hZD0iYCR7c2VsZWN0ZWRUckl0ZW0uYXBwbGljYXRpb25SZWdOdW1iZXJ9LXZpc2EucGRmYCIgdGFyZ2V0PSJfYmxhbmsiPnt7JHQoJ2FjdGlvbnMuZG93bmxvYWQnKX19PC9hPgogICAgPC90ZW1wbGF0ZT4KICA8L2ItbW9kYWw+CgogIDwhLS0gQ09NTUlTU0lPTlMgTU9EQUwgLS0+CiAgPFZhbGlkYXRpb25PYnNlcnZlciB2LXNsb3Q9InsgaGFuZGxlU3VibWl0IH0iPgogICAgPGItbW9kYWwKICAgICAgICBzY3JvbGxhYmxlCiAgICAgICAgdi1tb2RlbD0iY29tbWlzc2lvbnNNb2RhbCIKICAgICAgICBzaXplPSJtZCIKICAgICAgICA6dGl0bGU9ImAkeyR0KCdzdWJtb2R1bGVzLmR4YS5mb3JfcGVyZm9ybScpfWAiCiAgICA+CiAgICAgIDxkaXY+CiAgICAgICAgPEJhc2VNdWx0aXNlbGVjdFdpdGhWYWxpZGF0aW9uCiAgICAgICAgICAgIHJ1bGVzPSJyZXF1aXJlZCIKICAgICAgICAgICAgY2xhc3M9InJlcXVpcmVkIgogICAgICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uVHlwZUlkIgogICAgICAgICAgICA6b3B0aW9ucz0iY29tbWlzc2lvblR5cGVzLm1hcChlID0+IGUuaWQpIgogICAgICAgICAgICA6bGFiZWw9IiR0KCdjb2x1bW4uZW1wbG95ZWUnKSIKICAgICAgICAgICAgbGFiZWwtb24tdG9wCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiCiAgICAgICAgICAgIDpjdXN0b20tbGFiZWw9ImN1c3RvbUxhYmVsQ29tbWlzc2lvblR5cGVzIgogICAgICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYm90dG9tIgogICAgICAgICAgICA6bWF4LWhlaWdodD0iNjAwIgogICAgICAgICAgICA6c2hvdy1sYWJlbHM9ImZhbHNlIgogICAgICAgIC8+CgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibXQtMyI+CiAgICAgICAgPGItZm9ybS10ZXh0YXJlYQogICAgICAgICAgICB2LW1vZGVsPSJjb21tZW50IgogICAgICAgICAgICA6cGxhY2Vob2xkZXI9IiR0KCdzdWJtb2R1bGVzLmRvYy5zdW1tYXJ5JykiCiAgICAgICAgICAgIHJvd3M9IjUiCiAgICAgICAgPjwvYi1mb3JtLXRleHRhcmVhPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibXQtMyI+CiAgICAgICAgPEJhc2VEYXRlUGlja2VyV2l0aFZhbGlkYXRpb24KICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgZGlzYWJsZS1iZWZvcmUKICAgICAgICAgICAgZm9ybWF0PSJERC1NTS1ZWVlZIgogICAgICAgICAgICA6ZGlzYWJsZWQtZGF0ZT0idHJ1ZSIKICAgICAgICAgICAgOmRpc2FibGVkLWJlZm9yZT0idHJ1ZSIKICAgICAgICAgICAgY3VzdG9tLXN0eWxlcz0iZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAwJSAxMDAlIgogICAgICAgICAgICB2LW1vZGVsPSJnaXZlVmlzYURhdGUiCiAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0iJHQoJ3N1Ym1vZHVsZXMuZG9jLmNvbXBsZXRpb25UaW1lJykiCiAgICAgICAgICAgIGxhbmc9InJ1IgogICAgICAgIC8+CiAgICAgIDwvZGl2PgogICAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWZvb3Rlcj4KICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ic3VjY2VzcyIgQGNsaWNrPSJoYW5kbGVTdWJtaXQodmlzYV9idG4pIj4KICAgICAgICAgIDxiLW92ZXJsYXkKICAgICAgICAgICAgICA6b3BhY2l0eT0iMC4xIgogICAgICAgICAgICAgIDpzaG93PSJjb21taXNzaW9uTW9kYWxMb2FkZXIiCiAgICAgICAgICAgICAgcm91bmRlZD0ic20iCiAgICAgICAgICA+CiAgICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLnNlbmQiKSB9fQogICAgICAgICAgPC9iLW92ZXJsYXk+CiAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgPC90ZW1wbGF0ZT4KICAgIDwvYi1tb2RhbD4KICA8L1ZhbGlkYXRpb25PYnNlcnZlcj4KCiAgPGItc2lkZWJhcgogICAgICBpZD0ic2lkZWJhci1yaWdodCIKICAgICAgbm8taGVhZGVyCiAgICAgIHYtbW9kZWw9ImZpbGVFeWUiCiAgICAgIHJpZ2h0CiAgICAgIGJhY2tkcm9wCiAgICAgIHNoYWRvdwogID4KICAgIDx0ZW1wbGF0ZSAjZGVmYXVsdD4KICAgICAgPGRpdiBjbGFzcz0icC00Ij4KICAgICAgICA8Yi1yb3cgY2xhc3M9InBsLTQgcHItNCI+CiAgICAgICAgICA8Yi1jb2wgY29scz0iMiI+CiAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgQGNsaWNrPSJjbG9zZURvYyIKICAgICAgICAgICAgICAgIGJsb2NrCiAgICAgICAgICAgICAgICBjbGFzcz0iZmxvYXQtcmlnaHQgbWwtMTAiCiAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtdGltZXMiPjwvaT4KICAgICAgICAgICAgICB7eyAkdCgiYWN0aW9ucy5jbG9zZSIpIH19CiAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8L2ItY29sPgogICAgICAgIDwvYi1yb3c+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJweC04IHB5LTIiPgogICAgICAgIDxiLXJvdyA6c3R5bGU9ImBtaW4taGVpZ2h0OiR7aGVpZ2h0fXB4YCI+CiAgICAgICAgICA8Yi1jb2w+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJnLXdoaXRlIHAtMyI+CiAgICAgICAgICAgICAgPGVtYmVkCiAgICAgICAgICAgICAgICAgIDpoZWlnaHQ9ImhlaWdodCIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiCiAgICAgICAgICAgICAgICAgIHYtaWY9ImZpbGVVcmwiCiAgICAgICAgICAgICAgICAgIDpzcmM9ImAke2dldEJhc2VVcmx9LyR7ZmlsZVVybH1gIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9iLWNvbD4KICAgICAgICA8L2Itcm93PgogICAgICA8L2Rpdj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLXNpZGViYXI+CjwvZGl2Pgo8IS0tIDwvTGF5b3V0PiAtLT4K"},null]}