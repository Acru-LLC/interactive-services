{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\advertisement\\modules\\contractor-notification\\CreateOrUpdate.vue?vue&type=style&index=0&id=592134c7&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\advertisement\\modules\\contractor-notification\\CreateOrUpdate.vue","mtime":1682419455871},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1675061970775},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY29sLWZvcm0tbGFiZWwgew0KICBwYWRkaW5nLXRvcDogMDsNCn0NCg0KdWwgew0KICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7DQp9DQo="},{"version":3,"sources":["CreateOrUpdate.vue"],"names":[],"mappings":";AAqNA;AACA;AACA;;AAEA;AACA;AACA","file":"CreateOrUpdate.vue","sourceRoot":"src/modules/advertisement/modules/contractor-notification","sourcesContent":["<template>\r\n  <base-create-or-update-wrapper\r\n      @save=\"save\"\r\n      has-save-suspend\r\n      :custom-title=\"isModeCreate ? $t('actions.create') : $t('actions.update')\"\r\n  >\r\n    <ValidationObserver\r\n        ref=\"observer\"\r\n        v-slot=\"{}\"\r\n    >\r\n      <b-row class=\"mb-3\">\r\n        <b-col\r\n            sm=\"12\"\r\n            md=\"6\"\r\n        >\r\n          <b-row>\r\n            <b-col>\r\n              <ValidationProvider\r\n                  name=\"photos\"\r\n                  rules=\"required\"\r\n              >\r\n                <template v-slot:default=\"\">\r\n                  <BaseTextareaWithValidation\r\n                      rules=\"required\"\r\n                      class=\"required\"\r\n                      label-on-top\r\n                      v-model=\"editingItem.description\"\r\n                      max-rows=\"6\"\r\n                      :label=\"$t('column.comment')\"\r\n                      :placeholder=\"$t('column.comment')\"\r\n                  />\r\n\r\n                </template>\r\n              </ValidationProvider>\r\n            </b-col>\r\n          </b-row>\r\n          <br/>\r\n          <b-row>\r\n            <b-col>\r\n              <ValidationProvider\r\n                  rules=\"required\"\r\n              >\r\n                <template v-slot:default=\"\">\r\n                  <BaseDatePickerWithValidation\r\n                      class=\"required\"\r\n                      custom-styles=\"grid-template-columns: 50% 50%\"\r\n                      v-model=\"editingItem.placedDate\"\r\n                      :label=\"$t('column.placement_date')\"\r\n                      :placeholder=\"$t('column.placement_date')\"\r\n                      disable-after\r\n                      lang=\"ru\"\r\n                  ></BaseDatePickerWithValidation>\r\n                </template>\r\n              </ValidationProvider>\r\n            </b-col>\r\n          </b-row>\r\n        </b-col>\r\n        <b-col\r\n            sm=\"12\"\r\n            md=\"6\"\r\n        >\r\n          <ValidationProvider\r\n              name=\"photos\"\r\n              rules=\"required\"\r\n          >\r\n            <template v-slot:default=\"\" style=\"margin-bottom: 0%\">\r\n              <BaseFileUploaderWithValidation\r\n                  ref=\"photosUploader\"\r\n                  rules=\"required\"\r\n                  class=\"required\"\r\n                  :required=\"true\"\r\n                  v-model=\"photos\"\r\n                  :max-files=\"5\"\r\n                  :max-filesize=\"null\"\r\n                  wrapper-classes=\"required\"\r\n                  data-vv-name=\"photos\"\r\n                  data-vv-as=\"Photos\"\r\n                  :label=\"$t('column.ad_construction_photo')\"\r\n              ></BaseFileUploaderWithValidation>\r\n            </template>\r\n          </ValidationProvider>\r\n        </b-col>\r\n      </b-row>\r\n    </ValidationObserver>\r\n  </base-create-or-update-wrapper>\r\n</template>\r\n<script>\r\nconst MAIN_API_URL = 'report/advertisement-notifications'\r\n/*\r\n* YOU MUST SEND {{ MAIN_API_URL }} TO CRUD_SERVICE */\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport helperService from \"@/shared/services/helper.service\"\r\n\r\nexport default {\r\n  name: \"CreateOrUpdate\",\r\n  /*\r\n  * COMPONENTS */\r\n  components: {},\r\n  /*\r\n  * DATA */\r\n  data() {\r\n    return {\r\n      editingItem: {},\r\n      photos: [],\r\n      photosFromServer: [],\r\n      publicPath: process.env.BASE_URL,\r\n    }\r\n  },\r\n  /*\r\n  * COMPUTED */\r\n  computed: {\r\n    isModeCreate() {\r\n      return this.$route.name === 'CreateContractorNotification'\r\n    },\r\n    computedObserver() {\r\n      return this.$refs.observer\r\n    }\r\n  },\r\n  /*\r\n  * METHODS */\r\n  methods: {\r\n    save() {\r\n      this.computedObserver.validate().then(valid => {\r\n        if (valid) {\r\n          if (!this.isModeCreate) {\r\n            crudAndListsService.updateNotification(MAIN_API_URL, this.makeAndReturnFormData(), this.$route.params.id)\r\n                .then(res => {\r\n              this.computedObserver.reset()\r\n              this.editingItem = Object.assign({}, {});\r\n              this.$router.go(-1)\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n          } else {\r\n            crudAndListsService.createNotification(MAIN_API_URL, this.makeAndReturnFormData(), this.$route.params.adConstructionId)\r\n                .then(res => {\r\n              this.computedObserver.reset()\r\n              this.editingItem = Object.assign({}, {});\r\n              this.$router.go(-1)\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n          }\r\n        } else {\r\n          this.$toast(this.$t('messages.fill_required_fields'), {type: 'error'});\r\n        }\r\n      });\r\n    },\r\n    async setFilesFromServer() {\r\n      // OBJECT_PHOTOS\r\n      this.photosFromServer.forEach(f => {\r\n        fetch(this.publicPath + f.url)\r\n            .then((res) => res.blob())\r\n            .then((myBlob) => {\r\n              myBlob.name = f.name;\r\n              myBlob.lastModified = new Date();\r\n              const myFile = new File([myBlob], f.name, {\r\n                type: myBlob.type,\r\n              });\r\n\r\n              let url = this.publicPath + f.url;\r\n              this.$refs.photosUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n            })\r\n            .catch(e => console.log(e));\r\n      })\r\n    },\r\n    makeAndReturnFormData() {\r\n      let form = new FormData();\r\n      this.photos.forEach(f => {\r\n        form.append(\"advertisementNotificationPhotos\", f.file);\r\n      })\r\n      form.append(\"description\", this.editingItem.description);\r\n      form.append(\"placedDate\", this.editingItem.placedDate)\r\n      return form\r\n    },\r\n    collectErr(key) {\r\n      if (this.errors[key] !== undefined) {\r\n        return this.errors[key];\r\n      }\r\n      return undefined;\r\n    },\r\n    hasError(key) {\r\n      if (this.errors[key] !== undefined) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n  /*\r\n  * CREATED */\r\n  created() {\r\n    this.var_default_search_payload.itemsPerPage = 500\r\n    if (this.isModeCreate) {\r\n      crudAndListsService.getEmpty(MAIN_API_URL)\r\n          .then(res => {\r\n            this.editingItem = res.data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    } else {\r\n      crudAndListsService.getById(MAIN_API_URL, this.$route.params.id, false)\r\n          .then(res => {\r\n            this.editingItem = res.data.AdvertisementNotificationDto\r\n            this.photosFromServer = res.data.advertisementNotificationPhotoList\r\n            this.setFilesFromServer()\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.col-form-label {\r\n  padding-top: 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n}\r\n</style>"]}]}