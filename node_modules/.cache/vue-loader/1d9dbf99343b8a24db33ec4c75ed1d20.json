{"remainingRequest":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js??ref--12-0!D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js!D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\interactive-services\\src\\modules\\reporting\\menu\\Index.vue?vue&type=template&id=4dc86d6d&scoped=true","dependencies":[{"path":"D:\\ACRU\\interactive-services\\src\\modules\\reporting\\menu\\Index.vue","mtime":1712200248353},{"path":"D:\\ACRU\\interactive-services\\babel.config.js","mtime":1709020148252},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkgZnJvbSAiRDovQUNSVS9pbnRlcmFjdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CnZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7CiAgdmFyIF92bSA9IHRoaXMsCiAgICBfYyA9IF92bS5fc2VsZi5fYzsKICByZXR1cm4gX2MoJ2RpdicsIFtfYygnZGl2JywgewogICAgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTIgdGV4dC1jZW50ZXIiCiAgfSwgW19jKCdkaXYnLCB7CiAgICBzdGF0aWNDbGFzczogImgzIG10LTQgZC1pbmxpbmUtYmxvY2siLAogICAgc3RhdGljU3R5bGU6IHsKICAgICAgImNvbG9yIjogIiMyYjY3NWIiLAogICAgICAiZm9udC13ZWlnaHQiOiAiNTAwIgogICAgfQogIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLnRpdGxlJykpICsgIiAiKV0pXSksIF9jKCdiLWNhcmQnLCBbX2MoJ2ItY29udGFpbmVyJywgewogICAgYXR0cnM6IHsKICAgICAgImZsdWlkIjogIjEwMCUiCiAgICB9CiAgfSwgW19jKCdiLXJvdycsIFtfYygnYi1jb2wnLCBbX2MoJ1ZhbGlkYXRpb25PYnNlcnZlcicsIHsKICAgIHJlZjogIm9ic2VydmVyIiwKICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoW3sKICAgICAga2V5OiAiZGVmYXVsdCIsCiAgICAgIGZuOiBmdW5jdGlvbiBmbihfcmVmKSB7CiAgICAgICAgX29iamVjdERlc3RydWN0dXJpbmdFbXB0eShfcmVmKTsKICAgICAgICByZXR1cm4gW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLmVkaXRpbmdJdGVtLm5hbWUpICsgIiAiKSwgX2MoJ2ItY2FyZCcsIHsKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICJib3JkZXIiOiAiMXB4IHNvbGlkICMyYjY3NWIiLAogICAgICAgICAgICAiYm9yZGVyLXJhZGl1cyI6ICI1cHgiLAogICAgICAgICAgICAibWFyZ2luIjogIjE1cHgiLAogICAgICAgICAgICAicGFkZGluZyI6ICIxNXB4IiwKICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMTBweCIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJjb2xzIjogIjMiCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdkaXYnLCB7CiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiZm9udC1zaXplIjogIjE2cHgiLAogICAgICAgICAgICAiYmFja2dyb3VuZCI6ICIjMmI2NzViIiwKICAgICAgICAgICAgImNvbG9yIjogIndoaXRlIiwKICAgICAgICAgICAgInBhZGRpbmciOiAiNXB4IiwKICAgICAgICAgICAgIndpZHRoIjogIjEwMCUiLAogICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIyMHB4IiwKICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiMnB4IiwKICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiCiAgICAgICAgICB9CiAgICAgICAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtMS50aXRsZScpKSArICIgIildKV0pXSwgMSksIF9jKCdiLXJvdycsIFtfYygnYi1jb2wnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInB4LTMgcHktMCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJtYXNrIjogIiMjIyMjIyMjIyIsCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6ICIxMjM0NTY3ODkiLAogICAgICAgICAgICAid2l0aC1pbnB1dC1hcHBlbmQiOiAiIiwKICAgICAgICAgICAgInJ1bGVzIjogewogICAgICAgICAgICAgIHJlZ2V4OiAvXGJcZHs5fVxiLwogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0xLm5hbWUxJyksCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICJrZXl1cCI6IGZ1bmN0aW9uIGtleXVwKCRldmVudCkgewogICAgICAgICAgICAgIGlmICghJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykgJiYgX3ZtLl9rKCRldmVudC5rZXlDb2RlLCAiZW50ZXIiLCAxMywgJGV2ZW50LmtleSwgIkVudGVyIikpIHJldHVybiBudWxsOwogICAgICAgICAgICAgIHJldHVybiBfdm0uZmluZENvbnRyYWN0b3JCeUlubi5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbewogICAgICAgICAgICBrZXk6ICJhcHBlbmQtc2xvdCIsCiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiBmbigpIHsKICAgICAgICAgICAgICByZXR1cm4gW19jKCdiLWJ1dHRvbicsIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICJwYWRkaW5nIjogIjIuNXB4IDEwcHgiLAogICAgICAgICAgICAgICAgICAiZm9udC1zaXplIjogIjEuMnJlbSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZGlzYWJsZWQiOiBfdm0ubG9hZGluZ1N0aXJJdGVtcywKICAgICAgICAgICAgICAgICAgInZhcmlhbnQiOiAib3V0bGluZS1wcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgImlkIjogImNvbnRyYWN0b3JTZWFyY2hCdXR0b24iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgImNsaWNrIjogX3ZtLmZpbmRDb250cmFjdG9yQnlJbm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LCBbX3ZtLmxvYWRpbmdTdGlySXRlbXMgPyBfYygnYi1zcGlubmVyJywgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgInNtYWxsIjogIiIsCiAgICAgICAgICAgICAgICAgICJsYWJlbCI6ICJTcGlubmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSA6IF9jKCdpJywgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZGkgbWRpLWFjY291bnQtc2VhcmNoIgogICAgICAgICAgICAgIH0pXSwgMSldOwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm94eTogdHJ1ZQogICAgICAgICAgfV0sIG51bGwsIHRydWUpLAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5zdGlyLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAic3RpciIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5zdGlyIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTEubmFtZTMnKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5uYW1lLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAibmFtZSIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5uYW1lIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTEubmFtZTQnKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5maW8sCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygkJHYpIHsKICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZWRpdGluZ0l0ZW0sICJmaW8iLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0uZmlvIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTEubmFtZTUnKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5hZGRyZXNzLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiYWRkcmVzcyIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5hZGRyZXNzIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTEubmFtZTInKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5rdHV0LAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAia3R1dCIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5rdHV0IgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImNvbHMiOiAiMiIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ0Jhc2VNdWx0aXNlbGVjdFdpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAibGFiZWwtb24tdG9wIjogIiIsCiAgICAgICAgICAgICJvcHRpb25zIjogX3ZtLnBob25lQ29kZXMubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGUuaWQ7CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3NlbmRfbWVzc2FnZS5jb2RlJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJvcGVuLWRpcmVjdGlvbiI6ICJib3R0b20iLAogICAgICAgICAgICAic2hvdy1sYWJlbHMiOiBmYWxzZSwKICAgICAgICAgICAgImN1c3RvbS1sYWJlbCI6IF92bS5jdXN0b21MYWJlbFBob25lQ29kZQogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0ucGhvbmVJZCwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS5waG9uZUlkID0gJCR2OwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAicGhvbmVJZCIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpLCBfYygnYi1jb2wnLCBbX2MoJ0Jhc2VJbnB1dFdpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAidHlwZSI6ICJ0ZWwiLAogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3NlbmRfbWVzc2FnZS5waG9uZV9udW1iZXInKSwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiLAogICAgICAgICAgICAiY3VzdG9tLXN0eWxlcyI6ICJncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDAlIDgwJSIsCiAgICAgICAgICAgICJtYXNrIjogIiMjIy0jIy0jIyIsCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6ICIjIyMtIyMtIyMiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5waG9uZU51bWJlciwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS5waG9uZU51bWJlciA9ICQkdjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogInBob25lTnVtYmVyIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSldLCAxKV0sIDEpXSwgMSldLCAxKSwgX2MoJ2ItY2FyZCcsIHsKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICJib3JkZXIiOiAiMXB4IHNvbGlkICMyYjY3NWIiLAogICAgICAgICAgICAiYm9yZGVyLXJhZGl1cyI6ICI1cHgiLAogICAgICAgICAgICAibWFyZ2luIjogIjE1cHgiLAogICAgICAgICAgICAicGFkZGluZyI6ICIxNXB4IiwKICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMTBweCIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJjb2xzIjogIjMiCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdkaXYnLCB7CiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiZm9udC1zaXplIjogIjE2cHgiLAogICAgICAgICAgICAiYmFja2dyb3VuZCI6ICIjMmI2NzViIiwKICAgICAgICAgICAgImNvbG9yIjogIndoaXRlIiwKICAgICAgICAgICAgInBhZGRpbmciOiAiNXB4IiwKICAgICAgICAgICAgIndpZHRoIjogIjEwMCUiLAogICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIyMHB4IiwKICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiMnB4IiwKICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiCiAgICAgICAgICB9CiAgICAgICAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtMi50aXRsZScpKSArICIgIildKV0pXSwgMSksIF9jKCdiLXJvdycsIFtfYygnYi1jb2wnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInB4LTMgcHktMCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnQmFzZVNlbGVjdFdpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0yLm5hbWUxJyksCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0uY29kZVNveGEsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygkJHYpIHsKICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZWRpdGluZ0l0ZW0sICJjb2RlU294YSIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5jb2RlU294YSIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2ItZm9ybS1zZWxlY3Qtb3B0aW9uJywgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgInZhbHVlIjogIlNBTk9BVCIKICAgICAgICAgIH0KICAgICAgICB9LCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLnRpdGxlJykpICsgIiAiKV0pLCBfYygnYi1mb3JtLXNlbGVjdC1vcHRpb24nLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAidmFsdWUiOiAiSElaTUFUIgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTQudGl0bGUnKSkgKyAiICIpXSldLCAxKV0sIDEpLCBfYygnYi1jb2wnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInB4LTMiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImNvbHMiOiAiMyIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ0Jhc2VTZWxlY3RXaXRoVmFsaWRhdGlvbicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicmVxdWlyZWQiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsIjogX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtMi5uYW1lMicpLAogICAgICAgICAgICAibGFiZWwtb24tdG9wIjogIiIKICAgICAgICAgIH0sCiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRpbmdJdGVtLmNvZGVYaXNvYm9kLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiY29kZVhpc29ib2QiLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0uY29kZVhpc29ib2QiCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdiLWZvcm0tc2VsZWN0LW9wdGlvbicsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJ2YWx1ZSI6ICI2T1lMSUsiCiAgICAgICAgICB9CiAgICAgICAgfSwgW192bS5fdihfdm0uX3MoX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtMi5uYW1lMycpKSArICIgIildKSwgX2MoJ2ItZm9ybS1zZWxlY3Qtb3B0aW9uJywgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgInZhbHVlIjogIllJTExJSyIKICAgICAgICAgIH0KICAgICAgICB9LCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0yLm5hbWU0JykpICsgIiAiKV0pXSwgMSldLCAxKSwgX3ZtLmVkaXRpbmdJdGVtLmNvZGVYaXNvYm9kID09ICdZSUxMSUsnID8gX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJjb2xzIjogIjIiCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdCYXNlRGF0ZVBpY2tlcldpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ2NvbHVtbi55ZWFyJyksCiAgICAgICAgICAgICJ0eXBlIjogInllYXIiLAogICAgICAgICAgICAiZm9ybWF0IjogIllZWVkiLAogICAgICAgICAgICAibGFiZWwtb24tdG9wIjogIiIsCiAgICAgICAgICAgICJsYW5nIjogInJ1IgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0ueWVhciwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgInllYXIiLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0ueWVhciIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpIDogX3ZtLl9lKCksIF92bS5lZGl0aW5nSXRlbS5jb2RlWGlzb2JvZCA9PSAnNk9ZTElLJyA/IF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyBtdC0zIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJjb2xzIjogIjMiCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdiLWZvcm0tZ3JvdXAnLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0yLm5hbWU1JyksCiAgICAgICAgICAgICJsYWJlbC1mb3IiOiAibmVzdGVkLWNpdHkiLAogICAgICAgICAgICAibGFiZWwtY29scy1zbSI6ICIzIiwKICAgICAgICAgICAgImxhYmVsLWFsaWduLXNtIjogInJpZ2h0IgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgW19jKCdCYXNlRGF0ZVBpY2tlcldpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAiY3VzdG9tLXN0eWxlcyI6ICJncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7IiwKICAgICAgICAgICAgIm9ubHktZm9ybS1lbGVtZW50IjogdHJ1ZSwKICAgICAgICAgICAgImxhbmciOiAicnUiLAogICAgICAgICAgICAicGxhY2Vob2xkZXIiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0yLm5hbWU2JykKICAgICAgICAgIH0sCiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRpbmdJdGVtLmRhdGVGcm9tLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiZGF0ZUZyb20iLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0uZGF0ZUZyb20iCiAgICAgICAgICB9CiAgICAgICAgfSldLCAxKSwgX2MoJ2ItY29sJywgW19jKCdCYXNlRGF0ZVBpY2tlcldpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAiY3VzdG9tLXN0eWxlcyI6ICJncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7IiwKICAgICAgICAgICAgIm9ubHktZm9ybS1lbGVtZW50IjogdHJ1ZSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtMi5uYW1lNycpLAogICAgICAgICAgICAibGFuZyI6ICJydSIKICAgICAgICAgIH0sCiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRpbmdJdGVtLmRhdGVUbywKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgImRhdGVUbyIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5kYXRlVG8iCiAgICAgICAgICB9CiAgICAgICAgfSldLCAxKV0sIDEpXSwgMSldLCAxKSA6IF92bS5fZSgpLCBfYygnYi1jb2wnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInB5LTAgcHgtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICIzIgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0udXBsb2FkRmlsZW5hbWUgIT09ICcnID8gX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiY29scyI6ICI2IgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS51cGxvYWRGaWxlbmFtZSkgKyAiICIpXSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJjb2xzIjogIjYiCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdiLWJ1dHRvbicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyBwLTEiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImJhY2tncm91bmQiOiAiI2YzOTEzOCIKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICAiY2xpY2siOiBfdm0uY2xlYXJGaWxlCiAgICAgICAgICB9CiAgICAgICAgfSwgW19jKCdpJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS13aW5kb3ctY2xvc2UiCiAgICAgICAgfSksIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCJyYWlzLmNhbmNlbCIpKSArICIgIildKV0sIDEpXSwgMSkgOiBfYygnYi1idXR0b24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm10LTMgcC0yIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICJib3JkZXIiOiAiMXB4IHNvbGlkICMyYjY3NWIiLAogICAgICAgICAgICAiYmFja2dyb3VuZCI6ICIjRkZGRkZGIiwKICAgICAgICAgICAgIndpZHRoIjogIjIwMHB4IgogICAgICAgICAgfSwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJibG9jayI6IF92bS51cGxvYWRGaWxlbmFtZSAhPT0gJycgPyBmYWxzZSA6IHRydWUKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICAiY2xpY2siOiBfdm0udXBsb2FkRmlsZQogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnc3BhbicsIHsKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICJjb2xvciI6ICIjMmI2NzViIgogICAgICAgICAgfQogICAgICAgIH0sIFtfYygnaScsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtdXBsb2FkIgogICAgICAgIH0pLCBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgiYWN0aW9ucy51cGxvYWRfZmlsZSIpKSArICIgIildKV0pLCBfYygnYi1mb3JtLWZpbGUnLCB7CiAgICAgICAgICByZWY6ICJpbG92YVJlZiIsCiAgICAgICAgICBzdGF0aWNDbGFzczogImQtbm9uZSIsCiAgICAgICAgICBvbjogewogICAgICAgICAgICAiY2hhbmdlIjogX3ZtLm9uRmlsZUNoYW5nZQogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0udXBsb2FkRmlsZXMsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygkJHYpIHsKICAgICAgICAgICAgICBfdm0udXBsb2FkRmlsZXMgPSAkJHY7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJ1cGxvYWRGaWxlcyIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpXSwgMSldLCAxKV07CiAgICAgIH0KICAgIH1dKQogIH0pLCBfdm0uZWRpdGluZ0l0ZW0uY29kZVNveGEgPT0gJ1NBTk9BVCcgPyBfYygnYi1jYXJkJywgewogICAgc3RhdGljU3R5bGU6IHsKICAgICAgImJvcmRlciI6ICIxcHggc29saWQgIzJiNjc1YiIsCiAgICAgICJib3JkZXItcmFkaXVzIjogIjVweCIsCiAgICAgICJtYXJnaW4iOiAiMTVweCIsCiAgICAgICJwYWRkaW5nIjogIjE1cHgiLAogICAgICAibWFyZ2luLXRvcCI6ICIxMHB4IgogICAgfQogIH0sIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgewogICAgc3RhdGljQ2xhc3M6ICJweC0zIHB5LTAiLAogICAgYXR0cnM6IHsKICAgICAgImNvbHMiOiAiMyIKICAgIH0KICB9LCBbX2MoJ2RpdicsIHsKICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICJmb250LXNpemUiOiAiMTZweCIsCiAgICAgICJiYWNrZ3JvdW5kIjogIiMyYjY3NWIiLAogICAgICAiY29sb3IiOiAid2hpdGUiLAogICAgICAicGFkZGluZyI6ICI1cHgiLAogICAgICAid2lkdGgiOiAiMTAwJSIsCiAgICAgICJtYXJnaW4tYm90dG9tIjogIjIwcHgiLAogICAgICAiYm9yZGVyLXJhZGl1cyI6ICIycHgiLAogICAgICAiZm9udC13ZWlnaHQiOiAiYm9sZCIKICAgIH0KICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLnRpdGxlJykpICsgIiAiKV0pXSksIF9jKCdiLWNvbCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjMiCiAgICB9CiAgfSksIF9jKCdiLWNvbCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjMiCiAgICB9CiAgfSksIF9jKCdiLWNvbCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjMiCiAgICB9CiAgfSwgW19jKCdiLWJ1dHRvbi1ncm91cCcsIHsKICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICJ3aWR0aCI6ICIxMDAlIgogICAgfQogIH0sIFtfYygnYi1idXR0b24nLCB7CiAgICBzdGF0aWNDbGFzczogInB0LTEgbWItNCBwYi0xIHByLTIgcGwtMiIsCiAgICBhdHRyczogewogICAgICAiYmxvY2siOiAiIiwKICAgICAgInZhcmlhbnQiOiAicHJpbWFyeSIKICAgIH0sCiAgICBvbjogewogICAgICAiY2xpY2siOiBfdm0uYWRkRm9ybVNhbm9hdAogICAgfQogIH0sIFtfYygnaScsIHsKICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtcGx1cyIKICB9KSwgX2MoJ3NwYW4nLCB7CiAgICBzdGF0aWNTdHlsZTogewogICAgICAiZm9udC1zaXplIjogIjE0cHgiCiAgICB9CiAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCJhY3Rpb25zLmFkZCIpKSArICIgIildKV0pLCBfYygnYi1idXR0b24nLCB7CiAgICBkaXJlY3RpdmVzOiBbewogICAgICBuYW1lOiAic2hvdyIsCiAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICB2YWx1ZTogX3ZtLnNhbm9hdC5sZW5ndGggPiAwLAogICAgICBleHByZXNzaW9uOiAic2Fub2F0Lmxlbmd0aCA+IDAiCiAgICB9XSwKICAgIHN0YXRpY0NsYXNzOiAicHQtMSBtYi00IHBiLTEgcHItMiBwbC0yIiwKICAgIGF0dHJzOiB7CiAgICAgICJ2YXJpYW50IjogIndhcm5pbmciCiAgICB9LAogICAgb246IHsKICAgICAgImNsaWNrIjogZnVuY3Rpb24gY2xpY2soJGV2ZW50KSB7CiAgICAgICAgX3ZtLmlzTW9kYWxTYW5vYXQgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgW19jKCdpJywgewogICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1leWUiCiAgfSldKV0sIDEpXSwgMSldLCAxKSwgX2MoJ1ZhbGlkYXRpb25PYnNlcnZlcicsIHsKICAgIHJlZjogIm9ic2VydmVyU2Fub2F0IiwKICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoW3sKICAgICAga2V5OiAiZGVmYXVsdCIsCiAgICAgIGZuOiBmdW5jdGlvbiBmbihfcmVmMikgewogICAgICAgIF9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkoX3JlZjIpOwogICAgICAgIHJldHVybiBbX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIKICAgICAgICB9LCBbX2MoJ0Jhc2VJbnB1dFdpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAibWFzayI6ICIjIyMjIyMjIyMiLAogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUxJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0uY29kZVRpZnRuLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiY29kZVRpZnRuIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLmNvZGVUaWZ0biIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpLCBfYygnYi1jb2wnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInB4LTMiCiAgICAgICAgfSwgW19jKCdCYXNlSW5wdXRXaXRoVmFsaWRhdGlvbicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicmVxdWlyZWQiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImxhYmVsIjogX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtMy5uYW1lMicpLAogICAgICAgICAgICAicGxhY2Vob2xkZXIiOiBfdm0uJHQoJycpLAogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAibGFiZWwtb24tdG9wIjogIiIKICAgICAgICAgIH0sCiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRpbmdJdGVtLm5hbWVQcm9kdWN0LAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAibmFtZVByb2R1Y3QiLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0ubmFtZVByb2R1Y3QiCiAgICAgICAgICB9CiAgICAgICAgfSldLCAxKSwgX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTMnKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5jb2RlTWN0LAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiY29kZU1jdCIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5jb2RlTWN0IgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIKICAgICAgICB9LCBbX2MoJ0Jhc2VJbnB1dFdpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWU0JyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0ubWFkZVBvd2VyQWxsLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAibWFkZVBvd2VyQWxsIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLm1hZGVQb3dlckFsbCIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpXSwgMSksIF9jKCdiLXJvdycsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtNCIKICAgICAgICB9LCBbX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIHB5LTAiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImNvbHMiOiAiMyIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2RpdicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImZvbnQtc2l6ZSI6ICIxNHB4IiwKICAgICAgICAgICAgImJvcmRlciI6ICIxcHggc29saWQgIzJiNjc1YiIsCiAgICAgICAgICAgICJwYWRkaW5nIjogIjVweCIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIxMDAlIiwKICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMjBweCIsCiAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjRweCIsCiAgICAgICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgImN1cnNvciI6ICJub25lIgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTUnKSkgKyAiICIpLCBfYygnYnInKSwgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUxMScpKSArICIgIildKSwgX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTknKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5tYWRlVG9ubmEsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygkJHYpIHsKICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZWRpdGluZ0l0ZW0sICJtYWRlVG9ubmEiLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0ubWFkZVRvbm5hIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTEwJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0ubWFkZVN1bSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgIm1hZGVTdW0iLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0ubWFkZVN1bSIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpXSwgMSldLCAxKSwgX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIHB5LTAiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImNvbHMiOiAiMyIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2RpdicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImZvbnQtc2l6ZSI6ICIxNHB4IiwKICAgICAgICAgICAgImJvcmRlciI6ICIxcHggc29saWQgIzJiNjc1YiIsCiAgICAgICAgICAgICJwYWRkaW5nIjogIjVweCIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIxMDAlIiwKICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMjBweCIsCiAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjRweCIsCiAgICAgICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgImN1cnNvciI6ICJub25lIgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTYnKSkgKyAiICIpLCBfYygnYnInKSwgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUxMScpKSArICIgIildKSwgX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTknKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5idXlUb25uYSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgImJ1eVRvbm5hIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLmJ1eVRvbm5hIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTEwJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0uYnV5U3VtLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiYnV5U3VtIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLmJ1eVN1bSIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpXSwgMSldLCAxKSwgX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIHB5LTAiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImNvbHMiOiAiMyIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2RpdicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImZvbnQtc2l6ZSI6ICIxNHB4IiwKICAgICAgICAgICAgImJvcmRlciI6ICIxcHggc29saWQgIzJiNjc1YiIsCiAgICAgICAgICAgICJwYWRkaW5nIjogIjVweCIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIxMDAlIiwKICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMjBweCIsCiAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjRweCIsCiAgICAgICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgImN1cnNvciI6ICJub25lIgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTcnKSkgKyAiICIpLCBfYygnYnInKSwgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUxMScpKSArICIgIildKSwgX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTknKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5leHBvcnRUb25uYSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgImV4cG9ydFRvbm5hIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLmV4cG9ydFRvbm5hIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTEwJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0uZXhwb3J0U3VtLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiZXhwb3J0U3VtIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLmV4cG9ydFN1bSIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpXSwgMSldLCAxKSwgX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIHB5LTAiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImNvbHMiOiAiMyIKICAgICAgICAgIH0KICAgICAgICB9LCBbX2MoJ2RpdicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImZvbnQtc2l6ZSI6ICIxNHB4IiwKICAgICAgICAgICAgImJvcmRlciI6ICIxcHggc29saWQgIzJiNjc1YiIsCiAgICAgICAgICAgICJwYWRkaW5nIjogIjVweCIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIxMDAlIiwKICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMjBweCIsCiAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjRweCIsCiAgICAgICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgImN1cnNvciI6ICJub25lIgogICAgICAgICAgfQogICAgICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTgnKSkgKyAiICIpLCBfYygnYnInKSwgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUxMScpKSArICIgIildKSwgX2MoJ2Itcm93JywgW19jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTknKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5maW5hbGx5VG9ubmEsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygkJHYpIHsKICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZWRpdGluZ0l0ZW0sICJmaW5hbGx5VG9ubmEiLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0uZmluYWxseVRvbm5hIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMSBweS0wIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTEwJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0uZmluYWxseVN1bSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgImZpbmFsbHlTdW0iLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0uZmluYWxseVN1bSIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpXSwgMSldLCAxKV0sIDEpXTsKICAgICAgfQogICAgfV0sIG51bGwsIGZhbHNlLCAyOTg1MzUzMDQzKQogIH0pXSwgMSkgOiBfdm0uZWRpdGluZ0l0ZW0uY29kZVNveGEgPT0gJ0hJWk1BVCcgPyBfYygnYi1jYXJkJywgewogICAgc3RhdGljU3R5bGU6IHsKICAgICAgImJvcmRlciI6ICIxcHggc29saWQgIzJiNjc1YiIsCiAgICAgICJib3JkZXItcmFkaXVzIjogIjVweCIsCiAgICAgICJtYXJnaW4iOiAiMTVweCIsCiAgICAgICJwYWRkaW5nIjogIjE1cHgiLAogICAgICAibWFyZ2luLXRvcCI6ICIxMHB4IgogICAgfQogIH0sIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgewogICAgc3RhdGljQ2xhc3M6ICJweC0zIHB5LTAiLAogICAgYXR0cnM6IHsKICAgICAgImNvbHMiOiAiMyIKICAgIH0KICB9LCBbX2MoJ2RpdicsIHsKICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICJmb250LXNpemUiOiAiMTZweCIsCiAgICAgICJiYWNrZ3JvdW5kIjogIiMyYjY3NWIiLAogICAgICAiY29sb3IiOiAid2hpdGUiLAogICAgICAicGFkZGluZyI6ICI1cHgiLAogICAgICAid2lkdGgiOiAiMTAwJSIsCiAgICAgICJtYXJnaW4tYm90dG9tIjogIjIwcHgiLAogICAgICAiYm9yZGVyLXJhZGl1cyI6ICIycHgiLAogICAgICAiZm9udC13ZWlnaHQiOiAiYm9sZCIKICAgIH0KICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm00LnRpdGxlJykpICsgIiAiKV0pXSksIF9jKCdiLWNvbCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjMiCiAgICB9CiAgfSksIF9jKCdiLWNvbCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjMiCiAgICB9CiAgfSksIF9jKCdiLWNvbCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyBweS0wIiwKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjMiCiAgICB9CiAgfSwgW19jKCdiLWJ1dHRvbi1ncm91cCcsIHsKICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICJ3aWR0aCI6ICIxMDAlIgogICAgfQogIH0sIFtfYygnYi1idXR0b24nLCB7CiAgICBzdGF0aWNDbGFzczogInB0LTEgbWItNCBwYi0xIHByLTIgcGwtMiIsCiAgICBhdHRyczogewogICAgICAiYmxvY2siOiAiIiwKICAgICAgInZhcmlhbnQiOiAicHJpbWFyeSIKICAgIH0sCiAgICBvbjogewogICAgICAiY2xpY2siOiBfdm0uYWRkRm9ybUhpem1hdAogICAgfQogIH0sIFtfYygnaScsIHsKICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtcGx1cyIKICB9KSwgX2MoJ3NwYW4nLCB7CiAgICBzdGF0aWNTdHlsZTogewogICAgICAiZm9udC1zaXplIjogIjE0cHgiCiAgICB9CiAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCJhY3Rpb25zLmFkZCIpKSArICIgIildKV0pLCBfYygnYi1idXR0b24nLCB7CiAgICBkaXJlY3RpdmVzOiBbewogICAgICBuYW1lOiAic2hvdyIsCiAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICB2YWx1ZTogX3ZtLmhpem1hdC5sZW5ndGggPiAwLAogICAgICBleHByZXNzaW9uOiAiaGl6bWF0Lmxlbmd0aCA+IDAiCiAgICB9XSwKICAgIHN0YXRpY0NsYXNzOiAicHQtMSBtYi00IHBiLTEgcHItMiBwbC0yIiwKICAgIGF0dHJzOiB7CiAgICAgICJ2YXJpYW50IjogIndhcm5pbmciCiAgICB9LAogICAgb246IHsKICAgICAgImNsaWNrIjogZnVuY3Rpb24gY2xpY2soJGV2ZW50KSB7CiAgICAgICAgX3ZtLmlzTW9kYWxIaXptYXQgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgW19jKCdpJywgewogICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1pbmZvLWNpcmNsZSIKICB9KV0pXSwgMSldLCAxKV0sIDEpLCBfYygnVmFsaWRhdGlvbk9ic2VydmVyJywgewogICAgcmVmOiAib2JzZXJ2ZXJIaXptYXQiLAogICAgc2NvcGVkU2xvdHM6IF92bS5fdShbewogICAgICBrZXk6ICJkZWZhdWx0IiwKICAgICAgZm46IGZ1bmN0aW9uIGZuKF9yZWYzKSB7CiAgICAgICAgX29iamVjdERlc3RydWN0dXJpbmdFbXB0eShfcmVmMyk7CiAgICAgICAgcmV0dXJuIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTQubmFtZTEnKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5uYW1lU2VydmljZSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgIm5hbWVTZXJ2aWNlIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLm5hbWVTZXJ2aWNlIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHgtMyIKICAgICAgICB9LCBbX2MoJ0Jhc2VJbnB1dFdpdGhWYWxpZGF0aW9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXF1aXJlZCIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAibGFiZWwiOiBfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm00Lm5hbWUyJyksCiAgICAgICAgICAgICJwbGFjZWhvbGRlciI6IF92bS4kdCgnJyksCiAgICAgICAgICAgICJydWxlcyI6ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJsYWJlbC1vbi10b3AiOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGluZ0l0ZW0uY29kZVNldmljZSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5lZGl0aW5nSXRlbSwgImNvZGVTZXZpY2UiLCAkJHYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGluZ0l0ZW0uY29kZVNldmljZSIKICAgICAgICAgIH0KICAgICAgICB9KV0sIDEpLCBfYygnYi1jb2wnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInB4LTMiCiAgICAgICAgfSwgW19jKCdCYXNlSW5wdXRXaXRoVmFsaWRhdGlvbicsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAicmVxdWlyZWQiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImxhYmVsIjogX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtNC5uYW1lMycpLAogICAgICAgICAgICAicGxhY2Vob2xkZXIiOiBfdm0uJHQoJycpLAogICAgICAgICAgICAicnVsZXMiOiAicmVxdWlyZWQiLAogICAgICAgICAgICAibGFiZWwtb24tdG9wIjogIiIKICAgICAgICAgIH0sCiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRpbmdJdGVtLnN1bVNlcnZpY2UsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygkJHYpIHsKICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZWRpdGluZ0l0ZW0sICJzdW1TZXJ2aWNlIiwgJCR2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRpbmdJdGVtLnN1bVNlcnZpY2UiCiAgICAgICAgICB9CiAgICAgICAgfSldLCAxKSwgX2MoJ2ItY29sJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0zIgogICAgICAgIH0sIFtfYygnQmFzZUlucHV0V2l0aFZhbGlkYXRpb24nLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlcXVpcmVkIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJsYWJlbCI6IF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTQubmFtZTQnKSwKICAgICAgICAgICAgInBsYWNlaG9sZGVyIjogX3ZtLiR0KCcnKSwKICAgICAgICAgICAgInJ1bGVzIjogInJlcXVpcmVkIiwKICAgICAgICAgICAgImxhYmVsLW9uLXRvcCI6ICIiCiAgICAgICAgICB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0aW5nSXRlbS5leHBvcnRTdW1TZXJ2aWNlLAogICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmVkaXRpbmdJdGVtLCAiZXhwb3J0U3VtU2VydmljZSIsICQkdik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0aW5nSXRlbS5leHBvcnRTdW1TZXJ2aWNlIgogICAgICAgICAgfQogICAgICAgIH0pXSwgMSldLCAxKV07CiAgICAgIH0KICAgIH1dKQogIH0pXSwgMSkgOiBfdm0uX2UoKSwgX2MoJ2Itcm93JywgewogICAgc3RhdGljQ2xhc3M6ICJwLTEiCiAgfSwgW19jKCdiLWNvbCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJjb2xzIjogIjEyIiwKICAgICAgIm1kIjogIjEwIgogICAgfQogIH0sIFtfYygnYi1jb2wnLCB7CiAgICBzdGF0aWNDbGFzczogIm1iLTIgbXQtMyIKICB9LCBbX2MoJ2ItYnV0dG9uJywgewogICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXdhcm5pbmciLAogICAgc3RhdGljU3R5bGU6IHsKICAgICAgImJhY2tncm91bmQiOiAiI0YzOTEzOCIsCiAgICAgICJ3aWR0aCI6ICIyMjJweCIsCiAgICAgICJoZWlnaHQiOiAiMzNweCIKICAgIH0sCiAgICBhdHRyczogewogICAgICAic2l6ZSI6ICJtZCIKICAgIH0sCiAgICBvbjogewogICAgICAiY2xpY2siOiBmdW5jdGlvbiBjbGljaygkZXZlbnQpIHsKICAgICAgICByZXR1cm4gX3ZtLiRyb3V0ZXIuZ28oLTEpOwogICAgICB9CiAgICB9CiAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCJhY3Rpb25zLmJhY2siKSkgKyAiICIpXSldLCAxKV0sIDEpLCBfYygnYi1jb2wnLCB7CiAgICBzdGF0aWNDbGFzczogIm10LTMiLAogICAgYXR0cnM6IHsKICAgICAgImNvbHMiOiAiMTIiLAogICAgICAibWQiOiAiMiIKICAgIH0KICB9LCBbX2MoJ2Itb3ZlcmxheScsIHsKICAgIHN0YXRpY0NsYXNzOiAicHgtMyIsCiAgICBhdHRyczogewogICAgICAic2hvdyI6IF92bS5sb2FkZXIsCiAgICAgICJyb3VuZGVkIjogIiIsCiAgICAgICJvcGFjaXR5IjogIjAuNiIsCiAgICAgICJzcGlubmVyLXNtYWxsIjogIiIsCiAgICAgICJzcGlubmVyLXZhcmlhbnQiOiAicHJpbWFyeSIKICAgIH0KICB9LCBbX2MoJ2ItYnV0dG9uJywgewogICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNhcGl0YWxpemUgZmxvYXQtZW5kIHAtMSBtbC0xIiwKICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICJiYWNrZ3JvdW5kIjogIiMyYjY3NWIiLAogICAgICAiZm9udC1zaXplIjogIjE2cHgiCiAgICB9LAogICAgYXR0cnM6IHsKICAgICAgImRpc2FibGVkIjogX3ZtLmxvYWRlciwKICAgICAgImJsb2NrIjogIiIKICAgIH0sCiAgICBvbjogewogICAgICAiY2xpY2siOiBfdm0uc2F2ZURhdGEKICAgIH0KICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoInJlcG9ydGluZy5zZW5kX2J1dHRvbiIpKSArICIgIildKV0sIDEpXSwgMSldLCAxKV0sIDEpXSwgMSldLCAxKV0sIDEpLCBfYygnYi1tb2RhbCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJzaXplIjogInhsIiwKICAgICAgIm5vLWNsb3NlLW9uLWJhY2tkcm9wIjogdHJ1ZSwKICAgICAgInNjcm9sbGFibGUiOiAiIiwKICAgICAgImhpZGUtaGVhZGVyIjogdHJ1ZQogICAgfSwKICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoW3sKICAgICAga2V5OiAibW9kYWwtZm9vdGVyIiwKICAgICAgZm46IGZ1bmN0aW9uIGZuKCkgewogICAgICAgIHJldHVybiBbX2MoJ2ItYnV0dG9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdC0xIHBsLTMgcHItMyBwYi0xIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJ2YXJpYW50IjogImRhbmdlciIKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICAiY2xpY2siOiBmdW5jdGlvbiBjbGljaygkZXZlbnQpIHsKICAgICAgICAgICAgICBfdm0uaXNNb2RhbFNhbm9hdCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCJhY3Rpb25zLmNsb3NlIikpICsgIiAiKV0pXTsKICAgICAgfSwKICAgICAgcHJveHk6IHRydWUKICAgIH1dKSwKICAgIG1vZGVsOiB7CiAgICAgIHZhbHVlOiBfdm0uaXNNb2RhbFNhbm9hdCwKICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgIF92bS5pc01vZGFsU2Fub2F0ID0gJCR2OwogICAgICB9LAogICAgICBleHByZXNzaW9uOiAiaXNNb2RhbFNhbm9hdCIKICAgIH0KICB9LCBfdm0uX2woX3ZtLnNhbm9hdCwgZnVuY3Rpb24gKGNhcmQsIGluZGV4KSB7CiAgICByZXR1cm4gX2MoJ2RpdicsIHsKICAgICAga2V5OiBpbmRleAogICAgfSwgW19jKCdiLWNvbCcsIHsKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiYm9yZGVyIjogIjFweCBzb2xpZCAjMmI2NzViIiwKICAgICAgICAicGFkZGluZyI6ICIxMHB4IDIwcHgiLAogICAgICAgICJtYXJnaW4tYm90dG9tIjogIjIwcHgiCiAgICAgIH0sCiAgICAgIGF0dHJzOiB7CiAgICAgICAgImNvbHMiOiAiMTIiCiAgICAgIH0KICAgIH0sIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgewogICAgICBhdHRyczogewogICAgICAgICJjb2xzIjogIjEyIiwKICAgICAgICAibWQiOiAiMyIKICAgICAgfQogICAgfSwgW19jKCdkaXYnLCB7CiAgICAgIHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1zdGFydCBhbGlnbi1pdGVtcy1jZW50ZXIiCiAgICB9LCBbX2MoJ2RpdicsIHsKICAgICAgc3RhdGljQ2xhc3M6ICJtci0zIiwKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiZm9udC1zaXplIjogIjE2cHgiLAogICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhpbmRleCArIDEpICsgIi4gIildKSwgX2MoJ2RpdicsIFtfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJjb2xvciI6ICIjODhhNTllIgogICAgICB9CiAgICB9LCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUxJykpICsgIjoiKV0pLCBfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJmb250LXNpemUiOiAiMTZweCIsCiAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiLAogICAgICAgICJjb2xvciI6ICIjMmI2NzViIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhjYXJkLmNvZGVUaWZ0biA/IGNhcmQuY29kZVRpZnRuIDogJy0gLSAtJykgKyAiICIpXSldKV0pXSksIF9jKCdiLWNvbCcsIHsKICAgICAgYXR0cnM6IHsKICAgICAgICAiY29scyI6ICIxMiIsCiAgICAgICAgIm1kIjogIjMiCiAgICAgIH0KICAgIH0sIFtfYygnZGl2JywgW19jKCdkaXYnLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImNvbG9yIjogIiM4OGE1OWUiCiAgICAgIH0KICAgIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTMubmFtZTInKSkgKyAiOiIpXSksIF9jKCdkaXYnLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImZvbnQtc2l6ZSI6ICIxNnB4IiwKICAgICAgICAiZm9udC13ZWlnaHQiOiAiYm9sZCIsCiAgICAgICAgImNvbG9yIjogIiMyYjY3NWIiCiAgICAgIH0KICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGNhcmQubmFtZVByb2R1Y3QgPyBjYXJkLm5hbWVQcm9kdWN0IDogJy0gLSAtJykgKyAiICIpXSldKV0pLCBfYygnYi1jb2wnLCB7CiAgICAgIGF0dHJzOiB7CiAgICAgICAgImNvbHMiOiAiMTIiLAogICAgICAgICJtZCI6ICIzIgogICAgICB9CiAgICB9LCBbX2MoJ2RpdicsIFtfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJjb2xvciI6ICIjODhhNTllIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWUzJykpICsgIjogIildKSwgX2MoJ2RpdicsIHsKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiZm9udC1zaXplIjogIjE2cHgiLAogICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIiwKICAgICAgICAiY29sb3IiOiAiIzJiNjc1YiIKICAgICAgfQogICAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoY2FyZC5jb2RlTWN0ID8gY2FyZC5jb2RlTWN0IDogJy0gLSAtJykgKyAiICIpXSldKV0pLCBfYygnYi1jb2wnLCB7CiAgICAgIGF0dHJzOiB7CiAgICAgICAgImNvbHMiOiAiMTIiLAogICAgICAgICJtZCI6ICIzIgogICAgICB9CiAgICB9LCBbX2MoJ2RpdicsIFtfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJjb2xvciI6ICIjODhhNTllIgogICAgICB9CiAgICB9LCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm0zLm5hbWU0JykpKV0pLCBfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJmb250LXNpemUiOiAiMTZweCIsCiAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiLAogICAgICAgICJjb2xvciI6ICIjMmI2NzViIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhjYXJkLm1hZGVQb3dlckFsbCA/IGNhcmQubWFkZVBvd2VyQWxsIDogJy0gLSAtJykgKyAiICIpXSldKV0pXSwgMSksIF9jKCdkaXYnLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgInBvc2l0aW9uIjogImFic29sdXRlIiwKICAgICAgICAidG9wIjogIjE1cHgiLAogICAgICAgICJyaWdodCI6ICI4cHgiCiAgICAgIH0KICAgIH0sIFtfYygnYi1idG4nLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImJvcmRlciI6ICJub25lIiwKICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICJ0cmFuc3BhcmVudCIKICAgICAgfSwKICAgICAgb246IHsKICAgICAgICAiY2xpY2siOiBmdW5jdGlvbiBjbGljaygkZXZlbnQpIHsKICAgICAgICAgIHJldHVybiBfdm0uZGVsZXRlU2Fub2F0KGluZGV4KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIFtfYygnaScsIHsKICAgICAgc3RhdGljQ2xhc3M6ICJtZGkgbWRpLXRyYXNoLWNhbi1vdXRsaW5lIGN1cnNvci1wb2ludGVyIiwKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiZm9udC1zaXplIjogIjI0cHgiLAogICAgICAgICJjb2xvciI6ICJyZWQiCiAgICAgIH0KICAgIH0pXSldLCAxKV0sIDEpXSwgMSk7CiAgfSksIDApLCBfYygnYi1tb2RhbCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJzaXplIjogInhsIiwKICAgICAgIm5vLWNsb3NlLW9uLWJhY2tkcm9wIjogdHJ1ZSwKICAgICAgInNjcm9sbGFibGUiOiAiIiwKICAgICAgImhpZGUtaGVhZGVyIjogdHJ1ZQogICAgfSwKICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoW3sKICAgICAga2V5OiAibW9kYWwtZm9vdGVyIiwKICAgICAgZm46IGZ1bmN0aW9uIGZuKCkgewogICAgICAgIHJldHVybiBbX2MoJ2ItYnV0dG9uJywgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdC0xIHBsLTMgcHItMyBwYi0xIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICJ2YXJpYW50IjogImRhbmdlciIKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICAiY2xpY2siOiBmdW5jdGlvbiBjbGljaygkZXZlbnQpIHsKICAgICAgICAgICAgICBfdm0uaXNNb2RhbEhpem1hdCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLiR0KCJhY3Rpb25zLmNsb3NlIikpICsgIiAiKV0pXTsKICAgICAgfSwKICAgICAgcHJveHk6IHRydWUKICAgIH1dKSwKICAgIG1vZGVsOiB7CiAgICAgIHZhbHVlOiBfdm0uaXNNb2RhbEhpem1hdCwKICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgIF92bS5pc01vZGFsSGl6bWF0ID0gJCR2OwogICAgICB9LAogICAgICBleHByZXNzaW9uOiAiaXNNb2RhbEhpem1hdCIKICAgIH0KICB9LCBfdm0uX2woX3ZtLmhpem1hdCwgZnVuY3Rpb24gKGNhcmQsIGluZGV4KSB7CiAgICByZXR1cm4gX2MoJ2RpdicsIHsKICAgICAga2V5OiBpbmRleAogICAgfSwgW19jKCdiLWNvbCcsIHsKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiYm9yZGVyIjogIjFweCBzb2xpZCAjMmI2NzViIiwKICAgICAgICAicGFkZGluZyI6ICIxMHB4IDIwcHgiLAogICAgICAgICJtYXJnaW4tYm90dG9tIjogIjIwcHgiCiAgICAgIH0sCiAgICAgIGF0dHJzOiB7CiAgICAgICAgImNvbHMiOiAiMTIiCiAgICAgIH0KICAgIH0sIFtfYygnYi1yb3cnLCBbX2MoJ2ItY29sJywgewogICAgICBhdHRyczogewogICAgICAgICJjb2xzIjogIjEyIiwKICAgICAgICAibWQiOiAiMyIKICAgICAgfQogICAgfSwgW19jKCdkaXYnLCB7CiAgICAgIHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1zdGFydCBhbGlnbi1pdGVtcy1jZW50ZXIiCiAgICB9LCBbX2MoJ2RpdicsIHsKICAgICAgc3RhdGljQ2xhc3M6ICJtci0zIiwKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiZm9udC1zaXplIjogIjE2cHgiLAogICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhpbmRleCArIDEpICsgIi4gIildKSwgX2MoJ2RpdicsIFtfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJjb2xvciI6ICIjODhhNTllIgogICAgICB9CiAgICB9LCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoJ3JlcG9ydGluZy5tYWluLmZvcm00Lm5hbWUxJykpICsgIjoiKV0pLCBfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJmb250LXNpemUiOiAiMTZweCIsCiAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiLAogICAgICAgICJjb2xvciI6ICIjMmI2NzViIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhjYXJkLmNvZGVTZXZpY2UgPyBjYXJkLmNvZGVTZXZpY2UgOiAnLSAtIC0nKSArICIgIildKV0pXSldKSwgX2MoJ2ItY29sJywgewogICAgICBhdHRyczogewogICAgICAgICJjb2xzIjogIjEyIiwKICAgICAgICAibWQiOiAiMyIKICAgICAgfQogICAgfSwgW19jKCdkaXYnLCBbX2MoJ2RpdicsIHsKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiY29sb3IiOiAiIzg4YTU5ZSIKICAgICAgfQogICAgfSwgW192bS5fdihfdm0uX3MoX3ZtLiR0KCdyZXBvcnRpbmcubWFpbi5mb3JtNC5uYW1lMicpKSArICI6IildKSwgX2MoJ2RpdicsIHsKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAiZm9udC1zaXplIjogIjE2cHgiLAogICAgICAgICJmb250LXdlaWdodCI6ICJib2xkIiwKICAgICAgICAiY29sb3IiOiAiIzJiNjc1YiIKICAgICAgfQogICAgfSwgW192bS5fdigiICIgKyBfdm0uX3MoY2FyZC5uYW1lU2VydmljZSA/IGNhcmQubmFtZVNlcnZpY2UgOiAnLSAtIC0nKSArICIgIildKV0pXSksIF9jKCdiLWNvbCcsIHsKICAgICAgYXR0cnM6IHsKICAgICAgICAiY29scyI6ICIxMiIsCiAgICAgICAgIm1kIjogIjMiCiAgICAgIH0KICAgIH0sIFtfYygnZGl2JywgW19jKCdkaXYnLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImNvbG9yIjogIiM4OGE1OWUiCiAgICAgIH0KICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTQubmFtZTMnKSkgKyAiOiAiKV0pLCBfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJmb250LXNpemUiOiAiMTZweCIsCiAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiLAogICAgICAgICJjb2xvciI6ICIjMmI2NzViIgogICAgICB9CiAgICB9LCBbX3ZtLl92KCIgIiArIF92bS5fcyhjYXJkLnN1bVNlcnZpY2UgPyBjYXJkLnN1bVNlcnZpY2UgOiAnLSAtIC0nKSArICIgIildKV0pXSksIF9jKCdiLWNvbCcsIHsKICAgICAgYXR0cnM6IHsKICAgICAgICAiY29scyI6ICIxMiIsCiAgICAgICAgIm1kIjogIjMiCiAgICAgIH0KICAgIH0sIFtfYygnZGl2JywgW19jKCdkaXYnLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImNvbG9yIjogIiM4OGE1OWUiCiAgICAgIH0KICAgIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS4kdCgncmVwb3J0aW5nLm1haW4uZm9ybTQubmFtZTQnKSkpXSksIF9jKCdkaXYnLCB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImZvbnQtc2l6ZSI6ICIxNnB4IiwKICAgICAgICAiZm9udC13ZWlnaHQiOiAiYm9sZCIsCiAgICAgICAgImNvbG9yIjogIiMyYjY3NWIiCiAgICAgIH0KICAgIH0sIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGNhcmQuZXhwb3J0U3VtU2VydmljZSA/IGNhcmQuZXhwb3J0U3VtU2VydmljZSA6ICctIC0gLScpICsgIiAiKV0pXSldKV0sIDEpLCBfYygnZGl2JywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJwb3NpdGlvbiI6ICJhYnNvbHV0ZSIsCiAgICAgICAgInRvcCI6ICIxNXB4IiwKICAgICAgICAicmlnaHQiOiAiOHB4IgogICAgICB9CiAgICB9LCBbX2MoJ2ItYnRuJywgewogICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICJib3JkZXIiOiAibm9uZSIsCiAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAidHJhbnNwYXJlbnQiCiAgICAgIH0sCiAgICAgIG9uOiB7CiAgICAgICAgImNsaWNrIjogZnVuY3Rpb24gY2xpY2soJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gX3ZtLmRlbGV0ZUhpem1hdChpbmRleCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBbX2MoJ2knLCB7CiAgICAgIHN0YXRpY0NsYXNzOiAibWRpIG1kaS10cmFzaC1jYW4tb3V0bGluZSBjdXJzb3ItcG9pbnRlciIsCiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgImZvbnQtc2l6ZSI6ICIyNHB4IiwKICAgICAgICAiY29sb3IiOiAicmVkIgogICAgICB9CiAgICB9KV0pXSwgMSldLCAxKV0sIDEpOwogIH0pLCAwKV0sIDEpOwp9Owp2YXIgc3RhdGljUmVuZGVyRm5zID0gW107CmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH07"},null]}