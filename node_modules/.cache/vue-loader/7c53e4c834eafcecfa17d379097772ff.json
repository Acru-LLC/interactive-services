{"remainingRequest":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\interactive-services\\src\\modules\\appeal\\MurojatMonitor.vue?vue&type=template&id=afb6ad0e&scoped=true","dependencies":[{"path":"D:\\ACRU\\interactive-services\\src\\modules\\appeal\\MurojatMonitor.vue","mtime":1709020148475},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}