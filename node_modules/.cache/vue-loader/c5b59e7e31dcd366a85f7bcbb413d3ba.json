{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\references\\modules\\price-stock\\region-name\\CreateOrUpdate.vue?vue&type=style&index=0&id=522dc16e&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\references\\modules\\price-stock\\region-name\\CreateOrUpdate.vue","mtime":1675054786282},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1667355356565},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouY29sLWZvcm0tbGFiZWwgew0KICBwYWRkaW5nLXRvcDogMDsNCn0NCg0KdWwgew0KICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7DQp9DQo="},{"version":3,"sources":["CreateOrUpdate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA;;AAEA;AACA;AACA","file":"CreateOrUpdate.vue","sourceRoot":"src/modules/references/modules/price-stock/region-name","sourcesContent":["<template>\r\n  <base-create-or-update-wrapper\r\n      @save=\"save\"\r\n      has-save-suspend\r\n      :custom-title=\"isModeCreate ? $t('actions.create') : $t('actions.update')\"\r\n  >\r\n    <ValidationObserver ref=\"observer\" v-slot=\"{}\">\r\n      <b-row class=\"mb-1\">\r\n        <b-col sm=\"11\">\r\n          <b-row class=\"mb-1\">\r\n            <b-col sm=\"4\">{{ $t('column.connected_region') }}</b-col>\r\n            <b-col sm=\"8\">{{ $t('submodules.integration.price_stock.region_name') }}</b-col>\r\n          </b-row>\r\n        </b-col>\r\n        <b-col sm=\"1\">\r\n          <b-btn v-if=\"isModeCreate\" variant=\"success\" @click=\"addNewLine\">\r\n            <i class=\"fa fa-plus\"></i>\r\n          </b-btn>\r\n        </b-col>\r\n      </b-row>\r\n      <b-row class=\"mb-1\" v-for=\"(item, key) in items\" :key=\"key\">\r\n        <b-col sm=\"11\">\r\n          <b-row class=\"mb-1\">\r\n            <b-col sm=\"4\">\r\n              <BaseInputWithValidation\r\n                  rules=\"required\"\r\n                  v-model=\"item.spRegionName\"\r\n                  label-on-top\r\n                  label=\"\"\r\n                  :placeholder=\"''\"\r\n              />\r\n            </b-col>\r\n            <b-col sm=\"8\">\r\n              <BaseMultiselectWithValidation\r\n                  v-model=\"item.regionId\"\r\n                  rules=\"required\"\r\n                  placeholder=\"\"\r\n                  label-on-top\r\n                  open-direction=\"bottom\"\r\n                  :label=\"''\"\r\n                  :options=\"regionList.map(el => el.id)\"\r\n                  :searchable=\"true\"\r\n                  :show-labels=\"false\"\r\n                  :custom-label=\"customLabelRegionList\"\r\n                  @search-change=\"handleSearchRegion\"\r\n              />\r\n            </b-col>\r\n          </b-row>\r\n        </b-col>\r\n        <b-col sm=\"1\">\r\n          <b-btn v-if=\"isModeCreate\" variant=\"danger\" @click=\"removeLine(key)\">\r\n            <i class=\"fa fa-times\"></i>\r\n          </b-btn>\r\n        </b-col>\r\n      </b-row>\r\n    </ValidationObserver>\r\n  </base-create-or-update-wrapper>\r\n</template>\r\n<script>\r\nimport crudAndListService from \"@/shared/services/crud_and_list.service\";\r\n\r\nconst MAIN_API_URL = 'price/stock/region-name'\r\n/** YOU MUST SEND {{ MAIN_API_URL }} TO CRUD_SERVICE */\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport helperService from \"@/shared/services/helper.service\"\r\n\r\nexport default {\r\n  /** DATA */\r\n  data() {\r\n    return {\r\n      empty: {},\r\n      items: [],\r\n      regionList: []\r\n    }\r\n  },\r\n  /** COMPUTED */\r\n  computed: {\r\n    isModeCreate() {\r\n      return this.$route.name === 'ReferencesPriceStockRegionNameCreate'\r\n    },\r\n    computedObserver() {\r\n      return this.$refs.observer\r\n    }\r\n  },\r\n  /** METHODS */\r\n  methods: {\r\n    treeClosed(veeName) {\r\n      this.computedObserver.refs[veeName].validate();\r\n    },\r\n    customLabelRegionList (opt) {\r\n      let selected = this.regionList.find(e => e.id === (opt.id ? opt.id : opt));\r\n      if (selected) {\r\n        return this.getName({\r\n          nameRu: selected.nameRu,\r\n          nameLt: selected.nameLt,\r\n          nameUz: selected.nameUz,\r\n        })\r\n      }\r\n      return '';\r\n    },\r\n    save() {\r\n      this.computedObserver.validate().then( async valid => {\r\n        if (valid) {\r\n          if (this.items.id) {\r\n            this.items.forEach(item => {\r\n              crudAndListsService.update(MAIN_API_URL, item, '', true).then(res => {})\r\n            })\r\n          } else {\r\n            this.items.forEach(item => {\r\n              crudAndListsService.create(MAIN_API_URL, item, '', true).then(res => {})\r\n            })\r\n          }\r\n          this.computedObserver.reset()\r\n          this.items = [];\r\n          this.$router.go(-1)\r\n          this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n        } else {\r\n          this.$toast(this.$t('messages.fill_required_fields'), { type: 'error' });\r\n        }\r\n      });\r\n    },\r\n    addNewLine(){\r\n      this.items.push({ ...this.empty })\r\n    },\r\n    removeLine(index){\r\n      this.items.splice(index, 1)\r\n    },\r\n    fetchRegions(search = ''){\r\n      helperService.fetchRegions(true)\r\n          .then(({ data }) => {\r\n            this.regionList = data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n          .finally(() => {\r\n            this.loadingTableItems = false\r\n          })\r\n    },\r\n    handleSearchRegion(a,b,c){\r\n      console.log(a,b,c)\r\n    },\r\n  },\r\n  /** CREATED */\r\n  async created() {\r\n    this.var_default_search_payload.itemsPerPage = 500\r\n    await crudAndListsService.getEmpty(MAIN_API_URL)\r\n        .then(({ data }) => {\r\n          this.empty = data\r\n        })\r\n        .catch(e => {\r\n          console.log(e)\r\n        })\r\n    if (this.isModeCreate) {\r\n      this.addNewLine()\r\n    } else {\r\n      await crudAndListsService.getById(MAIN_API_URL, this.$route.params.id, false)\r\n          .then(({ data }) => {\r\n            this.items = [data]\r\n            const exist = this.regionList.find(e => e.id === data.regionId)\r\n            if (!exist) {\r\n              crudAndListService.getById('geographical-region', data.regionId).then(({ data }) => {\r\n                this.regionList.push(data)\r\n              })\r\n            }\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    }\r\n    this.fetchRegions()\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.col-form-label {\r\n  padding-top: 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n}\r\n</style>"]}]}