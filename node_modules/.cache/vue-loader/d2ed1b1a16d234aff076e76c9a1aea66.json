{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\pharm\\work\\overview.vue?vue&type=template&id=42dee90a&scoped=true&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\pharm\\work\\overview.vue","mtime":1682687866992},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1675061970779},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgICA8UGFnZUhlYWRlciA6dGl0bGU9InRpdGxlIiA6aXRlbXM9Iml0ZW1zIi8+CiAgICA8ZGl2IGNsYXNzPSJyb3cgbWItMiI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgPEJhY2sKICAgICAgICAgICAgICAgICAgICA6dG89IntuYW1lOiAnQXBwZWFsV29yayd9Ii8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gZW5kIHJvdyAtLT4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGdyaWQtY2FyZC1oZWlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItcm93PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9InByb2ouc3RhdHVzID09PSAnQkVJTkdfU0VFTiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXN1Y2Nlc3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5jb21taXNzaW9uLkJFSU5HX1NFRU4iKSB9fSAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2UgY2xhc3M9ImJhZGdlIGJhZGdlLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdChwcm9qLnN0YXR1cykgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgncGhhcm0uYXBwZWFsX251bWJlcicpIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIj57eyBwcm9qLm1udW1iZXIgfX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgiY29sdW1uLnNlbmRfZGF0ZSIpIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIj4ge3sgbmV3IERhdGUocHJvai5jcmVhdGVKc29uKS5kZG1teXl5eSgpIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoInBoYXJtLmV4ZWN1dGl2ZSIpIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIj4ge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3Byb2o/LmlubmVyRW1wbG95ZWVOYW1lID8/ICcnfWAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRhc2stZGF0ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0YXNrLWRhdGVzIG1sLTIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIGNsYXNzPSJtbC0yIiB2YXJpYW50PSJzdWNjZXNzIiBAY2xpY2s9ImdlbmVyYXRlUERGIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtZG93bmxvYWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCJwaGFybS5hcml6YUZvcm0iKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRhc2stZGF0ZXMiPi0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0YXNrLWRhdGVzIG1sLTIiPi0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmx0OyEmbmRhc2g7IE11ZGRhdG5pIHV6YXl0aXJpc2gmbmRhc2g7Jmd0Oy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ic3VjY2VzcyIgQGNsaWNrPSJjaGFuZ2VUZXJtIj4tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYWxlbmRhci1wbHVzIj48L2k+LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5wcm9qZWN0cy5hZGRfZGF5IikgfX0tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pi0tPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgZ3JpZC1jYXJkLWhlaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiI+PGg1PjxiPiB7eyAkdCgncGhhcm0ucGhhcm1hY3knKSB9fTwvYj48L2g1PjwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3BoYXJtLnBoYXJtYWN5TmFtZScpIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIj57eyBwcm9qLnBoYXJtYWN5TmFtZSB9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdwaGFybS5waGFybWFjeUFkZHJlc3MnKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCI+e3sgcHJvai5waGFybWFjeVJlZ2lvbk5hbWUgfX17ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvai5waGFybWFjeURpc3RyaWN0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX17eyBwcm9qLnBoYXJtYWN5QWRkcmVzcyB9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdwaGFybS5waGFybWFjeVRpbicpIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIj57eyBwcm9qLnBoYXJtYWN5VGluIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0YXNrLWRhdGVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGFzay1kYXRlcyBtbC0yIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiBjbGFzcz0ibWwtMiIgdmFyaWFudD0ic3VjY2VzcyIgQGNsaWNrPSJpc0Rvcml4b25hU2lkZWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtZXllIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgicGhhcm0uZ2V0X2luZm9fYXB0ZWthIikgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgZ3JpZC1jYXJkLWhlaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiI+PGg1PjxiPiB7eyAkdCgncGhhcm0uY29uc3VtZXInKSB9fTwvYj48L2g1PjwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3BoYXJtLmFwcGVhbF9maW8nKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCI+e3sgcHJvai5jb25zdW1lckZpcnN0TmFtZSB9fSB7eyBwcm9qLmNvbnN1bWVyTGFzdE5hbWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHByb2ouY29uc3VtZXJNaWRkbGVOYW1lIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3BoYXJtLmNvbnN1bWVyUGhvbmUnKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCI+e3sgcHJvai5jb25zdW1lclBob25lIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoJ3BoYXJtLmNvbnN1bWVyUGluZmwnKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCI+e3sgcHJvai5jb25zdW1lclBpbmZsIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgoKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgICAgICAgICAgIDxGaWxlczEgY2xhc3M9ImdyaWQtY2FyZC1oZWlnaHQiIDpwcm9qZWN0PSJwcm9qIi8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0gZW5kIGNvbCAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4KICAgICAgICAgICAgICAgICAgICA8RmlsZXMyIGNsYXNzPSJncmlkLWNhcmQtaGVpZ2h0IiA6cHJvamVjdD0icHJvaiIvPgogICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICA8Y29tbWVudHMgY2xhc3M9ImdyaWQtY2FyZC1oZWlnaHQiIDpwcm9qZWN0PSJwcm9qIi8+LS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4KICAgICAgICAgICAgICAgICAgICA8RmlsZXMzIGNsYXNzPSJncmlkLWNhcmQtaGVpZ2h0IiA6cHJvamVjdD0icHJvaiIvPgogICAgICAgICAgICAgICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgICA8TWVtYmVycyBjbGFzcz0iZ3JpZC1jYXJkLWhlaWdodCIgOnByb2plY3Q9InByb2oiIDpoZWlnaHRQcm9wPSInMzkwJyIvPi0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tIGVuZCBjb2wgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIEFQUExJQ0FUSU9OX0FUVEFDSEVEX0ZJTEUgVklFVyBNT0RBTCAtLT4KICAgIDxiLW1vZGFsIHNjcm9sbGFibGUgdi1tb2RlbD0idmlld0lsb3ZhTW9kYWwiIHNpemU9InhsIiA6dGl0bGU9IiR0KCdhY3Rpb25zLnZpZXcnKSI+CiAgICAgICAgPGRpdiBzdHlsZT0iaGVpZ2h0OiA3MDBweCIgdi1pZj0iaWxvdmFVcGxvYWRQYXRoIj4KICAgICAgICAgICAgPGVtYmVkIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjgwMCIgOnNyYz0iYCR7YmFzZVVybH0vJHtpbG92YVVwbG9hZFBhdGh9YCIgdHlwZT0iYXBwbGljYXRpb24vcGRmIi8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI+CiAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzZWNvbmRhcnkiIEBjbGljaz0idmlld0lsb3ZhTW9kYWwgPSBmYWxzZSI+e3sgJHQoImFjdGlvbnMuY2xvc2UiKSB9fTwvYi1idXR0b24+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgIDwvYi1tb2RhbD4KCiAgICA8Yi1tb2RhbAogICAgICAgICAgICA6dGl0bGU9IiR0KCd3cml0ZUNtdCcpICIKICAgICAgICAgICAgaWQ9IndpZHRoTU0iCiAgICAgICAgICAgIHYtbW9kZWw9ImlzQ29tbWl0IgogICAgICAgICAgICBzaXplPSJtZCIKICAgICAgICAgICAgOm5vLWNsb3NlLW9uLWJhY2tkcm9wPSJ0cnVlIgogICAgICAgICAgICBib2R5LWNsYXNzPSJwLTAiCiAgICA+CiAgICAgICAgPGRpdiBjbGFzcz0icC0yIj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxCYXNlVGV4dGFyZWFXaXRoVmFsaWRhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBtYXgtcm93cz0iNiIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC1vbi10b3AKICAgICAgICAgICAgICAgICAgICAgICAgOmxhYmVsPSIkdCgnd3JpdGVDbXQnKSIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29tbWl0IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC9CYXNlVGV4dGFyZWFXaXRoVmFsaWRhdGlvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgPEJhc2VEYXRlUGlja2VyV2l0aFZhbGlkYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgbm90LXJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0iREQtTU0tWVlZWSIKICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tLXN0eWxlcz0iZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAwJSAxMDAlIgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJleHRlbmRlZERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0iJHQoJ3N1Ym1vZHVsZXMucHJvamVjdHMuYWRkX2RheScpIgogICAgICAgICAgICAgICAgICAgICAgICBsYW5nPSJydSIKICAgICAgICAgICAgICAgID48L0Jhc2VEYXRlUGlja2VyV2l0aFZhbGlkYXRpb24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDx0ZW1wbGF0ZSAjbW9kYWwtZm9vdGVyPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+CiAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ic3VjY2VzcyIgY2xhc3M9ImZsb2F0LXJpZ2h0IG0tMSIgQGNsaWNrPSJzZW5kRXh0ZW5kZWQiPgogICAgICAgICAgICAgICAgICAgIHt7ICR0KCdhY3Rpb25zLnNlbmQnKSB9fQogICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJkYW5nZXIiIGNsYXNzPSJmbG9hdC1yaWdodCBtLTEiIEBjbGljaz0iY2xvc2VJc01vZGFsIj4KICAgICAgICAgICAgICAgICAgICB7eyAkdCgnYWN0aW9ucy5jbG9zZScpIH19CiAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RlbXBsYXRlPgogICAgPC9iLW1vZGFsPgogICAgPGItbW9kYWwKICAgICAgICAgICAgOnRpdGxlPSIkdCgnc3VibW9kdWxlcy5keGEucmVvcGVuX2FwcGxpY2F0aW9uJykiCiAgICAgICAgICAgIHYtbW9kZWw9InJlb3Blbl9hcHBsaWNhdGlvbi5tb2RhbCIKICAgICAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgICAgIDpuby1jbG9zZS1vbi1iYWNrZHJvcD0idHJ1ZSIKICAgICAgICAgICAgYm9keS1jbGFzcz0icC0wIgogICAgPgogICAgICAgIDxkaXYgY2xhc3M9InAtMiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgPEJhc2VEYXRlUGlja2VyV2l0aFZhbGlkYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICBydWxlcz0icmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0iREQtTU0tWVlZWSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZS1iZWZvcmUKICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tLXN0eWxlcz0iZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAwJSAxMDAlIgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJyZW9wZW5fYXBwbGljYXRpb24uZGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPSIkdCgnc3VibW9kdWxlcy5kb2MuY29tcGxldGlvblRpbWUnKSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDx0ZW1wbGF0ZSAjbW9kYWwtZm9vdGVyPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+CiAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ic3VjY2VzcyIgY2xhc3M9ImZsb2F0LXJpZ2h0IG0tMSIgQGNsaWNrPSJwcm9qZWN0UmVvcGVuQXBwbGljYXRpb24iPgogICAgICAgICAgICAgICAgICAgIHt7ICR0KCdzdWJtb2R1bGVzLmR4YS5yZW9wZW5fYXBwbGljYXRpb24nKSB9fQogICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJkYW5nZXIiIGNsYXNzPSJmbG9hdC1yaWdodCBtLTEiIEBjbGljaz0icmVvcGVuX2FwcGxpY2F0aW9uLm1vZGFsID0gZmFsc2U7Ij4KICAgICAgICAgICAgICAgICAgICB7eyAkdCgnYWN0aW9ucy5jbG9zZScpIH19CiAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RlbXBsYXRlPgogICAgPC9iLW1vZGFsPgogICAgPCEtLSBlbmQgcm93IC0tPgogICAgPCEtLSAgICAgICAgZG9yaXhvbmEgbWFsdW1vdGxhcmktLT4KICAgIDxiLXNpZGViYXIgdi1tb2RlbD0iaXNtb2RhbERvcml4b25hSW5mbyIgY2xhc3M9InNpZGViYXItcGFydCIgcmlnaHQgc2hhZG93IHNpZGViYXItY2xhc3M9InAtMCIKICAgICAgICAgICAgICAgd2lkdGg9IjUwJSI+CiAgICAgICAgPERvcml4b25hQWxsSW5mbwogICAgICAgICAgICAgICAgcmVmPSJpc1NpZGViYXJfcmVmIgogICAgICAgICAgICAgICAgOmFwcGxpY2F0aW9uSWQ9InByb2ouaWQiCiAgICAgICAgLz4KICAgIDwvYi1zaWRlYmFyPgo8L2Rpdj4K"},null]}