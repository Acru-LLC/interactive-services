{"remainingRequest":"D:\\ACRU\\my-fairtech\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\my-fairtech\\src\\shared\\views\\components\\CreateFormDesignTypesByRegion.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\ACRU\\my-fairtech\\src\\shared\\views\\components\\CreateFormDesignTypesByRegion.vue","mtime":1719222285902},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719222280288},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1719222284617},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\babel-loader\\lib\\index.js","mtime":1719222279696},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719222280288},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\vue-loader\\lib\\index.js","mtime":1719222284893}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}