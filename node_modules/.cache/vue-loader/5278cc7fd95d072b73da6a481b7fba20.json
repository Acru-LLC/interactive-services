{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\advertisement\\modules\\ad_passport_info\\UpdateItemFiles.vue?vue&type=style&index=0&id=1489e13e&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\advertisement\\modules\\ad_passport_info\\UpdateItemFiles.vue","mtime":1674799496621},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1675061970775},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY29sLWZvcm0tbGFiZWwgew0KICAgIHBhZGRpbmctdG9wOiAwOw0KfQ0KDQp1bCB7DQogICAgbGlzdC1zdHlsZS10eXBlOiBub25lOw0KfQ0KDQouZHotcmVtb3ZlIHsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsNCiAgICB3aWR0aDogMS4yZW07DQogICAgaGVpZ2h0OiAxLjJlbTsNCg0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICB0b3A6IDVweDsNCiAgICByaWdodDogNXB4Ow0KICAgIHotaW5kZXg6IDEwMDA7DQoNCiAgICBmb250LXNpemU6IDEuMmVtICFpbXBvcnRhbnQ7DQogICAgbGluZS1oZWlnaHQ6IDFlbTsNCg0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCBncmF5ICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyLXJhZGl1czogMS4yZW07DQogICAgY29sb3I6IGdyYXk7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgb3BhY2l0eTogMC41Ow0KfQ0KDQouZHotcmVtb3ZlOmhvdmVyIHsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDsNCiAgICBvcGFjaXR5OiAxOw0KfQ0K"},{"version":3,"sources":["UpdateItemFiles.vue"],"names":[],"mappings":";AA+dA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"UpdateItemFiles.vue","sourceRoot":"src/modules/advertisement/modules/ad_passport_info","sourcesContent":["<template>\r\n    <base-create-or-update-wrapper\r\n        @save=\"save\"\r\n        has-save-suspend\r\n        :custom-title=\"(isModeCreate ? $t('actions.create') : $t('column.passport_number') + ': ' + editingItem.passportNumber)\"\r\n    >\r\n        <ValidationObserver\r\n            ref=\"observer\"\r\n            v-slot=\"{}\"\r\n        >\r\n            <b-row class=\"mb-3\">\r\n                <b-col\r\n                    sm=\"12\"\r\n                    md=\"6\"\r\n                >\r\n                    <ValidationProvider\r\n                        name=\"architecDocFile\"\r\n                        rules=\"\"\r\n                        mode=\"passive\"\r\n                    >\r\n                        <template v-slot:default=\"\">\r\n                            <BaseFileUploaderWithValidation\r\n                                ref=\"architectDocUploader\"\r\n                                v-model=\"architectDocFile\"\r\n                                data-vv-name=\"architecDocFile\"\r\n                                data-vv-as=\"ArchitecDocFile\"\r\n                                :max-files=\"5\"\r\n                                :has-error=\"hasError('mandat')\"\r\n                                :error=\"collectErr('mandat')\"\r\n                                :label=\"$t('column.ad_construction_drawing')\"\r\n                            ></BaseFileUploaderWithValidation>\r\n                        </template>\r\n                    </ValidationProvider>\r\n                </b-col>\r\n                <b-col\r\n                    sm=\"12\"\r\n                    md=\"6\"\r\n                >\r\n                    <ValidationProvider\r\n                        v-if=\"isByAgency\"\r\n                        name=\"photos\"\r\n                        rules=\"\"\r\n                    >\r\n                        <template v-slot:default=\"\">\r\n                            <BaseFileUploaderWithValidation\r\n                                ref=\"photosUploader\"\r\n                                v-model=\"photos\"\r\n                                :max-files=\"null\"\r\n                                :max-fileSize=\"null\"\r\n                                data-vv-name=\"photos\"\r\n                                data-vv-as=\"Photos\"\r\n                                :has-error=\"hasError('photos')\"\r\n                                :error=\"collectErr('photos')\"\r\n                                :label=\"$t('column.ad_construction_photo')\"\r\n                            ></BaseFileUploaderWithValidation>\r\n                        </template>\r\n                    </ValidationProvider>\r\n                </b-col>\r\n            </b-row>\r\n\r\n            <b-row class=\"mb-3\">\r\n                <b-col\r\n                    sm=\"12\"\r\n                    md=\"6\"\r\n                >\r\n                    <ValidationProvider\r\n                        v-if=\"isByAgency\"\r\n                        name=\"passportDocFile\"\r\n                        rules=\"\"\r\n                        mode=\"passive\"\r\n                    >\r\n                        <template v-slot:default=\"\">\r\n                            <BaseFileUploaderWithValidation\r\n                                ref=\"passportDocUploader\"\r\n                                v-model=\"passportDocFile\"\r\n                                :max-files=\"1\"\r\n                                data-vv-name=\"passportDocFile\"\r\n                                data-vv-as=\"PassportDocFile\"\r\n                                :has-error=\"hasError('passportDocFile')\"\r\n                                :error=\"collectErr('passportDocFile')\"\r\n                                :label=\"$t('column.ad_construction_passport_doc_file')\"\r\n                            ></BaseFileUploaderWithValidation>\r\n                        </template>\r\n                    </ValidationProvider>\r\n                </b-col>\r\n                <b-col\r\n                    sm=\"12\"\r\n                    md=\"6\"\r\n                >\r\n                    <ValidationProvider\r\n                        v-if=\"isByAgency\"\r\n                        name=\"paymentDocFile\"\r\n                        rules=\"\"\r\n                        mode=\"passive\"\r\n                    >\r\n                        <template v-slot:default=\"\">\r\n                            <BaseFileUploaderWithValidation\r\n                                ref=\"paymentDocUploader\"\r\n                                v-model=\"paymentDocFile\"\r\n                                :max-files=\"1\"\r\n                                data-vv-name=\"paymentDocFile\"\r\n                                data-vv-as=\"PaymentDocFile\"\r\n                                :has-error=\"hasError('paymentDocFile')\"\r\n                                :error=\"collectErr('paymentDocFile')\"\r\n                                :label=\"$t('column.ad_construction_monthly_income_doc_photo')\"\r\n                            ></BaseFileUploaderWithValidation>\r\n                        </template>\r\n                    </ValidationProvider>\r\n                </b-col>\r\n            </b-row>\r\n\r\n            <b-row class=\"mb-3\">\r\n                <b-col\r\n                    sm=\"12\"\r\n                    md=\"6\"\r\n                >\r\n                    <ValidationProvider\r\n                        v-if=\"isByAgency\"\r\n                        name=\"passportPhoto\"\r\n                        rules=\"\"\r\n                    >\r\n                        <template v-slot:default=\"\">\r\n                            <BaseFileUploaderWithValidation\r\n                                ref=\"passportPhotoUploader\"\r\n                                v-model=\"passportPhoto\"\r\n                                :max-files=\"1\"\r\n                                data-vv-name=\"passportPhoto\"\r\n                                data-vv-as=\"PassportPhoto\"\r\n                                :has-error=\"hasError('passportPhoto')\"\r\n                                :error=\"collectErr('passportPhoto')\"\r\n                                :label=\"$t('column.ad_construction_passport_photo')\"\r\n                            ></BaseFileUploaderWithValidation>\r\n                        </template>\r\n                    </ValidationProvider>\r\n                </b-col>\r\n                <b-col\r\n                    sm=\"12\"\r\n                    md=\"6\"\r\n                >\r\n\r\n                </b-col>\r\n            </b-row>\r\n\r\n        </ValidationObserver>\r\n    </base-create-or-update-wrapper>\r\n</template>\r\n<script>\r\nconst MAIN_API_URL = 'contractor-advertising-construction'\r\nconst APPEND_API_URL_FOR_GOVERNMENT = 'first-agent-files'\r\nconst APPEND_API_URL_FOR_AGENCY = 'second-agent-files'\r\n/*\r\n* YOU MUST SEND {{ MAIN_API_URL }} TO CRUD_SERVICE */\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\n\r\nexport default {\r\n    name: \"UpdateItemFiles\",\r\n    /*\r\n    * COMPONENTS */\r\n    components: {\r\n    },\r\n    /*\r\n    * DATA */\r\n    data () {\r\n        return {\r\n            publicPath: process.env.BASE_URL,\r\n            editingItem: {\r\n                addressDto: {}\r\n            },\r\n            errors: [],\r\n            architectDocFile: [],\r\n            photos: [],\r\n            passportDocFile: [],\r\n            passportPhoto: [],\r\n            paymentDocFile: []\r\n        }\r\n    },\r\n    /*\r\n    * COMPUTED */\r\n    computed: {\r\n        isModeCreate () {\r\n            return this.$route.name == 'CreateAdPassportInfoByAgency' || this.$route.name == 'CreateAdPassportInfoByGovernment'\r\n        },\r\n        isByAgency () {\r\n            return this.$route.name == 'UpdateAdPassportInfoFilesByAgency'\r\n        },\r\n        isByGovernment () {\r\n            return this.$route.name == 'UpdateAdPassportInfoFilesByGovernment'\r\n        },\r\n        computedObserver () {\r\n            return this.$refs.observer\r\n        },\r\n        /* multipleMinimumCollectionsComputedObserver () {\r\n            return this.$refs['multiple-minimum-collections-observer']\r\n        },\r\n        singleMinimumCollectionUpdateComputedObserver () {\r\n            return this.$refs['single-minimum-collection-update-observer']\r\n        } */\r\n    },\r\n    /*\r\n    * METHODS */\r\n    methods: {\r\n        generateUUID () {\r\n            var dt = new Date().getTime();\r\n            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                var r = (dt + Math.random() * 16) % 16 | 0;\r\n                dt = Math.floor(dt / 16);\r\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n            return uuid;\r\n        },\r\n        async setFilesFromServer () {\r\n            if (this.isByGovernment) {\r\n                // ARCHITECT_DOC_FILES\r\n                this.editingItem.architectDocFileList.forEach(f => {\r\n                    fetch(this.publicPath + f.url)\r\n                        .then((res) => res.blob())\r\n                        .then((myBlob) => {\r\n                            myBlob.name = f.name;\r\n                            myBlob.lastModified = new Date();\r\n                            const myFile = new File([myBlob], f.name, {\r\n                                type: myBlob.type,\r\n                            });\r\n\r\n                            let url = this.publicPath + f.url;\r\n                            this.$refs.architectDocUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n                        })\r\n                        .catch(e => console.log(e));\r\n                    /* let file = { size: f.size, name: f.name, type: f.contentType, uuid: this.generateUUID() };\r\n                    let url = this.publicPath + f.url;\r\n                    this.$refs.architectDocUploader.$refs.dropzone.manuallyAddFile(file, url); */\r\n                })\r\n            } else if (this.isByAgency) {\r\n                // ARCHITECT_DOC_FILES\r\n                this.editingItem.architectDocFileList.forEach((f, index) => {\r\n                    fetch(this.publicPath + f.url)\r\n                        .then((res) => res.blob())\r\n                        .then((myBlob) => {\r\n                            myBlob.name = f.name;\r\n                            myBlob.lastModified = new Date();\r\n                            const myFile = new File([myBlob], f.name, {\r\n                                type: myBlob.type,\r\n                            });\r\n\r\n                            let url = this.publicPath + f.url;\r\n                            this.$refs.architectDocUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n                        })\r\n                        .catch(e => console.log(e));\r\n\r\n                    /* const mockFile = { name: f.name, size: f.size };\r\n                    console.log(this.$refs.architectDocUploader.$refs.dropzone.dropzone.options) */\r\n                    // this.$refs.architectDocUploader.$refs.dropzone.files[index] = f.name;\r\n                    /* this.$refs.architectDocUploader.$refs.dropzone.dropzone.options.addedfile(this.$refs.architectDocUploader.$refs.dropzone, mockFile);\r\n                    this.$refs.architectDocUploader.$refs.dropzone.dropzone.options.thumbnail(this.$refs.architectDocUploader.$refs.dropzone, mockFile, this.publicPath + f.url); */\r\n                    /* mockFile.previewElement.classList.add('dz-success');\r\n                    mockFile.previewElement.classList.add('dz-complete'); */\r\n                    // let file = new File([\"\"], f.name, { type: f.contentType, size: f.size, lastModified: new Date().getTime() })\r\n                    // file.size = f.size\r\n                    // let file = { size: f.size, name: f.name, type: f.contentType, uuid: this.generateUUID() };\r\n                    /* let url = this.publicPath + f.url;\r\n                    this.$refs.architectDocUploader.$refs.dropzone.manuallyAddFile(myFile, url); */\r\n                })\r\n                // OBJECT_PHOTOS\r\n                this.editingItem.objectPhotoList.forEach(f => {\r\n                    fetch(this.publicPath + f.url)\r\n                        .then((res) => res.blob())\r\n                        .then((myBlob) => {\r\n                            myBlob.name = f.name;\r\n                            myBlob.lastModified = new Date();\r\n                            const myFile = new File([myBlob], f.name, {\r\n                                type: myBlob.type,\r\n                            });\r\n\r\n                            let url = this.publicPath + f.url;\r\n                            this.$refs.photosUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n                        })\r\n                        .catch(e => console.log(e));\r\n                    /* let file = { size: f.size, name: f.name, type: f.contentType, uuid: this.generateUUID() };\r\n                    let url = this.publicPath + f.url;\r\n                    this.$refs.photosUploader.$refs.dropzone.manuallyAddFile(file, url); */\r\n                })\r\n                if (this.editingItem.passportDocFileUrl) {\r\n                    // PASSPORT_DOC_FILE\r\n                    fetch(this.publicPath + this.editingItem.passportDocFileUrl.url)\r\n                        .then((res) => res.blob())\r\n                        .then((myBlob) => {\r\n                            myBlob.name = this.editingItem.passportDocFileUrl.name;\r\n                            myBlob.lastModified = new Date();\r\n                            const myFile = new File([myBlob], this.editingItem.passportDocFileUrl.name, {\r\n                                type: myBlob.type,\r\n                            });\r\n\r\n                            let url = this.publicPath + this.editingItem.passportDocFileUrl.url;\r\n                            this.$refs.passportDocUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n                        })\r\n                        .catch(e => console.log(e));\r\n                    /* let pDocFile = { size: this.editingItem.passportDocFileUrl.size, name: this.editingItem.passportDocFileUrl.name, type: this.editingItem.passportDocFileUrl.contentType, uuid: this.generateUUID() };\r\n                    let pDocFileUrl = this.publicPath + this.editingItem.passportDocFileUrl.url;\r\n                    this.$refs.passportDocUploader.$refs.dropzone.manuallyAddFile(pDocFile, pDocFileUrl); */\r\n                }\r\n                if (this.editingItem.passportPhotoUrl) {\r\n                    // PASSPORT_PHOTO\r\n                    fetch(this.publicPath + this.editingItem.passportPhotoUrl.url)\r\n                        .then((res) => res.blob())\r\n                        .then((myBlob) => {\r\n                            myBlob.name = this.editingItem.passportPhotoUrl.name;\r\n                            myBlob.lastModified = new Date();\r\n                            const myFile = new File([myBlob], this.editingItem.passportPhotoUrl.name, {\r\n                                type: myBlob.type,\r\n                            });\r\n\r\n                            let url = this.publicPath + this.editingItem.passportPhotoUrl.url;\r\n                            this.$refs.passportPhotoUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n                        })\r\n                        .catch(e => console.log(e));\r\n                    /* let pPhoto = { size: this.editingItem.passportPhotoUrl.size, name: this.editingItem.passportPhotoUrl.name, type: this.editingItem.passportPhotoUrl.contentType, uuid: this.generateUUID() };\r\n                    let pPhotoUrl = this.publicPath + this.editingItem.passportPhotoUrl.url;\r\n                    this.$refs.passportPhotoUploader.$refs.dropzone.manuallyAddFile(pPhoto, pPhotoUrl); */\r\n                }\r\n                if (this.editingItem.paymentDocFileUrl) {\r\n                    // PAYMENT_DOC_FILE\r\n                    fetch(this.publicPath + this.editingItem.paymentDocFileUrl.url)\r\n                        .then((res) => res.blob())\r\n                        .then((myBlob) => {\r\n                            myBlob.name = this.editingItem.paymentDocFileUrl.name;\r\n                            myBlob.lastModified = new Date();\r\n                            const myFile = new File([myBlob], this.editingItem.paymentDocFileUrl.name, {\r\n                                type: myBlob.type,\r\n                            });\r\n\r\n                            let url = this.publicPath + this.editingItem.paymentDocFileUrl.url;\r\n                            this.$refs.paymentDocUploader.$refs.dropzone.manuallyAddFile(myFile, url);\r\n                        })\r\n                        .catch(e => console.log(e));\r\n                    /* let paymentFile = { size: this.editingItem.paymentDocFileUrl.size, name: this.editingItem.paymentDocFileUrl.name, type: this.editingItem.paymentDocFileUrl.contentType, uuid: this.generateUUID() };\r\n                    let paymentFileUrl = this.publicPath + this.editingItem.paymentDocFileUrl.url;\r\n                    this.$refs.paymentDocUploader.$refs.dropzone.manuallyAddFile(paymentFile, paymentFileUrl); */\r\n                }\r\n            }\r\n        },\r\n        collectErr (key) {\r\n            if (this.errors[key] !== undefined) {\r\n                return this.errors[key];\r\n            }\r\n            return undefined;\r\n        },\r\n        hasError (key) {\r\n            if (this.errors[key] !== undefined) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        /* dataURLtoFile (dataurl, filename) {\r\n            let arr = dataurl.split(\",\"),\r\n                mime = arr[0].match(/:(.*?);/)[1],\r\n                bstr = atob(arr[1]),\r\n                n = bstr.length,\r\n                u8arr = new Uint8Array(n);\r\n\r\n            while (n--) {\r\n                u8arr[n] = bstr.charCodeAt(n);\r\n            }\r\n            return new File([u8arr], filename, { type: mime });\r\n        }, */\r\n        makeAndReturnFormData () {\r\n            let form = new FormData();\r\n            if (this.isByGovernment) {\r\n                /* this.architectDocFile.forEach(f => {\r\n                    form.append(\"architectDocFiles\", this.dataURLtoFile(f.file, f.name));\r\n                }) */\r\n                this.architectDocFile.forEach(f => {\r\n                    form.append(\"architectDocFiles\", f.file);\r\n                })\r\n            } else if (this.isByAgency) {\r\n                /* this.architectDocFile.forEach(f => {\r\n                    form.append(\"architectDocFiles\", this.dataURLtoFile(f.file, f.name));\r\n                })\r\n                this.photos.forEach(f => {\r\n                    form.append(\"objectPhotos\", this.dataURLtoFile(f.file, f.name));\r\n                })\r\n                form.append(\"isMainIndexForObjectPhotos\", this.photos.length ? 0 : null);\r\n\r\n                this.passportDocFile.forEach(f => {\r\n                    form.append(\"passportDocFile\", this.dataURLtoFile(f.file, f.name));\r\n                })\r\n                this.passportPhoto.forEach(f => {\r\n                    form.append(\"passportPhoto\", this.dataURLtoFile(f.file, f.name));\r\n                })\r\n                this.paymentDocFile.forEach(f => {\r\n                    form.append(\"paymentDocFile\", this.dataURLtoFile(f.file, f.name));\r\n                }) */\r\n                this.architectDocFile.forEach(f => {\r\n                    form.append(\"architectDocFiles\", f.file);\r\n                })\r\n                this.photos.forEach(f => {\r\n                    form.append(\"objectPhotos\", f.file);\r\n                })\r\n                // form.append(\"isMainIndexForObjectPhotos\", this.photos.length ? 0 : null);\r\n\r\n                this.passportDocFile.forEach(f => {\r\n                    form.append(\"passportDocFile\", f.file);\r\n                })\r\n                this.passportPhoto.forEach(f => {\r\n                    form.append(\"passportPhoto\", f.file);\r\n                })\r\n                this.paymentDocFile.forEach(f => {\r\n                    form.append(\"paymentDocFile\", f.file);\r\n                })\r\n            }\r\n            return form\r\n        },\r\n        async save () {\r\n            this.computedObserver.validate().then(async valid => {\r\n                if (valid) {\r\n                    if ((!this.passportPhoto && !this.passportDocFile) || ((this.passportPhoto ? !this.passportPhoto.length : true) && (this.passportDocFile ? !this.passportDocFile.length : true))) {\r\n                        this.$toast(this.$t('messages.fill_ad_passport_doc_or_photo'), { type: 'error' });\r\n                        return\r\n                    }\r\n                    if (this.isByAgency) {\r\n                        await crudAndListsService\r\n                            .saveFileEntity(`second-agent-files/${this.$route.params.id}`, this.makeAndReturnFormData())\r\n                            .then(res => {\r\n                                this.computedObserver.reset()\r\n                                this.editingItem = Object.assign({}, {});\r\n                                this.$router.go(-1)\r\n                                this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n                            })\r\n                            .catch(e => console.log(e));\r\n                    } else if (this.isByGovernment) {\r\n                        await crudAndListsService\r\n                            .saveFileEntity(`first-agent-files/${this.$route.params.id}`, this.makeAndReturnFormData())\r\n                            .then(res => {\r\n                                this.computedObserver.reset()\r\n                                this.editingItem = Object.assign({}, {});\r\n                                this.$router.go(-1)\r\n                                this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n                            })\r\n                            .catch(e => console.log(e));\r\n                    }\r\n                } else {\r\n                    this.$toast(this.$t('messages.fill_required_fields'), { type: 'error' });\r\n                }\r\n            });\r\n        }\r\n    },\r\n    /*\r\n    * CREATED */\r\n    async created () {\r\n        // this.$store.commit('SET_GLOBAL_LOADING', true)\r\n        await crudAndListsService.getById(MAIN_API_URL, this.$route.params.id, true, null, this.isByGovernment ? APPEND_API_URL_FOR_GOVERNMENT : this.isByAgency ? APPEND_API_URL_FOR_AGENCY : false)\r\n            .then(async res => {\r\n                this.editingItem = res.data\r\n                await this.setFilesFromServer()\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n            .finally(() => {\r\n                // this.$store.commit('SET_GLOBAL_LOADING', false)\r\n            })\r\n    },\r\n    /*\r\n    WATCH */\r\n    watch: {\r\n        veeErrors: {\r\n            handler (val, oldVal) {\r\n                this.errors = [];\r\n                val.items.map((err) => {\r\n                    /* if (this.fields.hasOwnProperty(err.field) !== -1) {\r\n                        this.errors[err.field] = err.msg;\r\n                    } */\r\n                });\r\n            },\r\n            deep: true,\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.col-form-label {\r\n    padding-top: 0;\r\n}\r\n\r\nul {\r\n    list-style-type: none;\r\n}\r\n\r\n.dz-remove {\r\n    display: inline-block !important;\r\n    width: 1.2em;\r\n    height: 1.2em;\r\n\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n    z-index: 1000;\r\n\r\n    font-size: 1.2em !important;\r\n    line-height: 1em;\r\n\r\n    text-align: center;\r\n    font-weight: bold;\r\n    border: 1px solid gray !important;\r\n    border-radius: 1.2em;\r\n    color: gray;\r\n    background-color: white;\r\n    opacity: 0.5;\r\n}\r\n\r\n.dz-remove:hover {\r\n    text-decoration: none !important;\r\n    opacity: 1;\r\n}\r\n</style>\r\n"]}]}