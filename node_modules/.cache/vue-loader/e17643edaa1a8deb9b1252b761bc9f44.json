{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\advertisement\\modules\\e-auction-monitoring\\passport-info\\Index.vue?vue&type=template&id=082d0c0a&scoped=true&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\advertisement\\modules\\e-auction-monitoring\\passport-info\\Index.vue","mtime":1675054786257},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1667355356566},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTIgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoNCBtYi00IGQtaW5saW5lLWJsb2NrIiB9LCBbCiAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoInN1Ym1vZHVsZXMuYWRfcGFzc3BvcnRfaW5mby50aXRsZSIpKSksCiAgICAgIF0pLAogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItcm93IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWItMiIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB4LTEgcGItMiIsIGF0dHJzOiB7IGNvbHM6ICI1IiwgbGc6ICI0IiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnNlYXJjaEtleXdvcmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlYXJjaEtleXdvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF92bS4kdCgiY29sdW1uLnNlYXJjaCIpLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uc2VhcmNoS2V5d29yZCB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2VhcmNoS2V5d29yZCA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZWJvdW5jZVNlYXJjaFRhYmxlSXRlbXMsCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJweC0xIHBiLTIiLCBhdHRyczogeyBjb2xzOiAiNSIsIGxnOiAiNiIgfSB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoIkJhc2VNdWx0aXNlbGVjdFdpdGhWYWxpZGF0aW9uIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5vdC1yZXF1aXJlZCI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZTogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5jb250cmFjdG9ycy5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5pZAogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgImhpZGUtc2VsZWN0ZWQiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAiY2xvc2Utb24tc2VsZWN0IjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfdm0uJHQoInN1Ym1vZHVsZXMuY29udHJhY3Rvci50aXRsZSIpLAogICAgICAgICAgICAgICAgICAgICAgICAiY3VzdG9tLWxhYmVsIjogX3ZtLmN1c3RvbUxhYmVsQ29udHJhY3RvciwKICAgICAgICAgICAgICAgICAgICAgICAgIm9wZW4tZGlyZWN0aW9uIjogImJvdHRvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXgtaGVpZ2h0IjogNjAwLAogICAgICAgICAgICAgICAgICAgICAgICAic2hvdy1sYWJlbHMiOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgIm9ubHktZm9ybS1lbGVtZW50IjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogeyBpbnB1dDogX3ZtLmNvbnRyYWN0b3JTZWxlY3RlZCB9LAogICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maWx0ZXJQYXlsb2FkLmNvbnRyYWN0b3JJZHMsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpbHRlclBheWxvYWQsICJjb250cmFjdG9ySWRzIiwgJCR2KQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmlsdGVyUGF5bG9hZC5jb250cmFjdG9ySWRzIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB4LTEgcGItMiIsIGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiYi1mb3JtLXNlbGVjdCIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1zZWxlY3QiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLm9wdGlvbnNUYWJsZSB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uc2VsZWN0TGlzdCB9LAogICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxlY3RlZCwKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0ZWQgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlbGVjdGVkIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB4LTEgcGItMiIsIGF0dHJzOiB7IGNvbHM6ICIzIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiQmFzZU11bHRpc2VsZWN0V2l0aFZhbGlkYXRpb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAibm90LXJlcXVpcmVkIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5yZWdpb25zLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnJlZ2lvbklkCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogX3ZtLiR0KCJjb2x1bW4ucmVnaW9uIiksCiAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b20tbGFiZWwiOiBfdm0uY3VzdG9tTGFiZWxSZWdpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICJvcGVuLWRpcmVjdGlvbiI6ICJib3R0b20iLAogICAgICAgICAgICAgICAgICAgICAgICAibWF4LWhlaWdodCI6IDYwMCwKICAgICAgICAgICAgICAgICAgICAgICAgInNob3ctbGFiZWxzIjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICJvbmx5LWZvcm0tZWxlbWVudCI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsgaW5wdXQ6IF92bS5yZWdpb25TZWxlY3RlZCB9LAogICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maWx0ZXJQYXlsb2FkLnJlZ2lvbklkLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5maWx0ZXJQYXlsb2FkLCAicmVnaW9uSWQiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmaWx0ZXJQYXlsb2FkLnJlZ2lvbklkIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB4LTEgcGItMiIsIGF0dHJzOiB7IGNvbHM6ICIzIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiQmFzZU11bHRpc2VsZWN0V2l0aFZhbGlkYXRpb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAibm90LXJlcXVpcmVkIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm9wZW4tZGlyZWN0aW9uIjogImJvdHRvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5kaXN0cmljdHMubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuaWQKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXgtaGVpZ2h0IjogNjAwLAogICAgICAgICAgICAgICAgICAgICAgICAic2hvdy1sYWJlbHMiOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF92bS4kdCgiY29sdW1uLmRpc3RyaWN0IiksCiAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b20tbGFiZWwiOiBfdm0uY3VzdG9tTGFiZWxEaXN0cmljdCwKICAgICAgICAgICAgICAgICAgICAgICAgImhpZGUtc2VsZWN0ZWQiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAiY2xvc2Utb24tc2VsZWN0IjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICJvbmx5LWZvcm0tZWxlbWVudCI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsgaW5wdXQ6IF92bS5kaXN0cmljdFNlbGVjdGVkIH0sCiAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZpbHRlclBheWxvYWQuZGlzdHJpY3RJZHMsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpbHRlclBheWxvYWQsICJkaXN0cmljdElkcyIsICQkdikKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZpbHRlclBheWxvYWQuZGlzdHJpY3RJZHMiLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiQmFzZURhdGVQaWNrZXJXaXRoVmFsaWRhdGlvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJub3QtcmVxdWlyZWQiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXM6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibW9udGgiLAogICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICJNTS1ZWVlZIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm9ubHktZm9ybS1lbGVtZW50IjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF92bS4kdCgiY29sdW1uLmdpdmVuX2RhdGUiKSwKICAgICAgICAgICAgICAgICAgICAgICAgbGFuZzogInJ1IiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogeyBpbnB1dDogX3ZtLmdpdmVuRGF0ZVNlbGVjdGVkIH0sCiAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZpbHRlclBheWxvYWQuZ2l2ZW5EYXRlLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5maWx0ZXJQYXlsb2FkLCAiZ2l2ZW5EYXRlIiwgJCR2KQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmlsdGVyUGF5bG9hZC5naXZlbkRhdGUiLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiQmFzZURhdGVQaWNrZXJXaXRoVmFsaWRhdGlvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJub3QtcmVxdWlyZWQiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXM6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibW9udGgiLAogICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICJNTS1ZWVlZIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm9ubHktZm9ybS1lbGVtZW50IjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF92bS4kdCgiY29sdW1uLmV4cGlyZV9kYXRlIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmc6ICJydSIsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maWx0ZXJQYXlsb2FkLmV4cGlyZURhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpbHRlclBheWxvYWQsICJleHBpcmVEYXRlIiwgJCR2KQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmlsdGVyUGF5bG9hZC5leHBpcmVEYXRlIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtcmlnaHQgcHgtMSBwYi0yIiwgYXR0cnM6IHsgY29sczogIjIiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRvd25sb2FkLWV4Y2VsIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jrc2hlZXQ6ICJNeSBXb3Jrc2hlZXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IF92bS5qc29uX2RhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRzOiBfdm0uanNvbl9maWVsZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBfdm0uJHQoInN1Ym1vZHVsZXMuYWRfcGFzc3BvcnRfaW5mby50aXRsZSIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHQoInN1Ym1vZHVsZXMuYWRfcGFzc3BvcnRfaW5mby50aXRsZSIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIueGxzIiwKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXJvdW5kZWQgYmctcHJpbWFyeSBtYi0yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmRvd25sb2FkRXhjZWwgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1kaSBtZGktbWljcm9zb2Z0LWV4Y2VsIG1lLTEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArIF92bS5fcyhfdm0uJHQoImFjdGlvbnMuZG93bmxvYWQiKSkgKyAiICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYi10YWJsZSIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImN1c3RvbS1iLXRhYmxlIG1heC1oZWlnaHQtNzAiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBpdGVtczogX3ZtLnRhYmxlSXRlbXMsCiAgICAgICAgICAgICAgICBmaWVsZHM6IF92bS50YWJsZUZpZWxkcywKICAgICAgICAgICAgICAgIGJ1c3k6IF92bS5sb2FkaW5nVGFibGVJdGVtcywKICAgICAgICAgICAgICAgICJ0Ym9keS10ci1jbGFzcyI6IF92bS5maWx0ZXJlZFRhYmxlSXRlbXMsCiAgICAgICAgICAgICAgICAic3RpY2t5LWhlYWRlciI6ICJzdGlja3lIZWFkZXIiLAogICAgICAgICAgICAgICAgaWQ6ICJhZC1wYXNzcG9ydC1pbmZvLWxpc3QtdGFibGUiLAogICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogIiIsCiAgICAgICAgICAgICAgICBzdHJpcGVkOiAiIiwKICAgICAgICAgICAgICAgIGJvcmRlcmVkOiAiIiwKICAgICAgICAgICAgICAgIHNtYWxsOiAiIiwKICAgICAgICAgICAgICAgIGhvdmVyOiAiIiwKICAgICAgICAgICAgICAgICJzaG93LWVtcHR5IjogIiIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzY29wZWRTbG90czogX3ZtLl91KFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiAiY2VsbChpbmRleCkiLAogICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS51dGlsX3BhZ2luYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQucGFnZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnZhcl9kZWZhdWx0X3NlYXJjaF9wYXlsb2FkLml0ZW1zUGVyUGFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6ICJjZWxsKG5hbWUpIiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTAgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZsZXgtYmFzaXMiOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZsZXgtZ3JvdyI6ICIxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXA6ICIuM3JlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJiYWRnZSBiZy1wcmltYXJ5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLQjtCXIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiA6ICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKGRhdGEuaXRlbS5uYW1lVXopKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0wIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4LWJhc2lzIjogIjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4LWdyb3ciOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FwOiAiLjNyZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmFkZ2UgYmctcHJpbWFyeSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTydaIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiDCoDrCoCAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhkYXRhLml0ZW0ubmFtZUx0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItMCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxleC1iYXNpcyI6ICIwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxleC1ncm93IjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcDogIi4zcmVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImJhZGdlIGJnLXByaW1hcnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoItCg0KMiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIMKgOsKgICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKGRhdGEuaXRlbS5uYW1lUnUpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6ICJjZWxsKGFkdmVydGlzZW1lbnRPYmplY3RTdGF0ZU5hbWUpIiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXROYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVJ1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbnRyYWN0b3JBZHZlcnRpc2luZ0NvbnN0cnVjdGlvbkZvclNlY29uZEFnZW50RHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGlyZWN0b3J5QWR2ZXJ0aXNlbWVudE9iamVjdFN0YXRlTmFtZVJ1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29udHJhY3RvckFkdmVydGlzaW5nQ29uc3RydWN0aW9uRm9yU2Vjb25kQWdlbnREdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kaXJlY3RvcnlBZHZlcnRpc2VtZW50T2JqZWN0U3RhdGVOYW1lTHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVVejoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLml0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb250cmFjdG9yQWR2ZXJ0aXNpbmdDb25zdHJ1Y3Rpb25Gb3JTZWNvbmRBZ2VudER0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpcmVjdG9yeUFkdmVydGlzZW1lbnRPYmplY3RTdGF0ZU5hbWVVeiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogImNlbGwocmVnaW9uTmFtZSkiLAogICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmdldE5hbWUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lUnU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29udHJhY3RvckFkdmVydGlzaW5nQ29uc3RydWN0aW9uRm9yU2Vjb25kQWdlbnREdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRyZXNzRHRvLnJlZ2lvbk5hbWVSdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZUx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbnRyYWN0b3JBZHZlcnRpc2luZ0NvbnN0cnVjdGlvbkZvclNlY29uZEFnZW50RHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkcmVzc0R0by5yZWdpb25OYW1lTHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVVejoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLml0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb250cmFjdG9yQWR2ZXJ0aXNpbmdDb25zdHJ1Y3Rpb25Gb3JTZWNvbmRBZ2VudER0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZHJlc3NEdG8ucmVnaW9uTmFtZVV6LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiAiY2VsbChkaXN0cmljdE5hbWUpIiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXROYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVJ1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbnRyYWN0b3JBZHZlcnRpc2luZ0NvbnN0cnVjdGlvbkZvclNlY29uZEFnZW50RHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkcmVzc0R0by5kaXN0cmljdE5hbWVSdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZUx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbnRyYWN0b3JBZHZlcnRpc2luZ0NvbnN0cnVjdGlvbkZvclNlY29uZEFnZW50RHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkcmVzc0R0by5kaXN0cmljdE5hbWVMdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVV6OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbnRyYWN0b3JBZHZlcnRpc2luZ0NvbnN0cnVjdGlvbkZvclNlY29uZEFnZW50RHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkcmVzc0R0by5kaXN0cmljdE5hbWVVeiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogImNlbGwoYWN0aW9ucykiLAogICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZ2VuZXJhbC10YWJsZV9fYWN0aW9ucyBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi1wb3BvdmVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWItcG9wb3Zlci5ob3Zlci5ib3R0b20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF92bS4kdCgiYWN0aW9ucy5kZXRhaWxzIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInt0aXRsZTokdCgnYWN0aW9ucy5kZXRhaWxzJyksY29udGVudDpudWxsfSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgaG92ZXI6IHRydWUsIGJvdHRvbTogdHJ1ZSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidG4gYnRuLWxpbmsgdGV4dC1kZWNvcmF0aW9uLW5vbmUgcC0wIHRleHQtc3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJBZHZlcnRpc2VtZW50RUF1Y3Rpb25EZXRhaWxzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLml0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb250cmFjdG9yQWR2ZXJ0aXNpbmdDb25zdHJ1Y3Rpb25Gb3JGaXJzdEFnZW50RHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaWQgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLml0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb250cmFjdG9yQWR2ZXJ0aXNpbmdDb25zdHJ1Y3Rpb25Gb3JTZWNvbmRBZ2VudER0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJieCBieHMtZGV0YWlsIiB9KV0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogImVtcHR5IiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KCJtZXNzYWdlcy5kYXRhX25vdF9mb3VuZCIpKSksCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHByb3h5OiB0cnVlLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiAidGFibGUtYnVzeSIsCiAgICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIG15LTIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYi1zcGlubmVyIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGlnbi1taWRkbGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFyaWFudDogInByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiYi1wYWdpbmF0aW9uIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAianVzdGlmeS1jb250ZW50LWVuZCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICJ0b3RhbC1yb3dzIjogX3ZtLnRvdGFsSXRlbXMsCiAgICAgICAgICAgICAgICAicGVyLXBhZ2UiOiBfdm0udmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQuaXRlbXNQZXJQYWdlLAogICAgICAgICAgICAgICAgImFyaWEtY29udHJvbHMiOiAibXktdGFibGUiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQucGFnZSwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoJCR2KSB7CiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS52YXJfZGVmYXVsdF9zZWFyY2hfcGF5bG9hZCwgInBhZ2UiLCAkJHYpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInZhcl9kZWZhdWx0X3NlYXJjaF9wYXlsb2FkLnBhZ2UiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgIF0pLAogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}