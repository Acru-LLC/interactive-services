{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\shared\\views\\components\\CreateFormQuarter.vue?vue&type=style&index=0&id=713a0f35&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\shared\\views\\components\\CreateFormQuarter.vue","mtime":1674799498125},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1675061970775},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY29sLWZvcm0tbGFiZWwgew0KICBwYWRkaW5nLXRvcDogMDsNCn0NCg0KdWwgew0KICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7DQp9DQo="},{"version":3,"sources":["CreateFormQuarter.vue"],"names":[],"mappings":";AAqPA;AACA;AACA;;AAEA;AACA;AACA","file":"CreateFormQuarter.vue","sourceRoot":"src/shared/views/components","sourcesContent":["<template>\r\n  <ValidationObserver\r\n      ref=\"observer\"\r\n      v-slot=\"{}\"\r\n  >\r\n    <b-row class=\"mb-3\">\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            rules=\"required\"\r\n            class=\"required\"\r\n            v-model=\"editingItem.nameUz\"\r\n            :label=\"$t('column.name_uz')\"\r\n            :placeholder=\"$t('column.name_uz')\"\r\n        />\r\n      </b-col>\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            not-required\r\n            v-model=\"editingItem.code\"\r\n            :label=\"$t('column.code')\"\r\n            :placeholder=\"$t('column.code')\"\r\n        />\r\n      </b-col>\r\n    </b-row>\r\n\r\n    <b-row class=\"mb-3\">\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            not-required\r\n            v-model=\"editingItem.nameLt\"\r\n            :label=\"$t('column.name_lt')\"\r\n            :placeholder=\"$t('column.name_lt')\"\r\n        />\r\n      </b-col>\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseSelectWithValidation\r\n            v-model=\"editingItem.statusId\"\r\n            class=\"required\"\r\n            rules=\"required\"\r\n            :label=\"$t('column.status')\"\r\n            value-field=\"id\"\r\n        >\r\n          <template #first>\r\n            <b-form-select-option\r\n                :value=\"null\"\r\n                disabled\r\n            >{{ $t('column.status') }}\r\n            </b-form-select-option>\r\n            <b-form-select-option v-for=\"(status, index) in statuses\" :key=\"`${status}-${index}`\" :value=\"status.id\">{{\r\n                getName({\r\n                  nameRu: status.nameRu,\r\n                  nameLt: status.nameLt,\r\n                  nameUz: status.nameUz,\r\n                })\r\n              }}\r\n            </b-form-select-option>\r\n          </template>\r\n        </BaseSelectWithValidation>\r\n      </b-col>\r\n    </b-row>\r\n\r\n    <b-row class=\"mb-3\">\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            not-required\r\n            v-model=\"editingItem.nameRu\"\r\n            :label=\"$t('column.name_ru')\"\r\n            :placeholder=\"$t('column.name_ru')\"\r\n        />\r\n      </b-col>\r\n      <!-- <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n          <BaseInputWithValidation\r\n              not-required\r\n              v-model=\"editingItem.sizeRu\"\r\n              :label=\"$t('column.ad_size_ru')\"\r\n              :placeholder=\"$t('column.ad_size_ru')\"\r\n          />\r\n\r\n      </b-col> -->\r\n    </b-row>\r\n\r\n    <!-- <b-row>\r\n        <b-col\r\n            sm=\"12\"\r\n            md=\"6\"\r\n        >\r\n            <BaseInputWithValidation\r\n                not-required\r\n                v-model=\"editingItem.nameEn\"\r\n                :label=\"$t('column.name_en')\"\r\n                :placeholder=\"$t('column.name_en')\"\r\n            />\r\n        </b-col>\r\n        <b-col\r\n            sm=\"12\"\r\n            md=\"6\"\r\n        >\r\n            <BaseInputWithValidation\r\n                not-required\r\n                v-model=\"editingItem.sizeEn\"\r\n                :label=\"$t('column.ad_size_en')\"\r\n                :placeholder=\"$t('column.ad_size_en')\"\r\n            />\r\n        </b-col>\r\n    </b-row> -->\r\n  </ValidationObserver>\r\n</template>\r\n<script>\r\nconst MAIN_API_URL = 'statistic-report/directory/quarter'\r\n/*\r\n* YOU MUST SEND {{ MAIN_API_URL }} TO CRUD_SERVICE */\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport helperService from \"@/shared/services/helper.service\"\r\n\r\nexport default {\r\n  name: \"CreateFormQuarter\",\r\n  props: {\r\n    customIsModeCreate: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  /*\r\n  * COMPONENTS */\r\n  components: {},\r\n  /*\r\n  * DATA */\r\n  data() {\r\n    return {\r\n      editingItem: {},\r\n      statuses: []\r\n    }\r\n  },\r\n  /*\r\n  * COMPUTED */\r\n  computed: {\r\n    isModeCreate() {\r\n      return this.customIsModeCreate ? this.customIsModeCreate : this.$route.name === 'CreateStatisticsReportQuarter'\r\n    },\r\n    computedObserver() {\r\n      return this.$refs.observer\r\n    }\r\n  },\r\n  /*\r\n  * METHODS */\r\n  methods: {\r\n    treeClosed(veeName) {\r\n      this.computedObserver.refs[veeName].validate();\r\n    },\r\n    normalizer(node) {\r\n      if (!node.children || node.children.length === 0) {\r\n        delete node.children\r\n        return {\r\n          id: node.id,\r\n          label: node.name,\r\n        }\r\n      }\r\n      return {\r\n        id: node.id,\r\n        label: node.name,\r\n        children: node.children && node.children.length > 0 ? node.children : [],\r\n      }\r\n    },\r\n    save() {\r\n      this.computedObserver.validate().then(valid => {\r\n        if (valid) {\r\n          if (this.editingItem.id) {\r\n            crudAndListsService.update(MAIN_API_URL, this.editingItem).then(res => {\r\n              this.computedObserver.reset()\r\n              this.editingItem = Object.assign({}, {});\r\n              this.$router.go(-1)\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n          } else {\r\n            crudAndListsService.create(MAIN_API_URL, this.editingItem).then(res => {\r\n              this.computedObserver.reset()\r\n              this.editingItem = Object.assign({}, {});\r\n              this.$router.go(-1)\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n          }\r\n        } else {\r\n          this.$toast(this.$t('messages.fill_required_fields'), {type: 'error'});\r\n        }\r\n      });\r\n    }\r\n  },\r\n  /*\r\n  * CREATED */\r\n  async created() {\r\n    console.log('this.isModeCreate', this.isModeCreate)\r\n    this.var_default_search_payload.itemsPerPage = 500\r\n    if (this.isModeCreate) {\r\n      await crudAndListsService.getEmpty(MAIN_API_URL)\r\n          .then(res => {\r\n            this.editingItem = res.data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    } else {\r\n      await crudAndListsService.getById(MAIN_API_URL, this.$route.params.id, false)\r\n          .then(res => {\r\n            this.editingItem = res.data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    }\r\n    // GET STATUSES\r\n    await helperService.getRefByCode('status')\r\n        .then(res => {\r\n          this.statuses = res.data.children\r\n          if (this.isModeCreate) {\r\n            let activeStatus = this.statuses.find(el => el.code == 'ACTIVE')\r\n            if (activeStatus) {\r\n              this.editingItem.statusId = activeStatus.id\r\n            }\r\n          }\r\n        })\r\n        .catch(e => {\r\n          console.log(e)\r\n        })\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.col-form-label {\r\n  padding-top: 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n}\r\n</style>"]}]}