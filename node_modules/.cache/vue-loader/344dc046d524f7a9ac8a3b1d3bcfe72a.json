{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\income\\signature.vue?vue&type=template&id=62505dca&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\income\\signature.vue","mtime":1675054786270},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1675061970779},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdj4KICAgIDxkaXYgaWQ9Im15SGVhZGVyIiBjbGFzcz0iY2FyZCBjYXJkLWJvZHkgc3RpY2t5SGVhZCI+CiAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6IDU4JSI+CiAgICAgICAgICA8aDUgdi1pZj0ibnVtUGFnZXMiIGNsYXNzPSJmbG9hdC1yaWdodCBtLTAiPgogICAgICAgICAgICB7eyBjdXJyZW50UGFnZSB9fSAvIHt7IG51bVBhZ2VzIH19CiAgICAgICAgICA8L2g1PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiA0MyUiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZmxvYXQtcmlnaHQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxiLWJ1dHRvbi1ncm91cD4KICAgICAgICAgICAgICA8Yi1idXR0b24gY2xhc3M9ImZsb2F0LXJpZ2h0IiB2YXJpYW50PSJwcmltYXJ5IiBAY2xpY2s9InNpZ25EYXRhIj4KICAgICAgICAgICAgICAgIDxiLW92ZXJsYXkgOm9wYWNpdHk9IjAuMSIgOnNob3c9ImxvYWRlclFyQ29kZSIgcm91bmRlZD0ic20iPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcXJjb2RlIG1yLTEiPjwvaT4KICAgICAgICAgICAgICAgICAge3sgJHQoImFjdGlvbnMucXJjb2RlIikgfX0KICAgICAgICAgICAgICAgIDwvYi1vdmVybGF5PgogICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgPGItYnV0dG9uIGNsYXNzPSJmbG9hdC1yaWdodCBtci0yIiB2YXJpYW50PSJzdWNjZXNzIiBAY2xpY2s9InNhdmUiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXNhdmUiPjwvaT4KICAgICAgICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLnNhdmUiKSB9fQogICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgIDwvYi1idXR0b24tZ3JvdXA+CgogICAgICAgICAgICA8Yi1idXR0b24gOnRvPSJ7bmFtZTogJ0xldHRlckluY29tZSd9IiBjbGFzcz0iZmxvYXQtcmlnaHQgbXItMiIgdmFyaWFudD0icHJpbWFyeSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWFycm93LWxlZnQiPjwvaT4KICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgIDxiLXJvdz4KICAgICAgICA8IS0tIDxiLWNvbD48L2ItY29sPiAtLT4KICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICA8Yi1vdmVybGF5IDpvcGFjaXR5PSIxIiA6c2hvdz0ibG9hZGVyUGRmIiByb3VuZGVkPSJsZyIgdmFyaWFudD0id2hpdGUiPgogICAgICAgICAgICAgIDxkaXYgaWQ9InBkZklkIiBzdHlsZT0iIHdpZHRoOiAyNzBtbSAhaW1wb3J0YW50OyBtaW4taGVpZ2h0OiAyMTBtbTsgcG9zaXRpb246IHJlbGF0aXZlOyAiPgogICAgICAgICAgICAgICAgPFZ1ZURyYWdSZXNpemUKICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWdVcmwgJiYgcXJDb2RlUGFnZSA9PSBjdXJyZW50UGFnZSIKICAgICAgICAgICAgICAgICAgICA6aD0iMTEwIgogICAgICAgICAgICAgICAgICAgIDppc0FjdGl2ZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICA6aXNSZXNpemFibGU9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIDpwYXJlbnQ9InRydWUiCiAgICAgICAgICAgICAgICAgICAgOnBhcmVudExpbWl0YXRpb249InRydWUiCiAgICAgICAgICAgICAgICAgICAgOnc9IjExMCIKICAgICAgICAgICAgICAgICAgICA6eD0ieCIKICAgICAgICAgICAgICAgICAgICA6eT0ieSIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iei1pbmRleDogMyIKICAgICAgICAgICAgICAgICAgICB2LW9uOmRyYWdnaW5nPSJyZXNpemUiCiAgICAgICAgICAgICAgICAgICAgdi1vbjpyZXNpemluZz0icmVzaXplIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJgJHsgaW1nVXJsID8gYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwgJHtpbWdVcmx9YCA6IHJlcXVpcmUoJ0AvYXNzZXRzL2ltZy5wbmcnKSB9YCIKICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZWVudGVyPSJtb3VzZUVudGVyIgogICAgICAgICAgICAgICAgICAgICAgQG1vdXNlbGVhdmU9Im1vdXNlTGVhdmUiCiAgICAgICAgICAgICAgICAgICAgICBAbW91c2Vtb3ZlPSJtb3VzZW1vdmUiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L1Z1ZURyYWdSZXNpemU+CiAgICAgICAgICAgICAgICA8cGRmCiAgICAgICAgICAgICAgICAgICAgdi1pZj0ic3JjIgogICAgICAgICAgICAgICAgICAgIHJlZj0ibXlQZGZDb21wb25lbnQiCiAgICAgICAgICAgICAgICAgICAgOnBhZ2U9ImN1cnJlbnRQYWdlIgogICAgICAgICAgICAgICAgICAgIDpzcmM9InNyYyIKICAgICAgICAgICAgICAgICAgICBAbnVtLXBhZ2VzPSJudW1QYWdlcyA9ICRldmVudCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1vdmVybGF5PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8IS0tIDxiLWNvbD48L2ItY29sPiAtLT4KICAgICAgPC9iLXJvdz4KCiAgICAgIDxiLXJvdz4KICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG10LTQganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggbXQtNCIKICAgICAgICAgICAgICAgIHN0eWxlPSJvdmVyZmxvdzogYXV0bzsgbWF4LXdpZHRoOiA5MCUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIHYtZm9yPSJwYWdlIGluIG51bVBhZ2VzIgogICAgICAgICAgICAgICAgICA6a2V5PSJwYWdlICsgJ3BhZ2UnIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtMyBtYi00IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9ImN1cnJlbnRQYWdlID09IHBhZ2UgPyAnbXktY2FyZC1ob3ZlcmVkLXBkZi1hY3RpdmUnIDogJyciCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWNhcmQtaG92ZXJlZC1wZGYiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9InNldEN1cnJlbnRQYWdlKHBhZ2UpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMjAwcHg7IWltcG9ydGFudDtwb3NpdGlvbjpyZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWdVcmwgJiYgcXJDb2RlUGFnZSA9PSBwYWdlIgogICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBgJHt5IC8gNS4xfXB4YCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogYCR7eCAvIDUuMDh9cHhgLAogICAgICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogOTk5IgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWdVcmwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmhlaWdodD0iMjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0iYCR7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nVXJsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGBkYXRhOmltYWdlL3BuZztiYXNlNjQsICR7aW1nVXJsfWAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVxdWlyZSgnQC9hc3NldHMvaW1nLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAgIH1gIgogICAgICAgICAgICAgICAgICAgICAgICAgIDp3aWR0aD0iMjAiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8cGRmIHYtaWY9InNyYyIgOnBhZ2U9InBhZ2UiIDpzcmM9InNyYyIvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvYi1jb2w+CiAgICAgIDwvYi1yb3c+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPCEtLSBDT01NSVNTSU9OUyBNT0RBTCBNYXhzdXMga29taXNzaXlhIHR1cmkgLS0+CiAgPGItbW9kYWwKICAgICAgdi1tb2RlbD0iY29tbWlzc2lvbnNNb2RhbCIKICAgICAgOnRpdGxlPSJgJHskdCgnc3VibW9kdWxlcy5jb21taXNzaW9uLnRpdGxlJyl9YCIKICAgICAgc2Nyb2xsYWJsZQogICAgICBzaXplPSJtZCIKICA+CiAgICA8QmFzZU11bHRpc2VsZWN0V2l0aFZhbGlkYXRpb24KICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uVHlwZUlkIgogICAgICAgIDpjdXN0b20tbGFiZWw9ImN1c3RvbUxhYmVsQ29tbWlzc2lvblR5cGVzIgogICAgICAgIDpsYWJlbD0iJHQoJ3N1Ym1vZHVsZXMuY29tbWlzc2lvbi5zcGVjaWFsX2NvbW1pc3Npb25fdHlwZS50aXRsZScpIgogICAgICAgIDptYXgtaGVpZ2h0PSI2MDAiCiAgICAgICAgOm9wdGlvbnM9ImNvbW1pc3Npb25UeXBlcy5tYXAoZSA9PiBlLmlkKSIKICAgICAgICA6c2hvdy1sYWJlbHM9ImZhbHNlIgogICAgICAgIGNsYXNzPSJyZXF1aXJlZCIKICAgICAgICBsYWJlbC1vbi10b3AKICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYm90dG9tIgogICAgICAgIHBsYWNlaG9sZGVyPSIiCiAgICAgICAgcnVsZXM9InJlcXVpcmVkIgogICAgLz4KCiAgICA8QmFzZU11bHRpc2VsZWN0V2l0aFZhbGlkYXRpb24KICAgICAgICB2LWlmPSJ0aGlzLmN1cnJlbnREb2Muc3RhdHVzID09PSAnU0VORF9TSUdOJyIKICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uTWFuYWdlbWVudElkIgogICAgICAgIDpjdXN0b20tbGFiZWw9ImN1c3RvbUxhYmVsQ29tbWlzc2lvbk1hbmFnZW1lbnRUeXBlcyIKICAgICAgICA6bGFiZWw9IiR0KCdjb2x1bW4uZGlyZWN0b3InKSIKICAgICAgICA6bWF4LWhlaWdodD0iNjAwIgogICAgICAgIDpvcHRpb25zPSJjb21taXNzaW9uTWFuYWdlbWVudExpc3QubWFwKGUgPT4gZS5pZCkiCiAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICBjbGFzcz0icmVxdWlyZWQiCiAgICAgICAgbGFiZWwtb24tdG9wCiAgICAgICAgb3Blbi1kaXJlY3Rpb249ImJvdHRvbSIKICAgICAgICBwbGFjZWhvbGRlcj0iIgogICAgICAgIHJ1bGVzPSJyZXF1aXJlZCIKICAgIC8+CgogICAgPGItZm9ybS10ZXh0YXJlYQogICAgICAgIHYtbW9kZWw9ImNvbW1pc3Npb25Db21tZW50IgogICAgICAgIDpwbGFjZWhvbGRlcj0iJHQoJ3N1Ym1vZHVsZXMuZG9jLnN1bW1hcnknKSIKICAgICAgICBjbGFzcz0ibXQtMyIKICAgICAgICByb3dzPSI1IgogICAgPjwvYi1mb3JtLXRleHRhcmVhPgoKICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPgogICAgICA8Yi1idXR0b24KICAgICAgICAgIHZhcmlhbnQ9InN1Y2Nlc3MiCiAgICAgICAgICBAY2xpY2s9Im9wZW5TaWduYXR1cmVNb2RhbEZvckNvbW1pc3Npb24iCiAgICAgID4KICAgICAgICA8Yi1vdmVybGF5CiAgICAgICAgICAgIDpvcGFjaXR5PSIwLjEiCiAgICAgICAgICAgIDpzaG93PSJjb21taXNzaW9uTW9kYWxMb2FkZXIiCiAgICAgICAgICAgIHJvdW5kZWQ9InNtIgogICAgICAgID4KICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLmNvbnRpbnVlIikgfX0KICAgICAgICA8L2Itb3ZlcmxheT4KICAgICAgPC9iLWJ1dHRvbj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLW1vZGFsPgoKICA8IS0tIENPTU1JU1NJT05TIE1PREFMIEtvbWlzc2l5YSByYWhiYXIgbGlzdGkgLS0+CiAgPGItbW9kYWwKICAgICAgdi1tb2RlbD0iY29tbWlzc2lvbk1hbmFnZW1lbnRNb2RhbCIKICAgICAgOnRpdGxlPSJgJHskdCgnc3VibW9kdWxlcy5jb21taXNzaW9uLnRpdGxlJyl9YCIKICAgICAgc2Nyb2xsYWJsZQogICAgICBzaXplPSJtZCIKICA+CiAgICA8QmFzZU11bHRpc2VsZWN0V2l0aFZhbGlkYXRpb24KICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uTWFuYWdlbWVudElkIgogICAgICAgIDpjdXN0b20tbGFiZWw9ImN1c3RvbUxhYmVsQ29tbWlzc2lvbk1hbmFnZW1lbnRUeXBlcyIKICAgICAgICA6bGFiZWw9IiR0KCdjb2x1bW4uZGlyZWN0b3InKSIKICAgICAgICA6bWF4LWhlaWdodD0iNjAwIgogICAgICAgIDpvcHRpb25zPSJjb21taXNzaW9uTWFuYWdlbWVudExpc3QubWFwKGUgPT4gZS5pZCkiCiAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICBjbGFzcz0icmVxdWlyZWQiCiAgICAgICAgbGFiZWwtb24tdG9wCiAgICAgICAgb3Blbi1kaXJlY3Rpb249ImJvdHRvbSIKICAgICAgICBwbGFjZWhvbGRlcj0iIgogICAgICAgIHJ1bGVzPSJyZXF1aXJlZCIKICAgID48L0Jhc2VNdWx0aXNlbGVjdFdpdGhWYWxpZGF0aW9uPgoKICAgIDxiLWZvcm0tdGV4dGFyZWEKICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uTWFuYWdlbWVudENvbW1lbnQiCiAgICAgICAgOnBsYWNlaG9sZGVyPSIkdCgnc3VibW9kdWxlcy5kb2Muc3VtbWFyeScpIgogICAgICAgIGNsYXNzPSJtdC0zIgogICAgICAgIHJvd3M9IjUiCiAgICA+PC9iLWZvcm0tdGV4dGFyZWE+CgogICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI+CiAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgdmFyaWFudD0ic3VjY2VzcyIKICAgICAgICAgIEBjbGljaz0ib3BlblNpZ25hdHVyZU1vZGFsRm9yQ29tbWlzc2lvbk1hbmFnZW1lbnQiCiAgICAgID4KICAgICAgICA8Yi1vdmVybGF5CiAgICAgICAgICAgIDpvcGFjaXR5PSIwLjEiCiAgICAgICAgICAgIDpzaG93PSJjb21taXNzaW9uTW9kYWxMb2FkZXIiCiAgICAgICAgICAgIHJvdW5kZWQ9InNtIgogICAgICAgID4KICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLmNvbnRpbnVlIikgfX0KICAgICAgICA8L2Itb3ZlcmxheT4KICAgICAgPC9iLWJ1dHRvbj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLW1vZGFsPgoKICA8IS0tIENPTU1JU1NJT05TIE1PREFMIEZPUiBDb21tZW50LS0+CiAgPGItbW9kYWwKICAgICAgdi1tb2RlbD0iY29tbWlzc2lvbnNNb2RhbEZvckNvbW1lbnQiCiAgICAgIDp0aXRsZT0iYCR7JHQoJ3N1Ym1vZHVsZXMuY29tbWlzc2lvbi5zaWduX2RlY2lzaW9uJyl9YCIKICAgICAgc2Nyb2xsYWJsZQogICAgICBzaXplPSJtZCIKICA+CiAgICA8ZGl2PgogICAgICB7eyAkdCgnc3VibW9kdWxlcy5kb2Muc3VtbWFyeScpIH19CiAgICA8L2Rpdj4KICAgIDxiLWZvcm0tdGV4dGFyZWEKICAgICAgICB2LW1vZGVsPSJjb21tZW50Rm9yQ29tbWlzc2lvbiIKICAgICAgICA6cGxhY2Vob2xkZXI9IiR0KCdzdWJtb2R1bGVzLmRvYy5zdW1tYXJ5JykiCiAgICAgICAgY2xhc3M9Im10LTMiCiAgICAgICAgcm93cz0iNSIKICAgIC8+CgogICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI+CiAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIiBAY2xpY2s9Im9wZW5TaWduYXR1cmVNb2RhbEZvckNvbW1pc3Npb25Gb3JDb21tZW50Ij4KICAgICAgICA8Yi1vdmVybGF5IDpvcGFjaXR5PSIwLjEiIDpzaG93PSJjb21taXNzaW9uTW9kYWxMb2FkZXIiIHJvdW5kZWQ9InNtIj4KICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLmNvbnRpbnVlIikgfX0KICAgICAgICA8L2Itb3ZlcmxheT4KICAgICAgPC9iLWJ1dHRvbj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLW1vZGFsPgogIDxiLW1vZGFsCiAgICAgIHYtbW9kZWw9InNpZ25hdHVyZU1vZGFsIgogICAgICA6dGl0bGU9ImAkeyR0KCdzdWJtb2R1bGVzLnJlcG9ydHMubWFrZV9zaWduJyl9YCIKICAgICAgaGlkZS1mb290ZXIKICAgICAgc2Nyb2xsYWJsZQogICAgICBzaXplPSJsZyIKICA+CiAgICA8Yi1vdmVybGF5CiAgICAgICAgOm9wYWNpdHk9IjAuMSIKICAgICAgICA6c2hvdz0ibG9hZGVyU2lnbiIKICAgICAgICByb3VuZGVkPSJzbSIKICAgID4KICAgICAgPFNpZ25LZXlzCiAgICAgICAgICA6ZGF0YVRvU2lnbj0iY3VycmVudERvYyIKICAgICAgICAgIEBzaWduPSJzaWduU3VjY2VzcyIKICAgICAgLz4KICAgIDwvYi1vdmVybGF5PgogIDwvYi1tb2RhbD4KPC9kaXY+Cg=="},null]}