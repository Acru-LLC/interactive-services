{"remainingRequest":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js??ref--12-0!D:\\ACRU\\my-fairtech\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ACRU\\my-fairtech\\node_modules\\babel-loader\\lib\\index.js!D:\\ACRU\\my-fairtech\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ACRU\\my-fairtech\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\my-fairtech\\src\\modules\\product\\FAQ\\index.vue?vue&type=template&id=4304c6de&scoped=true","dependencies":[{"path":"D:\\ACRU\\my-fairtech\\src\\modules\\product\\FAQ\\index.vue","mtime":1719222285804},{"path":"D:\\ACRU\\my-fairtech\\babel.config.js","mtime":1719222278287},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719222280288},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719222280288},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1719222284617},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\babel-loader\\lib\\index.js","mtime":1719222279696},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1719222284894},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719222280288},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\vue-loader\\lib\\index.js","mtime":1719222284893}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}