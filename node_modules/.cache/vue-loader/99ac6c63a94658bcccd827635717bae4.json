{"remainingRequest":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\interactive-services\\src\\shared\\views\\components\\commission\\document\\CreateApplicationByDirector.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\ACRU\\interactive-services\\src\\shared\\views\\components\\commission\\document\\CreateApplicationByDirector.vue","mtime":1709020148570},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgRnJvbVRvRW1wbG95ZWVzIGZyb20gJy4vRnJvbVRvRW1wbG95ZWVzLnZ1ZScNCmNvbnN0IE1BSU5fQVBJX1VSTCA9ICdiZWZvcmUtY29tbWlzc2lvbi9hcHBsaWNhdGlvbicNCi8qDQoqIFlPVSBNVVNUIFNFTkQge3sgTUFJTl9BUElfVVJMIH19IFRPIENSVURfU0VSVklDRSAqLw0KaW1wb3J0IGNydWRBbmRMaXN0c1NlcnZpY2UgZnJvbSAiQC9zaGFyZWQvc2VydmljZXMvY3J1ZF9hbmRfbGlzdC5zZXJ2aWNlIg0KDQpleHBvcnQgZGVmYXVsdCB7DQogICAgbmFtZTogIkNyZWF0ZUFwcGxpY2F0aW9uQnlEaXJlY3RvciIsDQogICAgcHJvcHM6IHsNCiAgICAgICAgY3VzdG9tSXNNb2RlQ3JlYXRlOiB7DQogICAgICAgICAgICB0eXBlOiBCb29sZWFuLA0KICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UNCiAgICAgICAgfQ0KICAgIH0sDQogICAgLyoNCiAgICAqIENPTVBPTkVOVFMgKi8NCiAgICBjb21wb25lbnRzOiB7IEZyb21Ub0VtcGxveWVlcyB9LA0KICAgIC8qDQogICAgKiBEQVRBICovDQogICAgZGF0YSAoKSB7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgICBoYXNOZXh0UGFnZUNvbnRyYWN0b3JzOiBmYWxzZSwNCiAgICAgICAgICAgIGVtcGxveWVlczogW10sDQogICAgICAgICAgICBjb250cmFjdG9yczogW10sDQogICAgICAgICAgICBkb2N1bWVudF9zdGF0dXM6IFtdLA0KICAgICAgICAgICAgYXBwZWFsX3R5cGU6IFtdLA0KICAgICAgICAgICAgY29tbWlzc2lvbl9wb3NpdGlvbjogW10sDQogICAgICAgICAgICByZWNlcHRpb25fbWV0aG9kOiBbXSwNCiAgICAgICAgICAgIGJhc2VfdHlwZTogW10sDQogICAgICAgICAgICBpc0xvYWRpbmdDb250cmFjdG9yczogZmFsc2UsDQogICAgICAgICAgICBjb250cmFjdG9yU2VhcmNoUGF5bG9hZDoge30sDQogICAgICAgICAgICBjb250cmFjdG9yQ3JlYXRlTW9kYWw6IGZhbHNlLA0KICAgICAgICAgICAgYWRkQ29udHJhY3Rvck1vZGFsOiBmYWxzZSwNCiAgICAgICAgICAgIGN1cnJlbnRBcHBsaWNhdGlvblNlbmRlcklkOiBudWxsLA0KICAgICAgICAgICAgZWRpdGluZ0l0ZW06IHt9LA0KICAgICAgICAgICAgc3RhdHVzZXM6IFtdDQogICAgICAgIH0NCiAgICB9LA0KICAgIC8qDQogICAgKiBDT01QVVRFRCAqLw0KICAgIGNvbXB1dGVkOiB7DQogICAgICAgIGlzTW9kZUNyZWF0ZSAoKSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21Jc01vZGVDcmVhdGUgPyB0aGlzLmN1c3RvbUlzTW9kZUNyZWF0ZSA6IHRoaXMuJHJvdXRlLm5hbWUgPT09ICdDcmVhdGVBcHBsaWNhdGlvbkJ5RGlyZWN0b3InDQogICAgICAgIH0sDQogICAgICAgIGNvbXB1dGVkT2JzZXJ2ZXIgKCkgew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnMub2JzZXJ2ZXINCiAgICAgICAgfQ0KICAgIH0sDQogICAgLyoNCiAgICAqIE1FVEhPRFMgKi8NCiAgICBtZXRob2RzOiB7DQogICAgICAgIGFzc2lnbm1lbnRzQ2hhbmdlZCAoKSB7DQogICAgICAgICAgICB0aGlzLmVkaXRpbmdJdGVtLmFzc2lnbm1lbnRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLiRyZWZzLmZyb21Ub0VtcGxveWVlc1JlZi5hc3NpZ25tZW50KSkNCiAgICAgICAgfSwNCiAgICAgICAgZW1wbG95ZWVTZWxlY3RlZCAoZW1wbG95ZWVJZCkgew0KICAgICAgICAgICAgbGV0IHRtcEVtcGxveWVlID0gdGhpcy5lbXBsb3llZXMuZmluZChlbCA9PiBlbC5pZCA9PSBlbXBsb3llZUlkKQ0KICAgICAgICAgICAgLyogdGhpcy5lbXBsb3llZXMuZm9yRWFjaCh0bXAgPT4gew0KICAgICAgICAgICAgICBpZiAodG1wLmlkID09IGVtcGxveWVlSWQpIHsNCiAgICAgICAgICAgICAgICB0bXBFbXBsb3llZSA9IHRtcA0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KSAqLw0KICAgICAgICAgICAgaWYgKHRtcEVtcGxveWVlKSB7DQogICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nSXRlbS5kZXBhcnRtZW50SWQgPSB0bXBFbXBsb3llZS5kZXBhcnRtZW50SWQNCiAgICAgICAgICAgICAgICBsZXQgZmlyc3RMZXR0ZXIgPSB0bXBFbXBsb3llZS5maXJzdE5hbWUuc3Vic3RyaW5nKDAsIDEpDQogICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nSXRlbS51c2VybmFtZSA9IChmaXJzdExldHRlciArICcuJyArIHRtcEVtcGxveWVlLmxhc3ROYW1lKS50b0xvd2VyQ2FzZSgpDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGN1c3RvbUxhYmVsUmVjZXB0aW9uTWV0aG9kIChvcHQpIHsNCiAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHRoaXMucmVjZXB0aW9uX21ldGhvZC5maW5kKGUgPT4gZS5pZCA9PSBvcHQpOw0KICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0TmFtZSh7DQogICAgICAgICAgICAgICAgICAgIG5hbWVSdTogc2VsZWN0ZWQubmFtZVJ1LA0KICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkLm5hbWVMdCwNCiAgICAgICAgICAgICAgICAgICAgbmFtZVV6OiBzZWxlY3RlZC5uYW1lVXosDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgfWANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBgYDsNCiAgICAgICAgfSwNCiAgICAgICAgY3VzdG9tTGFiZWxCYXNlVHlwZSAob3B0KSB7DQogICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmJhc2VfdHlwZS5maW5kKGUgPT4gZS5pZCA9PSBvcHQpOw0KICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0TmFtZSh7DQogICAgICAgICAgICAgICAgICAgIG5hbWVSdTogc2VsZWN0ZWQubmFtZVJ1LA0KICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkLm5hbWVMdCwNCiAgICAgICAgICAgICAgICAgICAgbmFtZVV6OiBzZWxlY3RlZC5uYW1lVXosDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgfWANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBgYDsNCiAgICAgICAgfSwNCiAgICAgICAgY3VzdG9tTGFiZWxBcHBlYWxUeXBlIChvcHQpIHsNCiAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHRoaXMuYXBwZWFsX3R5cGUuZmluZChlID0+IGUuaWQgPT0gb3B0KTsNCiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmdldE5hbWUoew0KICAgICAgICAgICAgICAgICAgICBuYW1lUnU6IHNlbGVjdGVkLm5hbWVSdSwNCiAgICAgICAgICAgICAgICAgICAgbmFtZUx0OiBzZWxlY3RlZC5uYW1lTHQsDQogICAgICAgICAgICAgICAgICAgIG5hbWVVejogc2VsZWN0ZWQubmFtZVV6LA0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgIH1gDQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gYGA7DQogICAgICAgIH0sDQogICAgICAgIGN1c3RvbUxhYmVsY29tbWlzc2lvblBvc2l0aW9uIChvcHQpIHsNCiAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHRoaXMuY29tbWlzc2lvbl9wb3NpdGlvbi5maW5kKGUgPT4gZS5pZCA9PSBvcHQpOw0KICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0TmFtZSh7DQogICAgICAgICAgICAgICAgICAgIG5hbWVSdTogc2VsZWN0ZWQubmFtZVJ1LA0KICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkLm5hbWVMdCwNCiAgICAgICAgICAgICAgICAgICAgbmFtZVV6OiBzZWxlY3RlZC5uYW1lVXosDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgfWANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBgYDsNCiAgICAgICAgfSwNCiAgICAgICAgY3VzdG9tTGFiZWxEb2N1bWVudFN0YXR1cyAob3B0KSB7DQogICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmRvY3VtZW50X3N0YXR1cy5maW5kKGUgPT4gZS5pZCA9PSBvcHQpOw0KICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0TmFtZSh7DQogICAgICAgICAgICAgICAgICAgIG5hbWVSdTogc2VsZWN0ZWQubmFtZVJ1LA0KICAgICAgICAgICAgICAgICAgICBuYW1lTHQ6IHNlbGVjdGVkLm5hbWVMdCwNCiAgICAgICAgICAgICAgICAgICAgbmFtZVV6OiBzZWxlY3RlZC5uYW1lVXosDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgfWANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBgYDsNCiAgICAgICAgfSwNCiAgICAgICAgYXN5bmMgZGVib3VuY2VTZWFyY2hDb250cmFjdG9ycyAoc2VhcmNoVGV4dCkgew0KICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2UpOw0KICAgICAgICAgICAgdGhpcy5kZWJvdW5jZSA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hDb250cmFjdG9yc1dpdGhLZXl3b3JkKHNlYXJjaFRleHQpOw0KICAgICAgICAgICAgfSwgMTAwMCk7DQogICAgICAgIH0sDQogICAgICAgIGNvbnRyYWN0b3JSZWFjaGVkRW5kT2ZMaXN0IChlKSB7DQogICAgICAgICAgICBpZiAoZSAmJiAhdGhpcy5pc0xvYWRpbmdDb250cmFjdG9ycykgew0KICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hDb250cmFjdG9ycygpDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGZldGNoQ29udHJhY3RvcnNXaXRoS2V5d29yZCAoa2V5d29yZCwgbWFrZUZpcnN0U2VsZWN0ZWQgPSBmYWxzZSkgew0KICAgICAgICAgICAgdGhpcy5jb250cmFjdG9ycyA9IFtdDQogICAgICAgICAgICB0aGlzLmNvbnRyYWN0b3JTZWFyY2hQYXlsb2FkLnBhZ2UgPSAxDQogICAgICAgICAgICB0aGlzLmNvbnRyYWN0b3JTZWFyY2hQYXlsb2FkLmtleXdvcmQgPSBrZXl3b3JkID8ga2V5d29yZCA6ICcnDQogICAgICAgICAgICAvLyB0aGlzLmNvbnRyYWN0b3JTZWFyY2hQYXlsb2FkLnNvcnRCeSA9IFtdDQogICAgICAgICAgICAvLyB0aGlzLmNvbnRyYWN0b3JTZWFyY2hQYXlsb2FkLnNvcnRCeS5wdXNoKCdjcmVhdGVkJykNCiAgICAgICAgICAgIC8vIHRoaXMuY29udHJhY3RvclNlYXJjaFBheWxvYWQuc29ydERlc2MgPSBbXQ0KICAgICAgICAgICAgLy8gdGhpcy5jb250cmFjdG9yU2VhcmNoUGF5bG9hZC5zb3J0RGVzYy5wdXNoKGZhbHNlKQ0KICAgICAgICAgICAgdGhpcy5mZXRjaENvbnRyYWN0b3JzKG1ha2VGaXJzdFNlbGVjdGVkKQ0KICAgICAgICB9LA0KICAgICAgICBhc3luYyBmZXRjaENvbnRyYWN0b3JzIChtYWtlRmlyc3RTZWxlY3RlZCkgew0KICAgICAgICAgICAgdGhpcy5jb250cmFjdG9yU2VhcmNoUGF5bG9hZC5zb3J0QnkgPSBbXQ0KICAgICAgICAgICAgdGhpcy5jb250cmFjdG9yU2VhcmNoUGF5bG9hZC5zb3J0QnkucHVzaCgnY3JlYXRlZCcpDQogICAgICAgICAgICB0aGlzLmNvbnRyYWN0b3JTZWFyY2hQYXlsb2FkLnNvcnREZXNjID0gW10NCiAgICAgICAgICAgIHRoaXMuY29udHJhY3RvclNlYXJjaFBheWxvYWQuc29ydERlc2MucHVzaCh0cnVlKQ0KICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmdDb250cmFjdG9ycyA9IHRydWUNCiAgICAgICAgICAgIGF3YWl0IGNydWRBbmRMaXN0c1NlcnZpY2Uuc2VhcmNoTGlzdFdpdGhLZXl3b3JkKCdjb250cmFjdG9yJywgdGhpcy5jb250cmFjdG9yU2VhcmNoUGF5bG9hZCwgJ2J5LWNvbnRyYWN0b3InKQ0KICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJhY3RvcnMucHVzaCguLi5yZXMuZGF0YS5saXN0KQ0KICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc05leHRQYWdlQ29udHJhY3RvcnMgPSByZXMuZGF0YS50b3RhbCAvIHRoaXMuY29udHJhY3RvclNlYXJjaFBheWxvYWQuaXRlbXNQZXJQYWdlID4gdGhpcy5jb250cmFjdG9yU2VhcmNoUGF5bG9hZC5wYWdlDQogICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJhY3RvclNlYXJjaFBheWxvYWQucGFnZSArPSAxDQogICAgICAgICAgICAgICAgICAgIGlmIChtYWtlRmlyc3RTZWxlY3RlZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nSXRlbS5jb250cmFjdG9ySWQgPSB0aGlzLmNvbnRyYWN0b3JzLmxlbmd0aCA/IHRoaXMuY29udHJhY3RvcnNbMF0uaWQgOiBudWxsDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTW9kZUNyZWF0ZSAmJiB0aGlzLmVkaXRpbmdJdGVtLmNvbnRyYWN0b3JJZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyYWN0b3JGb3VuZCA9IHRoaXMuY29udHJhY3RvcnMuZmluZChlbCA9PiBlbC5pZCA9PSB0aGlzLmVkaXRpbmdJdGVtLmNvbnRyYWN0b3JJZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udHJhY3RvckZvdW5kICYmIHRoaXMuZWRpdGluZ0l0ZW0uY29udHJhY3RvckR0bykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJhY3RvcnMucHVzaCh0aGlzLmVkaXRpbmdJdGVtLmNvbnRyYWN0b3JEdG8pDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSkNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cmFjdG9ycyA9IFtdDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nQ29udHJhY3RvcnMgPSBmYWxzZQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgIH0sDQogICAgICAgIGN1c3RvbUxhYmVsRW1wbG95ZWVzIChvcHQpIHsNCiAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHRoaXMuZW1wbG95ZWVzLmZpbmQoZSA9PiBlLmlkID09IG9wdCk7DQogICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYCR7c2VsZWN0ZWQuZmlyc3ROYW1lfSAke3NlbGVjdGVkLmxhc3ROYW1lfSAke3NlbGVjdGVkLm1pZGRsZU5hbWUgPyBzZWxlY3RlZC5taWRkbGVOYW1lIDogJyd9YA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGBgOw0KICAgICAgICB9LA0KICAgICAgICBjdXN0b21MYWJlbEFkQ29udHJhY3RvciAob3B0KSB7DQogICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmNvbnRyYWN0b3JzLmZpbmQoZSA9PiBlLmlkID09IChvcHQuaWQgPyBvcHQuaWQgOiBvcHQpKTsNCiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBgJHtzZWxlY3RlZC5mdWxsTmFtZX1gDQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gYGA7DQogICAgICAgIH0sDQogICAgICAgIGN1c3RvbUxhYmVsQ29udHJhY3RvciAob3B0KSB7DQogICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmNvbnRyYWN0b3JzLmZpbmQoZSA9PiBlLmlkID09IG9wdCk7DQogICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYCR7c2VsZWN0ZWQuZnVsbE5hbWV9YA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGBgOw0KICAgICAgICB9LA0KICAgICAgICBuZXdSZWZDcmVhdGVkIChuZXdPcHRpb25zLCBuZXdJZCwgZm9ybU5hbWUpIHsNCiAgICAgICAgICAgIGlmIChmb3JtTmFtZSA9PSAnQ3JlYXRlRm9ybUNvbnRyYWN0b3InKSB7DQogICAgICAgICAgICAgICAgdGhpcy5jb250cmFjdG9ycyA9IG5ld09wdGlvbnMNCiAgICAgICAgICAgICAgICB0aGlzLmVkaXRpbmdJdGVtLmNvbnRyYWN0b3JJZCA9IG5ld0lkDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIHRyZWVDbG9zZWQgKHZlZU5hbWUpIHsNCiAgICAgICAgICAgIHRoaXMuY29tcHV0ZWRPYnNlcnZlci5yZWZzW3ZlZU5hbWVdLnZhbGlkYXRlKCk7DQogICAgICAgIH0sDQogICAgICAgIG5vcm1hbGl6ZXIgKG5vZGUpIHsNCiAgICAgICAgICAgIGlmICghbm9kZS5jaGlsZHJlbiB8fCBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlLmNoaWxkcmVuDQogICAgICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGUuaWQsDQogICAgICAgICAgICAgICAgICAgIGxhYmVsOiBub2RlLm5hbWUsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICBpZDogbm9kZS5pZCwNCiAgICAgICAgICAgICAgICBsYWJlbDogbm9kZS5uYW1lLA0KICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IG5vZGUuY2hpbGRyZW4gOiBbXSwNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgc2F2ZSAoKSB7DQogICAgICAgICAgICB0aGlzLmNvbXB1dGVkT2JzZXJ2ZXIudmFsaWRhdGUoKS50aGVuKHZhbGlkID0+IHsNCiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWRpdGluZ0l0ZW0uaWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNydWRBbmRMaXN0c1NlcnZpY2UudXBkYXRlKE1BSU5fQVBJX1VSTCwgdGhpcy5lZGl0aW5nSXRlbSkudGhlbihyZXMgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZWRPYnNlcnZlci5yZXNldCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIHt9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIuZ28oLTEpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdG9hc3QodGhpcy4kdCgnbWVzc2FnZXMuc2F2ZWRfc3VjY2Vzc2Z1bGx5JyksIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNydWRBbmRMaXN0c1NlcnZpY2UuY3JlYXRlKE1BSU5fQVBJX1VSTCwgdGhpcy5lZGl0aW5nSXRlbSkudGhlbihyZXMgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZWRPYnNlcnZlci5yZXNldCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIHt9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIuZ28oLTEpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdG9hc3QodGhpcy4kdCgnbWVzc2FnZXMuc2F2ZWRfc3VjY2Vzc2Z1bGx5JyksIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRvYXN0KHRoaXMuJHQoJ21lc3NhZ2VzLmZpbGxfcmVxdWlyZWRfZmllbGRzJyksIHsgdHlwZTogJ2Vycm9yJyB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgIH0sDQogICAgd2F0Y2g6IHsNCiAgICAgICAgJ2VkaXRpbmdJdGVtLnNlbmRlcklkJzogew0KICAgICAgICAgICAgaGFuZGxlciAobmV3VmFsLCBvbGRWYWwpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyYWN0b3JzLm1hcChlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGUuaWQgPT0gbmV3VmFsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBcHBsaWNhdGlvblNlbmRlcklkID0gZQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgfSwNCiAgICAvKg0KICAgICogQ1JFQVRFRCAqLw0KICAgIGFzeW5jIGNyZWF0ZWQgKCkgew0KICAgICAgICB0aGlzLmNvbnRyYWN0b3JTZWFyY2hQYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy52YXJfZGVmYXVsdF9zZWFyY2hfcGF5bG9hZCkNCiAgICAgICAgdGhpcy52YXJfZGVmYXVsdF9zZWFyY2hfcGF5bG9hZC5pdGVtc1BlclBhZ2UgPSA1MDANCiAgICAgICAgaWYgKHRoaXMuaXNNb2RlQ3JlYXRlKSB7DQogICAgICAgICAgICBhd2FpdCBjcnVkQW5kTGlzdHNTZXJ2aWNlLmdldEVtcHR5KE1BSU5fQVBJX1VSTCkNCiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4gew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRpbmdJdGVtID0gcmVzLmRhdGENCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSkNCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaENvbnRyYWN0b3JzKCkNCg0KICAgICAgICAgICAgYXdhaXQgY3J1ZEFuZExpc3RzU2VydmljZS5zZWFyY2hMaXN0V2l0aEtleXdvcmQoJy9lbXBsb3llZScsIHRoaXMudmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQsICdpbm5lcicsIHRydWUpDQogICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbXBsb3llZXMgPSByZXMuZGF0YS5saXN0DQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpDQogICAgICAgICAgICAgICAgfSkNCg0KICAgICAgICAgICAgYXdhaXQgY3J1ZEFuZExpc3RzU2VydmljZS5zZWFyY2hMaXN0KCdkaXJlY3RvcnkvYXBwbGljYXRpb24vYXBwZWFsLXR5cGUnLCB0aGlzLnZhcl9kZWZhdWx0X3NlYXJjaF9wYXlsb2FkLCBudWxsLCB0cnVlKQ0KICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZWFsX3R5cGUgPSByZXMuZGF0YS5saXN0DQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIGF3YWl0IGNydWRBbmRMaXN0c1NlcnZpY2Uuc2VhcmNoTGlzdCgnZGlyZWN0b3J5L2FwcGxpY2F0aW9uL2RvY3VtZW50LXN0YXR1cycsIHRoaXMudmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQsIG51bGwsIHRydWUpDQogICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudF9zdGF0dXMgPSByZXMuZGF0YS5saXN0DQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIGF3YWl0IGNydWRBbmRMaXN0c1NlcnZpY2Uuc2VhcmNoTGlzdCgnZGlyZWN0b3J5L2FwcGxpY2F0aW9uL3JlY2VwdGlvbi1tZXRob2QnLCB0aGlzLnZhcl9kZWZhdWx0X3NlYXJjaF9wYXlsb2FkLCBudWxsLCB0cnVlKQ0KICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZXB0aW9uX21ldGhvZCA9IHJlcy5kYXRhLmxpc3QNCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSkNCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgYXdhaXQgY3J1ZEFuZExpc3RzU2VydmljZS5zZWFyY2hMaXN0KCdkaXJlY3RvcnkvYXBwbGljYXRpb24vYmFzZScsIHRoaXMudmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQsIG51bGwsIHRydWUpDQogICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3R5cGUgPSByZXMuZGF0YS5saXN0DQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIGF3YWl0IGNydWRBbmRMaXN0c1NlcnZpY2Uuc2VhcmNoTGlzdCgnZGlyZWN0b3J5L2NvbW1pc3Npb24vY29tbWlzc2lvbi1wb3NpdGlvbicsIHRoaXMudmFyX2RlZmF1bHRfc2VhcmNoX3BheWxvYWQsIG51bGwsIHRydWUpDQogICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21taXNzaW9uX3Bvc2l0aW9uID0gcmVzLmRhdGEubGlzdA0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4gew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBhd2FpdCBjcnVkQW5kTGlzdHNTZXJ2aWNlLmdldEJ5SWQoTUFJTl9BUElfVVJMLCB0aGlzLiRyb3V0ZS5wYXJhbXMuaWQsIGZhbHNlKQ0KICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdGluZ0l0ZW0gPSByZXMuZGF0YQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4gew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgIH0NCg0KICAgIH0NCn0NCg=="},null]}