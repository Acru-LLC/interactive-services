{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\commission\\create\\CreateOrUpdateDirector.vue?vue&type=style&index=0&id=4e1a21a4&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\commission\\create\\CreateOrUpdateDirector.vue","mtime":1674799497660},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1667355356565},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5jb2wtZm9ybS1sYWJlbCB7DQogICAgcGFkZGluZy10b3A6IDA7DQp9DQoNCnVsIHsNCiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7DQp9DQo="},{"version":3,"sources":["CreateOrUpdateDirector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;;AAEA;AACA;AACA","file":"CreateOrUpdateDirector.vue","sourceRoot":"src/modules/commission/create","sourcesContent":["<template>\r\n    <base-create-or-update-wrapper\r\n        @save=\"save\"\r\n        has-save-suspend\r\n        :custom-title=\"isModeCreate ? $t('actions.create') : $t('actions.update')\"\r\n    >\r\n        <CreateApplicationByDirector ref=\"formApplicationByDirector\"></CreateApplicationByDirector>\r\n    </base-create-or-update-wrapper>\r\n</template>\r\n<script>\r\nimport CreateApplicationByDirector from \"@/shared/views/components/commission/document/CreateApplicationByDirector\";\r\n\r\nconst MAIN_API_URL = 'before-commission/application'\r\n/*\r\n* YOU MUST SEND {{ MAIN_API_URL }} TO CRUD_SERVICE */\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\n\r\nexport default {\r\n    name: \"CreateOrUpdateDirector\",\r\n    /*\r\n    * COMPONENTS */\r\n    components: {\r\n        CreateApplicationByDirector\r\n    },\r\n    /*\r\n    * DATA */\r\n    data () {\r\n        return {}\r\n    },\r\n    /*\r\n    * COMPUTED */\r\n    computed: {\r\n        isModeCreate () {\r\n            return this.$route.name === 'CreateApplicationByDirector'\r\n        },\r\n        computedObserver () {\r\n            return this.$refs.formApplicationByDirector.$refs.observer\r\n        }\r\n    },\r\n    /*\r\n    * METHODS */\r\n    methods: {\r\n        hasProjectOwner() {\r\n            if (this.$refs.formApplicationByDirector.editingItem.assignments) {\r\n                let foundPOwner = false\r\n                loop1:\r\n                    for (let i = 0; i < this.$refs.formApplicationByDirector.editingItem.assignments.length; i++) {\r\n                        for (let j = 0; j < this.$refs.formApplicationByDirector.editingItem.assignments[i].toEmployees.length; j++) {\r\n                            if (this.$refs.formApplicationByDirector.editingItem.assignments[i].toEmployees[j].isProjectOwner) {\r\n                                foundPOwner = true\r\n                                break loop1;  // breaks out of loop2 and loop1\r\n                            }\r\n                        }\r\n                    }\r\n                return foundPOwner\r\n            } else {\r\n                return false\r\n            }\r\n        },\r\n        treeClosed (veeName) {\r\n            this.computedObserver.refs[veeName].validate();\r\n        },\r\n        normalizer (node) {\r\n            if (!node.children || node.children.length === 0) {\r\n                delete node.children\r\n                return {\r\n                    id: node.id,\r\n                    label: node.name,\r\n                }\r\n            }\r\n            return {\r\n                id: node.id,\r\n                label: node.name,\r\n                children: node.children && node.children.length > 0 ? node.children : [],\r\n            }\r\n        },\r\n        getBase64 (file) {\r\n            return new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                reader.onload = () => resolve(reader.result);\r\n                reader.onerror = error => reject(error);\r\n            });\r\n        },\r\n        async returnBase64FilePromises () {\r\n            if (this.$refs.formApplicationByDirector.editingItem.applicationFiles) {\r\n                let promises = await this.$refs.formApplicationByDirector.editingItem.applicationFiles.map(async f => {\r\n                    if (f.file.dataURL) {\r\n                        return f.file.dataURL\r\n                    } else {\r\n                        let res = await this.getBase64(f.file)\r\n                        return res\r\n                    }\r\n                })\r\n                return promises\r\n            }\r\n            return []\r\n        },\r\n        async save () {\r\n            this.computedObserver.validate().then(async valid => {\r\n                if (valid && this.hasProjectOwner()) {\r\n                    this.$refs.formApplicationByDirector.editingItem.type = 'BY_DIRECTOR'\r\n                    if (this.$refs.formApplicationByDirector.editingItem.id) {\r\n                        crudAndListsService.update(MAIN_API_URL, this.$refs.formApplicationByDirector.editingItem).then(res => {\r\n                            this.computedObserver.reset()\r\n                            this.$refs.formApplicationByDirector.editingItem = Object.assign({}, {});\r\n                            this.$router.go(-1)\r\n                            this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n                        })\r\n                    } else {\r\n                        /* let vm = this\r\n                        let base64PriceFiles = []\r\n                        if (this.$refs.formApplicationByDirector.editingItem.applicationFiles) {\r\n                          await this.$refs.formApplicationByDirector.editingItem.applicationFiles.forEach( async f => {\r\n                            if (f.file.dataURL) {\r\n                              base64PriceFiles.push( f.file.dataURL )\r\n                            } else {\r\n                              let res = await this.getBase64( f.file )\r\n                              base64PriceFiles.push( res )\r\n                            }\r\n                          } )\r\n                        }\r\n        \r\n                        this.$refs.formApplicationByDirector.editingItem.applicationFiles = base64PriceFiles */\r\n\r\n                        let promises = await this.returnBase64FilePromises()\r\n                        Promise.all(promises).then(results => {\r\n                            this.$refs.formApplicationByDirector.editingItem.applicationFiles = results\r\n\r\n                            if (this.$refs.formApplicationByDirector.editingItem.assignments) {\r\n                                let participants = this.$refs.formApplicationByDirector.editingItem.assignments\r\n                                this.$refs.formApplicationByDirector.editingItem.assignmentParticipantList = participants.map(el => {\r\n                                    return {\r\n                                        \"dateOfCreated\": el.dateOfCreated,\r\n                                        \"fromDepartmentId\": el.fromEmployee.departmentId,\r\n                                        \"fromEmployeeId\": el.fromEmployee.employeeId,\r\n                                        \"fromPositionId\": el.fromEmployee.positionId,\r\n                                        \"fromUserId\": el.fromEmployee.id,\r\n                                        \"resolution\": \"\",\r\n                                        \"sendingAssignmentParticipantList\": el.toEmployees.map(toEl => {\r\n                                            return {\r\n                                                \"mailingPurposeId\": toEl.mailingPurposeId,\r\n                                                \"processId\": el.processId,\r\n                                                \"toDepartmentId\": toEl.toEmployee.departmentId,\r\n                                                \"toEmployeeId\": toEl.toEmployee.employeeId,\r\n                                                \"toPositionId\": toEl.toEmployee.positionId,\r\n                                                \"toUserId\": toEl.toEmployee.id,\r\n                                                \"isProjectOwner\": toEl.isProjectOwner\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                })\r\n                                // let objEml = this.$refs.formApplicationByDirector.editingItem.assignments\r\n                                // for (let i = 0; i < objEml.length; i++) {\r\n\r\n                                //   if (i !== 0) {\r\n                                //     this.$refs.formApplicationByDirector.editingItem.applicationMembersDtos.push( {\r\n                                //       fromEmployeeId: objEml[i - 1].employeeId,\r\n                                //       toEmployeeId: objEml[i].employeeId,\r\n\r\n                                //     } )\r\n                                //   } else {\r\n                                //     this.$refs.formApplicationByDirector.editingItem.applicationMembersDtos.push( {\r\n                                //       fromEmployeeId: null,\r\n                                //       toEmployeeId: objEml[i].employeeId,\r\n                                //     } )\r\n                                //   }\r\n                                // }\r\n                                // this.$refs.formApplicationByDirector.editingItem.assignments = null\r\n                            }\r\n                            // let old_obj = {\r\n                            //   fileName: 'test',\r\n                            //   regNumber: this.$refs.formApplicationByDirector.editingItem.numberOfIncomingDocument,\r\n                            //   date: this.$refs.formApplicationByDirector.editingItem.dateOfIncomingDocument,\r\n                            // }\r\n                            // let letterId = null\r\n                            // await crudAndListsService.getLetterId( old_obj ).then( res => {\r\n                            //   letterId = res.data.id\r\n                            // } )\r\n                            // this.$refs.formApplicationByDirector.editingItem.legalId = letterId\r\n\r\n                            crudAndListsService.create(MAIN_API_URL, this.$refs.formApplicationByDirector.editingItem, null, true).then(res => {\r\n                                this.computedObserver.reset()\r\n                                this.$refs.formApplicationByDirector.editingItem = Object.assign({}, {});\r\n                                this.$router.go(-1)\r\n                                this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n                            })\r\n                        })\r\n                    }\r\n                } else {\r\n                    this.$toast(this.$t('messages.fill_required_fields'), { type: 'error' });\r\n                }\r\n            }\r\n            )\r\n                ;\r\n        }\r\n    },\r\n    /*\r\n    * CREATED */\r\n    async created () {\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.col-form-label {\r\n    padding-top: 0;\r\n}\r\n\r\nul {\r\n    list-style-type: none;\r\n}\r\n</style>\r\n"]}]}