{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\projects\\projects-grid.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\projects\\projects-grid.vue","mtime":1667352074514},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1667355356565},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmhvdmVyY2FyZDpob3ZlciB7DQogIGJveC1zaGFkb3c6IDAgM3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuMTYpLCAwIDNweCA2cHggcmdiYSgwLCAwLCAwLCAwLjIzKTsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBiYWNrZ3JvdW5kOiAjZGZmMGZjOw0KfQ0KDQouaG92ZXJjYXJkIHsNCiAgYmFja2dyb3VuZDogI2YyZjlmZDsNCiAgYm94LXNoYWRvdzogMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xNiksIDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMjMpDQp9DQoNCi5iZ0ltYWdlIHsNCiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCIuLi8uLi9hc3NldHMvcHJvamVjdHMvYmcuanBnIik7DQogIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7DQogIGJhY2tncm91bmQtc2l6ZTogY292ZXI7DQogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsNCn0NCg=="},{"version":3,"sources":["projects-grid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAy5CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"projects-grid.vue","sourceRoot":"src/modules/projects","sourcesContent":["<script>\r\n// import Layout from \"@/router/layouts/main\";\r\nimport {cnfDoc, replaceDate, showMsgSuccess, splitLargeText} from \"@/helper\";\r\nimport SignKeys from \"../../modules/letter/SignKeys\";\r\nimport PageHeader from \"@/components/page-header\";\r\nimport appConfig from \"@/app.config\";\r\nimport List from \"@/modules/projects/projects-list\";\r\nimport Create from \"@/modules/projects/create\";\r\n\r\nimport Overview from \"@/modules/projects/overview\";\r\nimport Tasks from \"@/modules/projects/tasks\";\r\n\r\nimport projectService from \"@/shared/services/projectService\";\r\nimport LetterService from \"../letter/letterService\";\r\nimport Service from \"../letter/letterService\";\r\n/**\r\n * Projects-grid component\r\n */\r\nimport Comments from \"@/modules/projects/comments\";\r\nimport i18n from \"@/i18n\";\r\nimport crudAndListsService from '@/shared/services/crud_and_list.service'\r\nimport ProjectListButtons from \"./project-list-buttons\";\r\n\r\nexport default {\r\n  page: {\r\n    title: i18n.t(\"proj\"),\r\n    meta: [\r\n      {\r\n        name: \"description\",\r\n        content: appConfig.description,\r\n      },\r\n    ],\r\n  },\r\n  components: {\r\n    List,\r\n    Tasks,\r\n    Create,\r\n    // Layout,\r\n    Overview,\r\n    Comments,\r\n    SignKeys,\r\n    PageHeader,\r\n    ProjectListButtons,\r\n  },\r\n  data() {\r\n    return {\r\n      rejectedLoader: false,\r\n      isRejectedModal: false,\r\n      rejectedSeeLoader: false,\r\n      isRejectedSeeModal: false,\r\n      signatureSeeModal: false,\r\n      reasonRejectedSee: \"\",\r\n      quorumLoader: false,\r\n      isQuorumModal: false,\r\n      quorumDate: null,\r\n      reasonRejected: \"\",\r\n      selectedTrItem: {},\r\n      signatureModal: false,\r\n      mailingPurposeId: null,\r\n      mailingPurposes: [],\r\n      commissionTypeId: null,\r\n      commissionComment: '',\r\n      commissionModalLoader: false,\r\n      commissionTypes: [],\r\n      currentProject: null,\r\n      commissionsModal: false,\r\n      totalDeadline: 0,\r\n      totalFinished: 0,\r\n      totalCreated: 0,\r\n      selected: \"\",\r\n      currentProj: {},\r\n      loading: false,\r\n      replaceDate: replaceDate,\r\n      searchValue: \"\",\r\n      total: 0,\r\n      projectData: [],\r\n      title: this.$t(\"proj\"),\r\n      items: [\r\n        {\r\n          text: this.$t(\"menu\"),\r\n          href: \"/\",\r\n        },\r\n        {\r\n          text: this.$t(\"proj\"),\r\n          active: true,\r\n        },\r\n      ],\r\n      itemsPerPage: 12,\r\n      page: 1,\r\n    };\r\n  },\r\n  computed: {\r\n    params() {\r\n      return {\r\n        pg: {\r\n          itemsPerPage: this.itemsPerPage,\r\n          page: this.page - 1,\r\n        },\r\n        search: this.searchValue,\r\n      };\r\n    },\r\n    projectType() {\r\n      return this.$route.name === 'CommissionProjects' ? 'COMMISSION' : 'BEFORE_COMMISSION'\r\n    },\r\n    isCommission() {\r\n      return this.projectType === 'COMMISSION'\r\n    },\r\n  },\r\n  async created() {\r\n    // if (this.$route.query.page == \"tasks\") {\r\n    //   document.querySelector(\"body\").classList.add(\"bgImage\");\r\n    // } else {\r\n    //   document.querySelector(\"body\").classList.remove(\"bgImage\");\r\n    // }\r\n    // if (\r\n    //   this.$route.query.page != \"edit\" &&\r\n    //   this.$route.query.page != \"create\" &&\r\n    //   this.$route.query.page != \"overview\" &&\r\n    //   this.$route.query.page != \"tasks\" &&\r\n    //   this.$route.query.page != \"comments\"\r\n    // ) {\r\n    this.getProjects();\r\n    this.getTotalCount();\r\n    if (this.isCommission) {\r\n      this.items.splice(1, 2,\r\n          ...[\r\n            {\r\n              text: this.$t(\"submodules.commission.projects_menu_title\"),\r\n              href: \"/commission\",\r\n            }\r\n          ]\r\n      )\r\n      this.title = this.$t('submodules.commission.projects_menu_title')\r\n    }\r\n    // }\r\n  },\r\n  watch: {\r\n    page() {\r\n      this.getProjects();\r\n    },\r\n    searchValue: {\r\n      async handler() {\r\n        await this.getProjects();\r\n      },\r\n    },\r\n    selected: {\r\n      handler(v) {\r\n        this.getProjects(v);\r\n      },\r\n    },\r\n    // \"$route.query.page\": {\r\n    //   handler(v) {\r\n    //     if (v == \"tasks\") {\r\n    //       document.querySelector(\"body\").classList.add(\"bgImage\");\r\n    //     } else {\r\n    //       document.querySelector(\"body\").classList.remove(\"bgImage\");\r\n    //     }\r\n    //   },\r\n    // },\r\n  },\r\n  methods: {\r\n    saveRejected(payload) {\r\n      this.convertToPdf(this.selectedTrItem).then(r1 => {\r\n        this.rejectedLoader = true;\r\n        Service.saveRejected(\r\n            this.selectedTrItem.letterId,\r\n            this.selectedTrItem.id,\r\n            this.reasonRejected,\r\n            payload\r\n        )\r\n            .then(async () => {\r\n              this.isRejectedModal = false;\r\n              let tempData = Object.assign({}, this.selectedTrItem);\r\n              await this.successSaved();\r\n              await this.getList(true, tempData.id);\r\n              await this.getIncomeTotalCount();\r\n              /* setTimeout(() => {\r\n                let newdata = this.list.find((e) => e.id == tempData.id);\r\n                this.selectedTrItem = newdata;\r\n                this.$forceUpdate();\r\n                this.getReceivers(this.selectedTrItem);\r\n              }, 500); */\r\n            })\r\n            .finally(() => {\r\n              this.rejectedLoader = false;\r\n            });\r\n      })\r\n    },\r\n    showRejectedSeeModal(itemObj, selectedFilter = null) {\r\n      this.selectedTrItem = itemObj\r\n      this.isRejectedSeeModal = true;\r\n    },\r\n    showRejectedModal(itemObj, selectedFilter = null) {\r\n      this.selectedTrItem = itemObj\r\n      this.isRejectedModal = true;\r\n    },\r\n    showQuorumModal(itemObj, selectedFilter = null) {\r\n      this.selectedTrItem = itemObj\r\n      this.isQuorumModal = true;\r\n    },\r\n    quorumConfirm() {\r\n      this.quorumLoader = true;\r\n      Service.sendQuorum(this.selectedTrItem.id, {date: this.quorumDate})\r\n          .then(rs => {\r\n            this.successSaved();\r\n            this.isQuorumModal = false;\r\n          })\r\n          .catch(err => {\r\n            // this.catchErr(err);\r\n          })\r\n          .finally(() => {\r\n            this.selectedTrItem = {}\r\n            this.quorumLoader = false;\r\n          });\r\n    },\r\n    rejectSeeConfirm() {\r\n      cnfDoc(this.$t(\"messages.reject_title\")).then((rs) => {\r\n        if (rs.value) {\r\n          this.signatureSeeModal = true;\r\n        }\r\n      });\r\n    },\r\n    rejectConfirm() {\r\n      cnfDoc(this.$t(\"messages.reject_title\")).then((rs) => {\r\n        if (rs.value) {\r\n          this.signatureModal = true;\r\n        }\r\n      });\r\n    },\r\n    async signSuccessSee(data) {\r\n      let payload = {\r\n        signedContent: data.content,\r\n        inn: data.inn,\r\n        pnfl: data.pnfl\r\n      };\r\n      await Service.onlyDocSignForRevision(payload, this.selectedTrItem.id, this.reasonRejectedSee)\r\n          .then(async () => {\r\n            this.signatureSeeModal = false;\r\n            this.isRejectedSeeModal = false;\r\n            let tempData = Object.assign({}, this.selectedTrItem);\r\n            await showMsgSuccess(this.$t(\"successDocSigned\"));\r\n            this.getProjects();\r\n            this.getTotalCount();\r\n          })\r\n          .catch((err) => {\r\n            // this.catchErr(err);\r\n          });\r\n    },\r\n    async signSuccess(data) {\r\n      let payload = {\r\n        signedContent: data.content,\r\n        inn: data.inn,\r\n        pnfl: data.pnfl\r\n      };\r\n      if (this.isRejectedModal) {\r\n        this.isModalKeys = false;\r\n        this.signatureModal = false;\r\n        this.saveRejected(payload)\r\n      } else {\r\n        if (this.selectedTrItem.status == 'COMMISSION_SEND') {\r\n          Service.onlyDocSign(payload, this.selectedTrItem.id)\r\n              .then(async () => {\r\n                this.isModalKeys = false;\r\n                this.signatureModal = false;\r\n                let tempData = Object.assign({}, this.selectedTrItem);\r\n                await showMsgSuccess(this.$t(\"successDocSigned\"));\r\n                this.getProjects();\r\n                this.getTotalCount();\r\n                // setTimeout(() => {\r\n                //   let newdata = this.list.find((e) => e.id == tempData.id);\r\n                //   this.selectedTrItem = Object.assign({}, newdata);\r\n                //   this.$forceUpdate();\r\n                //   this.getReceivers(this.selectedTrItem);\r\n                // }, 1000);\r\n              })\r\n              .catch((err) => {\r\n                // this.catchErr(err);\r\n              });\r\n        } else if (this.selectedTrItem.status == 'NOT_BELONG') {\r\n          await Service.onlyDocSign(payload, this.selectedTrItem.id)\r\n              .then(async () => {\r\n                // await Service.onlyDocSignNotBelong(payload, this.selectedTrItem.id)\r\n                //     .then(async () => {\r\n                //\r\n                //\r\n                //     })\r\n                //     .catch((err) => {\r\n                //       this.catchErr(err);\r\n                //     });\r\n\r\n                this.isModalKeys = false;\r\n                this.signatureModal = false;\r\n                let tempData = Object.assign({}, this.selectedTrItem);\r\n                await showMsgSuccess(this.$t(\"successDocSigned\"));\r\n                await this.getList(true, tempData.id);\r\n                await this.getIncomeTotalCount();\r\n\r\n                // setTimeout(() => {\r\n                //   let newdata = this.list.find((e) => e.id == tempData.id);\r\n                //   this.selectedTrItem = Object.assign({}, newdata);\r\n                //   this.$forceUpdate();\r\n                //   this.getReceivers(this.selectedTrItem);\r\n                // }, 1000);\r\n              })\r\n              .catch((err) => {\r\n                // this.catchErr(err);\r\n              });\r\n        } else {\r\n          Service.signDoc(payload, this.selectedTrItem.id, this.commissionTypeId, this.commissionComment)\r\n              .then(async () => {\r\n                this.isModalKeys = false;\r\n                this.signatureModal = false;\r\n                this.commissionsModal = false;\r\n                let tempData = Object.assign({}, this.selectedTrItem);\r\n                await showMsgSuccess(this.$t(\"successDocSigned\"));\r\n                await this.getList(true, tempData.id);\r\n                await this.getIncomeTotalCount();\r\n                /* setTimeout(() => {\r\n                  let newdata = this.list.find((e) => e.id == tempData.id);\r\n                  this.selectedTrItem = Object.assign({}, newdata);\r\n                  this.$forceUpdate();\r\n                  this.getReceivers(this.selectedTrItem);\r\n                }, 1000); */\r\n              })\r\n              .catch((err) => {\r\n                // this.catchErr(err);\r\n              });\r\n        }\r\n      }\r\n    },\r\n    customLabelMailingPurpose(opt) {\r\n      let selected = this.mailingPurposes.find(e => e.id == opt);\r\n      if (selected) {\r\n        return `${this.getName({\r\n          nameRu: selected.nameRu,\r\n          nameLt: selected.nameLt,\r\n          nameUz: selected.nameUz,\r\n        })\r\n        }`\r\n      }\r\n      return ``;\r\n    },\r\n    customLabelCommissionTypes(opt) {\r\n      let selected = this.commissionTypes.find(e => e.id == opt);\r\n      if (selected) {\r\n        return `${selected.fullName} -\r\n        ${this.getName({\r\n          nameRu: selected.directoryPositionNameRu,\r\n          nameLt: selected.directoryPositionNameLt,\r\n          nameUz: selected.directoryPositionNameUz,\r\n        })\r\n        } `\r\n      }\r\n      return ``;\r\n    },\r\n    async sendToDirector(grid, selectedFilter = null) {\r\n      this.currentProject = grid\r\n      await crudAndListsService.getList('employee/get-all-employee/in-monopoly-department', this.var_default_search_payload, null, true)\r\n          .then(res => {\r\n            this.commissionTypes = res.data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n\r\n      await crudAndListsService.searchList('before-commission/directory/mailing-purpose', this.var_default_search_payload)\r\n          .then(res => {\r\n            this.mailingPurposes = res.data.list\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n\r\n\r\n      this.commissionsModal = true;\r\n    },\r\n    async save() {\r\n      this.commissionModalLoader = true\r\n      let projectId = this.currentProject.id;\r\n      projectService\r\n          .addMember(projectId, [{employeeId: this.commissionTypeId, mailingPurposeId: this.mailingPurposeId}])\r\n          .then(rs => {\r\n            this.successSaved();\r\n            this.isModal = false;\r\n            this.$emit(\"success\");\r\n          })\r\n          .catch(err => {\r\n            // this.catchErr(err);\r\n          })\r\n          .finally(() => {\r\n            this.commissionModalLoader = false\r\n            this.commissionsModal = false;\r\n          });\r\n    },\r\n    async visa_btn() {\r\n      this.commissionModalLoader = true\r\n\r\n      LetterService.SignatureGiveVisaForDXA({\r\n        applicationId: this.selectedTrItem.applicationId,\r\n        employeeId: this.commissionTypeId,\r\n        letterId: this.selectedTrItem.id\r\n      })\r\n          .then((res) => {\r\n            this.$toast(this.$t('succes.title'), {type: 'success'});\r\n            this.commissionTypeId = null\r\n            this.commissionComment = ''\r\n            this.commissionsModal = false\r\n          })\r\n          .catch((err) => {\r\n            this.isCommit = false\r\n            console.log(err);\r\n          })\r\n          .finally(async () => {\r\n            this.commissionModalLoader = false\r\n            await this.getList();\r\n            this.selectedTrItem = {}\r\n          });\r\n    },\r\n    getTotalCount() {\r\n      projectService.getTotalCount(this.projectType).then((rs) => {\r\n        if (rs.data) {\r\n          this.totalCreated = rs.data.created;\r\n          this.totalFinished = rs.data.finished;\r\n          this.totalDeadline = rs.data.deadline;\r\n        }\r\n      });\r\n    },\r\n    selected_changed(v) {\r\n      this.getProjects(v);\r\n    },\r\n    convertToPdf(selectedItem, forSign = false) {\r\n      return new Promise((res, rej) => {\r\n        let config = {\r\n          url: `${selectedItem.url}`,\r\n          outputtype: \".pdf\",\r\n          forSign: forSign,\r\n          key: selectedItem.key,\r\n        };\r\n        LetterService.convertToPdfByApi(config, true)\r\n            .then((rs) => {\r\n              if (rs.data) {\r\n                // this.$nextTick(() => {\r\n                //     this.src = `${this.baseUrl}/${rs.data.uploadPath}`;\r\n                // });\r\n                res(rs.data);\r\n              } else {\r\n                res(false);\r\n              }\r\n            })\r\n            .catch((e) => {\r\n              // this.catchErr(e);\r\n              rej(e);\r\n            });\r\n      });\r\n    },\r\n    closeProject(id, status, selectedFilter = null) {\r\n      // CLOSE PROJECT\r\n      projectService\r\n          .changeStatus(id, status, true)\r\n          .then((rs) => {\r\n            if (rs.data) {\r\n              this.getProjects(selectedFilter ? selectedFilter : this.selected);\r\n              this.getTotalCount();\r\n              this.editSuccess();\r\n            }\r\n          })\r\n    },\r\n\r\n    changeStatus(grid, selectedFilter = null) {\r\n      this.cnf().then((v) => {\r\n        if (v.value) {\r\n          let status = 'REVIEW_FINISHED';\r\n          if (this.isCommission && grid.applicationType !== \"FROM_DXA\") {\r\n            switch (grid.returnType) {\r\n              case 'FOR_FINISH_WORK':\r\n                projectService.getLettersById(grid.id)\r\n                    .then(res => {\r\n                      if (!res.data || res.data.length <= 0) {\r\n                        return this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                      }\r\n                      let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                          && ['DECISION_COMMISSION', 'PROTOCOL_COMMISSION'].indexOf(d.letterType) !== -1);\r\n                      for (let i = 0; i < notPdfDocs.length; i++) {\r\n                        const d = notPdfDocs[i];\r\n                        this.convertToPdf(d).then(r => {\r\n                          if (!r.uploadPath) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (i === notPdfDocs.length - 1) {\r\n                            this.closeProject(grid.id, status, selectedFilter)\r\n                          }\r\n                        })\r\n                            .catch(e => console.log(e))\r\n                      }\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e)\r\n                    })\r\n                break;\r\n              case 'FOR_SUSPEND_WORK':\r\n                projectService.getLettersById(grid.id)\r\n                    .then(res => {\r\n                      if (!res.data || res.data.length <= 0) {\r\n                        return this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                      }\r\n                      let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                          && ['COMPROMISE_DECISION_SUSPEND', 'PROTOCOL_SUSPEND'].indexOf(d.letterType) !== -1);\r\n                      for (let i = 0; i < notPdfDocs.length; i++) {\r\n                        const d = notPdfDocs[i];\r\n                        this.convertToPdf(d).then(r => {\r\n                          if (!r.uploadPath) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (i === notPdfDocs.length - 1) {\r\n                            this.closeProject(grid.id, status, selectedFilter)\r\n                          }\r\n                        })\r\n                            .catch(e => console.log(e))\r\n                      }\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e)\r\n                    })\r\n                break;\r\n              case 'FOR_DELAY_WORK':\r\n                projectService.getLettersById(grid.id)\r\n                    .then(res => {\r\n                      if (!res.data || res.data.length <= 0) {\r\n                        return this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                      }\r\n                      let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                          && ['COMPROMISE_DECISION_DELAY', 'PROTOCOL_DELAY'].indexOf(d.letterType) !== -1);\r\n                      for (let i = 0; i < notPdfDocs.length; i++) {\r\n                        const d = notPdfDocs[i];\r\n                        this.convertToPdf(d).then(r => {\r\n                          if (!r.uploadPath) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (i === notPdfDocs.length - 1) {\r\n                            this.closeProject(grid.id, status, selectedFilter)\r\n                          }\r\n                        })\r\n                            .catch(e => console.log(e))\r\n                      }\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e)\r\n                    })\r\n                break;\r\n              case 'FOR_RESUME_WORK':\r\n                projectService.getLettersById(grid.id)\r\n                    .then(res => {\r\n                      if (!res.data || res.data.length <= 0) {\r\n                        return this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                      }\r\n                      let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                          && ['COMPROMISE_DECISION_RESUME', 'PROTOCOL_RESUME'].indexOf(d.letterType) !== -1);\r\n                      for (let i = 0; i < notPdfDocs.length; i++) {\r\n                        const d = notPdfDocs[i];\r\n                        this.convertToPdf(d).then(r => {\r\n                          if (!r.uploadPath) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                            this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                          } else if (i === notPdfDocs.length - 1) {\r\n                            this.closeProject(grid.id, status, selectedFilter)\r\n                          }\r\n                        })\r\n                            .catch(e => console.log(e))\r\n                      }\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e)\r\n                    })\r\n                break;\r\n              default:\r\n                this.closeProject(grid.id, status, selectedFilter);\r\n                break;\r\n            }\r\n          } else {\r\n            projectService.getLettersById(grid.id)\r\n                .then(res => {\r\n                  /* let requests = []\r\n                  for (let i = 0; i < res.data.length; i++) {\r\n                      const letter = res.data[i];\r\n                      requests.push(this.convertToPdf(letter))\r\n                  } */\r\n                  if (grid.applicationType === \"NOT_BELONG\") {\r\n                    if ((this.projectType === 'BEFORE_COMMISSION' && res.data && res.data.length >= 1) || (this.projectType !== 'BEFORE_COMMISSION' && res.data && res.data.length >= 0)) {\r\n                      if (this.isCommission) {\r\n                        this.closeProject(grid.id, status, selectedFilter)\r\n                      } else {\r\n                        let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() != 'pdf')\r\n                        for (let i = 0; i < notPdfDocs.length; i++) {\r\n                          const d = notPdfDocs[i];\r\n                          this.convertToPdf(d).then(r => {\r\n                            // if (!this.isCommission) {\r\n                            //     // 2nd REQUEST\r\n                            //     this.convertToPdf(res.data[1]).then(r2 => {\r\n                            //         if (!r2.uploadPath) {\r\n                            //             /* // START GLOBAL_LOADING\r\n                            //             this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                            //             setTimeout(() => {\r\n                            //                 this.convertToPdf(res.data[1]).then(r3 => {\r\n                            //                     this.closeProject(grid.id, status, selectedFilter)\r\n                            //                 })\r\n                            //             }, 4000) */\r\n                            //         } else if (!r2.uploadPath.endsWith('.pdf')) {\r\n                            //             /* // START GLOBAL_LOADING\r\n                            //             this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                            //             setTimeout(() => {\r\n                            //                 this.convertToPdf(res.data[1]).then(r4 => {\r\n                            //                     this.closeProject(grid.id, status, selectedFilter)\r\n                            //                 })\r\n                            //             }, 4000) */\r\n                            //         }\r\n                            //     })\r\n                            //         .catch(e => console.log(e))\r\n                            // }\r\n\r\n                            // CHECK AND RESEND 1ST REQUEST\r\n                            if (!r.uploadPath) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r5 => {\r\n                                      this.closeProject(grid.id)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r6 => {\r\n                                      this.closeProject(grid.id, status, selectedFilter)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (i == notPdfDocs.length - 1) {\r\n                              this.closeProject(grid.id, 'FINISHED', selectedFilter)\r\n                            }\r\n                          })\r\n                              .catch(e => console.log(e))\r\n                        }\r\n                      }\r\n                    } else {\r\n                      this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                    }\r\n                  } else if (grid.applicationType === \"FROM_DXA\") {\r\n                    if ((this.projectType === 'BEFORE_COMMISSION' && res.data && res.data.length >= 1)\r\n                        || (this.projectType !== 'BEFORE_COMMISSION' && this.projectType !== 'COMMISSION'\r\n                            && res.data && res.data.length >= 0)) {\r\n                      if (this.isCommission) {\r\n                        this.closeProject(grid.id, status, selectedFilter)\r\n                      } else {\r\n                        let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf')\r\n                        let notPdfReferenceDocs = notPdfDocs.filter(d => d.letterType === 'REFERENCE')\r\n                        for (let i = 0; i < notPdfReferenceDocs.length; i++) {\r\n                          const d = notPdfReferenceDocs[i];\r\n                          this.convertToPdf(d).then(r => {\r\n                            // CHECK AND RESEND 1ST REQUEST\r\n                            if (!r.uploadPath) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r5 => {\r\n                                      this.closeProject(grid.id)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r6 => {\r\n                                      this.closeProject(grid.id, status, selectedFilter)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (i === notPdfReferenceDocs.length - 1) {\r\n                              this.closeProject(grid.id, status, selectedFilter)\r\n                            }\r\n                          })\r\n                          .catch(e => console.log(e))\r\n                        }\r\n                      }\r\n                    } else if (this.isCommission) {\r\n                      let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf')\r\n                      for (let i = 0; i < notPdfDocs.length; i++) {\r\n                        const d = notPdfDocs[i];\r\n                        if (d.letterType == \"DECISION\" || d.letterType == \"PROTOCOL_DXA\") {\r\n                          this.convertToPdf(d).then(r => {\r\n\r\n                            // CHECK AND RESEND 1ST REQUEST\r\n                            if (!r.uploadPath) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r5 => {\r\n                                      this.closeProject(grid.id)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r6 => {\r\n                                      this.closeProject(grid.id, status, selectedFilter)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (i == notPdfDocs.length - 1) {\r\n                              this.closeProject(grid.id, status, selectedFilter)\r\n                            }\r\n                          })\r\n                              .catch(e => console.log(e))\r\n                        }\r\n\r\n                      }\r\n                    } else {\r\n                      this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                    }\r\n\r\n                  } else {\r\n                    if ((this.projectType === 'BEFORE_COMMISSION' && res.data && res.data.length > 1) || (this.projectType !== 'BEFORE_COMMISSION' && res.data && res.data.length > 0)) {\r\n                      if (this.isCommission) {\r\n                        this.closeProject(grid.id, status, selectedFilter)\r\n                      } else {\r\n                        let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf')\r\n                        let convertToPdf = []\r\n                        switch (grid.returnType) {\r\n                          case \"FOR_COMMISSION\":\r\n                            convertToPdf = notPdfDocs.filter(l => l.letterType === 'REFERENCE')\r\n                            break;\r\n                          case \"FOR_NOT_COMPLETED\":\r\n                            convertToPdf = notPdfDocs.filter(l => l.letterType === 'NOTICE_NOT_COMPLETED')\r\n                            status = 'FINISHED'\r\n                            break;\r\n                          case \"FOR_NOT_BELONG\":\r\n                            convertToPdf = notPdfDocs.filter(l => l.letterType === 'NOTICE_NOT_BELONG')\r\n                            status = 'FINISHED'\r\n                            break;\r\n                          case \"FOR_REGION\":\r\n                            convertToPdf = notPdfDocs.filter(l => l.letterType === 'NOTICE_REGION')\r\n                            status = 'FINISHED'\r\n                            break;\r\n                        }\r\n                        let convertToPdfLength = convertToPdf.length;\r\n                        for (let i = 0; i < convertToPdfLength; i++) {\r\n                          const d = convertToPdf[i];\r\n                          this.convertToPdf(d).then(r => {\r\n                            // if (!this.isCommission) {\r\n                            //     // 2nd REQUEST\r\n                            //     this.convertToPdf(res.data[1]).then(r2 => {\r\n                            //         if (!r2.uploadPath) {\r\n                            //             /* // START GLOBAL_LOADING\r\n                            //             this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                            //             setTimeout(() => {\r\n                            //                 this.convertToPdf(res.data[1]).then(r3 => {\r\n                            //                     this.closeProject(grid.id, status, selectedFilter)\r\n                            //                 })\r\n                            //             }, 4000) */\r\n                            //         } else if (!r2.uploadPath.endsWith('.pdf')) {\r\n                            //             /* // START GLOBAL_LOADING\r\n                            //             this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                            //             setTimeout(() => {\r\n                            //                 this.convertToPdf(res.data[1]).then(r4 => {\r\n                            //                     this.closeProject(grid.id, status, selectedFilter)\r\n                            //                 })\r\n                            //             }, 4000) */\r\n                            //         }\r\n                            //     })\r\n                            //         .catch(e => console.log(e))\r\n                            // }\r\n\r\n                            // CHECK AND RESEND 1ST REQUEST\r\n                            if (!r.uploadPath) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r5 => {\r\n                                      this.closeProject(grid.id)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                              this.$toast(this.$t('messages.project_files_convert_pdf_error'), {type: 'error'})\r\n                              /* // START GLOBAL_LOADING\r\n                              this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                              setTimeout(() => {\r\n                                  this.convertToPdf(res.data[0]).then(r6 => {\r\n                                      this.closeProject(grid.id, status, selectedFilter)\r\n                                  })\r\n                              }, 4000) */\r\n                            } else if (i === convertToPdfLength - 1) {\r\n                              this.closeProject(grid.id, status, selectedFilter)\r\n                            }\r\n                          })\r\n                              .catch(e => console.log(e))\r\n                        }\r\n                      }\r\n                    } else {\r\n                      this.$toast(this.$t('messages.project_files_not_exist'), {type: 'error'})\r\n                    }\r\n                  }\r\n\r\n\r\n                  /* ApiService.all(requests)\r\n                      .then(ApiService.spread((...args) => {\r\n                          console.log(args)\r\n                          let fakeRes = [{\r\n                              uploadPath: 'asldkfjasldkfj.pdf'\r\n                          },{\r\n                              uploadPath: 'asdlfjaskldfj.pdf'\r\n                          }]\r\n                          let hasDocxInResponces = fakeRes.some(r => {\r\n                              if (!r.uploadPath) {\r\n                                  return r\r\n                              } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                                  return r\r\n                              }\r\n                          })\r\n                          // START GLOBAL_LOADING\r\n                          this.$store.commit(\"SET_GLOBAL_LOADING\", true);\r\n                          // let hasDocxInResponse =\r\n                          setTimeout(() => {\r\n                              let secondRequests = []\r\n                              for (let i = 0; i < res.data.length; i++) {\r\n                                  const anotherLetter = res.data[i];\r\n                                  secondRequests.push(this.convertToPdf(anotherLetter))\r\n                              }\r\n                              ApiService.all(secondRequests)\r\n                                  .then(r => {\r\n                                      // projectService\r\n                                      //     .changeStatus(grid.id, status, true)\r\n                                      //     .then((rs) => {\r\n                                      //         if (rs.data) {\r\n                                      //             this.getProjects();\r\n                                      //             this.editSuccess();\r\n                                      //         }\r\n                                      //     })\r\n                                  })\r\n                                  .catch(e => {\r\n                                      console.log(e)\r\n                                  })\r\n                          }, 4000)\r\n                          // projectService\r\n                          //     .changeStatus(grid.id)\r\n                          //     .then((rs) => {\r\n                          //         if (rs.data) {\r\n                          //             this.getProjects();\r\n                          //             this.editSuccess();\r\n                          //         }\r\n                          //     })\r\n                      }))\r\n                      .catch(e => {\r\n                          console.log(e)\r\n                      }) */\r\n                })\r\n                .catch(e => {\r\n                  console.log(e)\r\n                })\r\n          }\r\n        }\r\n      });\r\n    },\r\n    search_changed(v) {\r\n      this.searchValue = v;\r\n    },\r\n    goComments(grid) {\r\n      this.currentProj = grid;\r\n      this.$router.push({\r\n        name: this.projectType == 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain',\r\n        query: {page: \"comments\", id: grid.id},\r\n      });\r\n    },\r\n    getTasks(grid) {\r\n      this.$router.push({\r\n        name: this.projectType == 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain',\r\n        query: {page: \"tasks\", id: grid.id},\r\n      });\r\n    },\r\n    overView(grid) {\r\n      this.$router.push({\r\n        name: this.projectType == 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain',\r\n        query: {page: \"overview\", id: grid.id},\r\n      });\r\n    },\r\n    edit(grid) {\r\n      this.$router.push({\r\n        name: this.projectType == 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain',\r\n        query: {page: \"edit\", id: grid.id},\r\n      });\r\n    },\r\n    d_page_changed(page) {\r\n      this.page = page;\r\n    },\r\n    dlt(id) {\r\n      this.cnf().then((v) => {\r\n        if (v.value) {\r\n          projectService\r\n              .delete(id)\r\n              .then((rs) => {\r\n                this.deleteSuccess();\r\n                this.getProjects();\r\n              })\r\n              .catch((err) => {\r\n                // this.catchErr(err);\r\n              });\r\n        }\r\n      });\r\n    },\r\n    random(v) {\r\n      return Math.floor(Math.random() * v);\r\n    },\r\n    async successSave() {\r\n      await this.getProjects();\r\n      this.successSaved();\r\n      this.$router.push({\r\n        name: this.projectType == 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain',\r\n        query: {page: 'list'}\r\n      });\r\n    },\r\n    getProjects(v) {\r\n      this.loading = true;\r\n      projectService\r\n          .list(this.params, v, this.projectType)\r\n          .then((rs) => {\r\n            this.projectData = rs.data.list;\r\n            this.total = rs.data.total;\r\n          })\r\n          .catch((err) => {\r\n            // this.catchErr(err);\r\n          })\r\n          .finally(() => {\r\n            this.loading = false;\r\n          });\r\n    },\r\n    splitLargeText(a, b) {\r\n      return splitLargeText(a, b)\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <!-- <Layout> -->\r\n    <List\r\n        v-if=\"$route.query.page === 'list'\"\r\n        :isCommission=\"isCommission\"\r\n        :itemsPerPage=\"itemsPerPage\"\r\n        :loading=\"loading\"\r\n        :page=\"page\"\r\n        :projectData=\"projectData\"\r\n        :selectedTrItem=\"selectedTrItem\"\r\n        :total=\"total\"\r\n        :totalC=\"totalCreated\"\r\n        :totalD=\"totalDeadline\"\r\n        :totalF=\"totalFinished\"\r\n        @changeStatus=\"changeStatus\"\r\n        @d_page_changed=\"d_page_changed\"\r\n        @dlt=\"dlt\"\r\n        @edit=\"edit\"\r\n        @getTask=\"getTasks\"\r\n        @goComments=\"goComments\"\r\n        @overView=\"overView\"\r\n        @search_changed=\"search_changed\"\r\n        @selected_changed=\"selected_changed\"\r\n        @showQuorumModal=\"showQuorumModal\"\r\n        @showRejectedModal=\"showRejectedModal\"\r\n        @showRejectedSeeModal=\"showRejectedSeeModal\"\r\n    />\r\n    <Create\r\n        v-else-if=\"$route.query.page === 'create'\"\r\n        @success=\"successSave\"\r\n    />\r\n    <Create\r\n        v-else-if=\"$route.query.page === 'edit'\"\r\n        @success=\"successSave\"\r\n    />\r\n    <Overview\r\n        v-else-if=\"$route.query.page === 'overview'\"\r\n        @success=\"successSave\"\r\n    />\r\n    <Tasks\r\n        v-else-if=\"$route.query.page === 'tasks'\"\r\n        @success=\"successSave\"\r\n    />\r\n    <div v-else-if=\"$route.query.page === 'comments'\">\r\n      <Back\r\n          :to=\"{name: projectType == 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain', query: {page: 'list'}}\"\r\n          class=\"mb-2\"\r\n      />\r\n\r\n      <Comments\r\n          :height=\"true\"\r\n          :project=\"currentProj\"\r\n      />\r\n    </div>\r\n    <div v-else>\r\n      <PageHeader\r\n          :items=\"items\"\r\n          :title=\"title\"\r\n      />\r\n      <b-card>\r\n        <b-row>\r\n          <b-col>\r\n            <div\r\n                class=\"d-flex flex-container\"\r\n                style=\"justify-content: space-between\"\r\n            >\r\n              <div\r\n                  class=\"btn-group btn-group-example mb-2\"\r\n                  role=\"group\"\r\n                  style=\"width: 100px\"\r\n              >\r\n                <b-button\r\n                    :to=\"{name: projectType === 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain'}\"\r\n                    :variant=\"!$route.query.page ? 'primary' : 'outline-primary'\"\r\n                    class=\"w-xs\"\r\n                >\r\n                  <i class=\"fa fa-th\"></i>\r\n                </b-button>\r\n                <b-button\r\n                    :to=\"{name: projectType === 'COMMISSION' ? 'CommissionProjects' : 'ProjectsMain', query: {page: 'list'}}\"\r\n                    :variant=\"$route.query.page === 'list' ? 'primary' : 'outline-primary'\"\r\n                    class=\"w-xs\"\r\n                >\r\n                  <i class=\"fa fa-list\"></i>\r\n                </b-button>\r\n              </div>\r\n              <div class=\"d-flex align-items-center\">\r\n                <div class=\"mr-3\">\r\n                  <b-form-radio-group\r\n                      id=\"btn-radios-1\"\r\n                      v-model=\"selected\"\r\n                      button-variant=\"outline-primary\"\r\n                      buttons\r\n                      class=\"btn-custom mb-0\"\r\n                      name=\"radios-btn-default\"\r\n                  >\r\n                    <b-form-radio\r\n                        button-variant=\"outline-primary\"\r\n                        value=\"FINISHED\"\r\n                    >\r\n                      <!-- <i class=\"fa fa-check mr-1\"></i> -->\r\n                      <span> {{ $t(\"FINISHED\") }}</span>\r\n                      <b-badge\r\n                          v-if=\"totalFinished > 0\"\r\n                          class=\"ml-1\"\r\n                          variant=\"success\"\r\n                      >{{ totalFinished }}\r\n                      </b-badge>\r\n                    </b-form-radio>\r\n\r\n                    <b-form-radio\r\n                        button-variant=\"outline-success\"\r\n                        value=\"CREATED\"\r\n                    >\r\n                      <!-- <i class=\"fa fa-circle mr-1\"></i> -->\r\n                      <span> {{ $t(\"CREATED\") }}</span>\r\n                      <b-badge\r\n                          v-if=\"totalCreated > 0\"\r\n                          class=\"ml-1\"\r\n                          variant=\"primary\"\r\n                      >{{ totalCreated }}\r\n                      </b-badge>\r\n                    </b-form-radio>\r\n\r\n                    <b-form-radio\r\n                        button-variant=\"outline-danger\"\r\n                        value=\"DEADLINE\"\r\n                    >\r\n                      <!-- <i class=\"fa fa-hourglass mr-1\"></i> -->\r\n                      <span> {{ $t(\"deadlineEnd\") }}</span>\r\n                      <b-badge\r\n                          v-if=\"totalDeadline > 0\"\r\n                          class=\"ml-1\"\r\n                          variant=\"success\"\r\n                      >{{ totalDeadline }}\r\n                      </b-badge>\r\n                    </b-form-radio>\r\n                  </b-form-radio-group>\r\n                </div>\r\n\r\n                <div class=\"mr-2\">\r\n                  <div class=\"d-inline-block mt-1 ml-2\">\r\n                    <div class=\"search-box\">\r\n                      <div class=\"position-relative\">\r\n                        <input\r\n                            v-model=\"searchValue\"\r\n                            :placeholder=\"$t('actions.search')\"\r\n                            class=\"form-control rounded bg-light border-light\"\r\n                            style=\"width: 300px\"\r\n                            type=\"text\"\r\n                        />\r\n                        <i class=\"mdi mdi-magnify search-icon\"></i>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <!-- <b-button-group class=\"float-right\">\r\n                      <b-button\r\n                          :to=\"{name: 'ProjectsMain', query: {page: 'create'}}\"\r\n                          variant=\"primary\"\r\n                      >\r\n                          <i class=\"bx bx-plus mr-2\"></i>\r\n                          {{ $t(\"actions.create_project\") }}\r\n                      </b-button>\r\n                  </b-button-group> -->\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </b-col>\r\n        </b-row>\r\n      </b-card>\r\n      <div class=\"row\">\r\n        <div\r\n            v-for=\"grid in projectData\"\r\n            :key=\"grid.id + 'GR'\"\r\n            class=\"col-xl-4 col-sm-6\"\r\n        >\r\n          <div class=\"card\">\r\n            <div\r\n                class=\"card-body hovercard\"\r\n                @click=\"overView(grid)\"\r\n            >\r\n              <div class=\"media\">\r\n                <div class=\"media-body overflow-hidden\">\r\n                  <h5 class=\"text-truncate font-size-15\">\r\n                    <a\r\n                        class=\"text-dark\"\r\n                        href=\"#\"\r\n                    >{{ grid.name }}</a>\r\n                  </h5>\r\n                  <p class=\"pre m-0\">\r\n                    {{ getName(grid) }}\r\n                  </p>\r\n                  <p class=\"text-muted mb-4 pre\">{{ splitLargeText(grid.description, 300) }}</p>\r\n                  <div class=\"team\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"px-3 py-3 border-top\">\r\n              <ul class=\"list-inline mb-0\">\r\n                <li class=\"list-inline-item mr-3\">\r\n                  <span\r\n                      v-if=\" grid.status == 'CREATED' && new Date(replaceDate(grid.end)).getTime() > Date.now()\"\r\n                      class=\"badge badge-success\"\r\n                  >\r\n                      {{ $t(grid.status) }}\r\n                  </span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'CREATED' && new Date(replaceDate(grid.end)).getTime() < Date.now()\"\r\n                      class=\"badge badge-danger\"\r\n                  >\r\n                    {{ $t(\"deadlineEnd\") }}\r\n                  </span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'REVISION'\"\r\n                      class=\"badge badge-warning\"\r\n                  >\r\n                    {{ $t(grid.status) }}\r\n                  </span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'SEND_TO_MANAGER'\"\r\n                      class=\"badge badge-warning\"\r\n                  >{{ $t('submodules.projects.send_to_the_director') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'RETURN_FOR_REVISION'\"\r\n                      class=\"badge badge-warning\"\r\n                  >{{ $t('REVISION') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'COMMISSION_REVISION'\"\r\n                      class=\"badge badge-warning\"\r\n                  >{{ $t('submodules.commission.returnsee') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'RETURN_FOR_REVISION_TO_BEFORE_COMMISSION'\"\r\n                      class=\"badge badge-warning\"\r\n                  >{{ $t('submodules.commission.return_to_before_project') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'RECREATED'\"\r\n                      class=\"badge badge-primary\"\r\n                  >{{ $t('submodules.commission.recreated') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'REVISION_AFTER_COMMISSION'\"\r\n                      class=\"badge badge-warning\"\r\n                  >{{ $t('submodules.commission.return_from_commission') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'REVIEW_FINISHED'\"\r\n                      class=\"badge badge-success\"\r\n                  >{{ $t('submodules.commission.REVIEW_FINISHED') }}</span>\r\n                  <span\r\n                      v-else-if=\"grid.status == 'TEMPORARILY_CLOSED'\"\r\n                      class=\"badge badge-success\"\r\n                  >{{ $t('submodules.commission.doc_status.temporarily_closed') }}</span>\r\n                  <span\r\n                      v-else\r\n                      class=\"badge badge-primary\"\r\n                  >{{\r\n                      $t(grid.status)\r\n                    }}</span>\r\n                </li>\r\n                <li\r\n                    v-if=\"!_empty(grid.end)\"\r\n                    v-b-tooltip.hover.top\r\n                    :title=\"$t('column.finishing_date')\"\r\n                    class=\"list-inline-item mr-3\"\r\n                >\r\n                  <i class=\"bx bx-calendar mr-1\"></i>\r\n                  {{ new Date(replaceDate(grid.end)).daym_shortyyyy() }}\r\n                </li>\r\n              </ul>\r\n              <project-list-buttons\r\n                  :isCommission=\"isCommission\"\r\n                  :project=\"grid\"\r\n                  :selectedTrItem=\"selectedTrItem\"\r\n                  @changeStatus=\"changeStatus\"\r\n                  @dlt=\"dlt\"\r\n                  @getTask=\"getTasks\"\r\n                  @goComments=\"goComments\"\r\n                  @showQuorumModal=\"showQuorumModal\"\r\n                  @showRejectedModal=\"showRejectedModal\"\r\n                  @showRejectedSeeModal=\"showRejectedSeeModal\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <b-pagination\r\n              v-if=\"total > 0\"\r\n              v-model=\"page\"\r\n              :per-page=\"itemsPerPage\"\r\n              :total-rows=\"total\"\r\n              class=\"m-0\"\r\n              size=\"sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- end ro w -->\r\n    <!-- </Layout> -->\r\n    <b-modal\r\n        v-model=\"commissionsModal\"\r\n        :title=\"`${$t('submodules.projects.send_to_director')}`\"\r\n        scrollable\r\n        size=\"md\"\r\n    >\r\n      <div style=\"min-height: 200px\">\r\n        <div class=\"p-2\">\r\n          <BaseMultiselectWithValidation\r\n              v-model=\"commissionTypeId\"\r\n              :custom-label=\"customLabelCommissionTypes\"\r\n              :label=\"$t('submodules.employees.title')\"\r\n              :max-height=\"600\"\r\n              :options=\"commissionTypes.map(e => e.id)\"\r\n              :show-labels=\"false\"\r\n              class=\"required \"\r\n              label-on-top\r\n              open-direction=\"bottom\"\r\n              placeholder=\"\"\r\n              rules=\"required\"\r\n          ></BaseMultiselectWithValidation>\r\n        </div>\r\n\r\n        <div class=\"p-2\">\r\n\r\n          <BaseMultiselectWithValidation\r\n              v-model=\"mailingPurposeId\"\r\n              :custom-label=\"customLabelMailingPurpose\"\r\n              :label=\"$t('submodules.mailing_purpose.title')\"\r\n              :max-height=\"600\"\r\n              :options=\"mailingPurposes.map(e => e.id)\"\r\n              :show-labels=\"false\"\r\n              class=\"required \"\r\n              label-on-top\r\n              open-direction=\"bottom\"\r\n              placeholder=\"\"\r\n              rules=\"required\"\r\n          ></BaseMultiselectWithValidation>\r\n        </div>\r\n\r\n      </div>\r\n      <template v-slot:modal-footer>\r\n        <b-button\r\n            variant=\"success\"\r\n            @click=\"save\"\r\n        >\r\n          <b-overlay\r\n              :opacity=\"0.1\"\r\n              :show=\"commissionModalLoader\"\r\n              rounded=\"sm\"\r\n          >\r\n            {{ $t(\"actions.send\") }}\r\n          </b-overlay>\r\n        </b-button>\r\n      </template>\r\n    </b-modal>\r\n\r\n    <b-modal\r\n        v-model=\"signatureModal\"\r\n        :title=\"`${$t('submodules.reports.make_sign')}`\"\r\n        hide-footer\r\n        scrollable\r\n        size=\"lg\"\r\n    >\r\n      <SignKeys\r\n          :dataToSign=\"selectedTrItem\"\r\n          @sign=\"signSuccess\"\r\n      />\r\n    </b-modal>\r\n\r\n    <!-- rejected modal -->\r\n    <b-modal\r\n        v-model=\"isRejectedModal\"\r\n        :title=\"`${$t('submodules.reports.reasonRejected')}`\"\r\n        scrollable\r\n        size=\"md\"\r\n    >\r\n      <b-form-textarea\r\n          v-model=\"reasonRejected\"\r\n          rows=\"5\"\r\n      ></b-form-textarea>\r\n\r\n      <template v-slot:modal-footer>\r\n        <b-button\r\n            variant=\"danger\"\r\n            @click=\"rejectConfirm\"\r\n        >\r\n          <b-overlay\r\n              :opacity=\"0.1\"\r\n              :show=\"rejectedLoader\"\r\n              rounded=\"sm\"\r\n          >\r\n            {{ $t(\"submodules.reports.rejected\") }}\r\n          </b-overlay>\r\n        </b-button>\r\n      </template>\r\n    </b-modal>\r\n\r\n    <!-- quorum modal -->\r\n    <b-modal\r\n        v-model=\"isQuorumModal\"\r\n        scrollable\r\n        size=\"md\"\r\n    >\r\n      <div class=\"mb-3\">\r\n        <b-row>\r\n          <b-col cols=\"4\">{{ $t('column.last_modified_date') }}</b-col>\r\n          <b-col>\r\n            <span class=\"p-2\">\r\n              {{ selectedTrItem.start }}\r\n            </span>\r\n          </b-col>\r\n        </b-row>\r\n      </div>\r\n      <div class=\"row\">\r\n        <BaseDatePickerWithValidation\r\n            v-model=\"quorumDate\"\r\n            :label=\"$t('column.date')\"\r\n            class=\"required p-2\"\r\n            custom-styles=\"grid-template-columns: 60% 40%;\"\r\n            rules=\"required\"\r\n        ></BaseDatePickerWithValidation>\r\n      </div>\r\n\r\n      <template v-slot:modal-footer>\r\n        <b-button\r\n            variant=\"success\"\r\n            @click=\"quorumConfirm\"\r\n        >\r\n          <b-overlay\r\n              :opacity=\"0.1\"\r\n              :show=\"quorumLoader\"\r\n              rounded=\"sm\"\r\n          >\r\n            {{ $t(\"actions.send\") }}\r\n          </b-overlay>\r\n        </b-button>\r\n      </template>\r\n    </b-modal>\r\n\r\n    <b-modal\r\n        v-model=\"isRejectedSeeModal\"\r\n        :title=\"`${$t('submodules.reports.reasonRejected')}`\"\r\n        scrollable\r\n        size=\"md\"\r\n    >\r\n      <b-form-textarea\r\n          v-model=\"reasonRejectedSee\"\r\n          rows=\"5\"\r\n      ></b-form-textarea>\r\n\r\n      <template v-slot:modal-footer>\r\n        <b-button\r\n            variant=\"danger\"\r\n            @click=\"rejectSeeConfirm\"\r\n        >\r\n          <b-overlay\r\n              :opacity=\"0.1\"\r\n              :show=\"rejectedSeeLoader\"\r\n              rounded=\"sm\"\r\n          >\r\n            {{ $t(\"submodules.reports.rejected\") }}\r\n          </b-overlay>\r\n        </b-button>\r\n      </template>\r\n    </b-modal>\r\n    <b-modal\r\n        v-model=\"signatureSeeModal\"\r\n        :title=\"`${$t('submodules.reports.make_sign')}`\"\r\n        hide-footer\r\n        scrollable\r\n        size=\"lg\"\r\n    >\r\n      <SignKeys\r\n          :dataToSign=\"selectedTrItem\"\r\n          @sign=\"signSuccessSee\"\r\n      />\r\n    </b-modal>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.hovercard:hover {\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n  cursor: pointer;\r\n  background: #dff0fc;\r\n}\r\n\r\n.hovercard {\r\n  background: #f2f9fd;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.16), 0 1px 2px rgba(0, 0, 0, 0.23)\r\n}\r\n\r\n.bgImage {\r\n  background-image: url(\"../../assets/projects/bg.jpg\");\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n}\r\n</style>\r\n"]}]}