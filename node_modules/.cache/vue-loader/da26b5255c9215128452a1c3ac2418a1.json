{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\report\\organizitional\\components\\editReportModal.vue?vue&type=style&index=1&id=33c56676&lang=scss&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\report\\organizitional\\components\\editReportModal.vue","mtime":1674799497817},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1675061970775},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1675061971809},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovKiBDaHJvbWUsIFNhZmFyaSwgRWRnZSwgT3BlcmEgKi8NCmlucHV0Ojotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLA0KaW5wdXQ6Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24gew0KICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7DQogIG1hcmdpbjogMDsNCn0NCg0KLyogRmlyZWZveCAqLw0KaW5wdXRbdHlwZT0ibnVtYmVyIl0gew0KICAtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsNCn0NCg0KLnJvdGF0ZV90ZXh0IHsNCiAgaGVpZ2h0OiAxMDAlOw0KICB3b3JkLWJyZWFrOiBub3JtYWw7DQogIHdyaXRpbmctbW9kZTogdmVydGljYWwtcmw7DQogIC1tcy13cml0aW5nLW1vZGU6IHZlcnRpY2FsLWxyOw0KICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xODBkZWcpOw0KICAtbW96LXRyYW5zZm9ybTogcm90YXRlKC0xODBkZWcpOw0KICAtby10cmFuc2Zvcm06IHJvdGF0ZSgtMTgwZGVnKTsNCiAgdHJhbnNmb3JtOiByb3RhdGUoLTE4MGRlZyk7DQogIHBhZGRpbmctYm90dG9tOiAyMHB4ICFpbXBvcnRhbnQ7DQogIHBhZGRpbmctdG9wOiAyMHB4ICFpbXBvcnRhbnQ7DQp9DQoNCi5ub19lbnRlcl92YWx1ZSB7DQogIHBhZGRpbmc6IDBweCAhaW1wb3J0YW50Ow0KICBtaW4td2lkdGg6IGF1dG8gIWltcG9ydGFudDsNCn0NCg=="},{"version":3,"sources":["editReportModal.vue"],"names":[],"mappings":";AA6nDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"editReportModal.vue","sourceRoot":"src/modules/report/organizitional/components","sourcesContent":["<script>\r\nimport Service from \"@/modules/report/reportService\";\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport Checkbox from \"vue-material-checkbox\";\r\n\r\nexport default {\r\n  components: { Checkbox },\r\n  data() {\r\n    return {\r\n      debounce: null,\r\n      // OKED VARIABLES\r\n      okeds: [],\r\n      hasNextPageOked: false,\r\n      isLoadingOked: false,\r\n      okedSearchPayload: {},\r\n      // ----------------\r\n      f1Ids: [],\r\n      f2Ids: [],\r\n      fRowId: null,\r\n      tableId: null,\r\n      reportId: null,\r\n      // getName: getName,\r\n      selectedColumns: [],\r\n      selectedRows: [],\r\n\r\n      firstColumns: [],\r\n      secondColumns: [],\r\n      thirdColumns: [],\r\n\r\n      thirdTrIdData: [],\r\n      loader: false,\r\n      report: {},\r\n      showResult: false,\r\n      showData: [],\r\n      table: {},\r\n      formulas: [],\r\n      currentPosition: {\r\n        rowIndex: null,\r\n        columnIndex: null,\r\n        rowId: null,\r\n        columnId: null,\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    getColumnData(i) {\r\n      let found = this.showData.find((e) => e.columnId == i.columnId)\r\n      if (found) {\r\n        return found.columnData\r\n      } else {\r\n        return \"\"\r\n      }\r\n    },\r\n    // DYNAMIC_REFERENCES METHODS\r\n    dynamicRefsReachedEndOfList(e) {\r\n      if (e) {\r\n        this.fetchDynamicRefs()\r\n      }\r\n    },\r\n    async debounceSearchDynamicRefs(searchText) {\r\n      clearTimeout(this.debounce);\r\n      this.debounce = setTimeout(async () => {\r\n        await this.fetchDynamicRefsWithKeyword(searchText);\r\n      }, 1000);\r\n    },\r\n    fetchDynamicRefsWithKeyword(keyword) {\r\n      this.okeds = []\r\n      this.okedSearchPayload.page = 1\r\n      this.okedSearchPayload.keyword = keyword ? keyword : ''\r\n      this.fetchDynamicRefs()\r\n    },\r\n    async fetchDynamicRefs() {\r\n      this.isLoadingOked = true\r\n      await crudAndListsService.searchListWithKeyword(OKED_API_URL, this.okedSearchPayload)\r\n          .then(res => {\r\n            this.okeds.push(...res.data.list)\r\n            this.hasNextPageOked = res.data.total / this.okedSearchPayload.itemsPerPage > this.okedSearchPayload.page\r\n            this.okedSearchPayload.page += 1\r\n            if (!this.isModeCreate && this.editingItem.okedId) {\r\n              let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n              if (!foundItm && this.editingItem.infoOkedDto) {\r\n                this.okeds.push(this.editingItem.infoOkedDto)\r\n              }\r\n            }\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n            this.okeds = []\r\n          })\r\n          .finally(() => {\r\n            this.isLoadingOked = false\r\n          })\r\n    },\r\n    customLabelDynamicRef(opt) {\r\n      let selected = this.okeds.find(e => e.id == opt.id);\r\n      if (selected) {\r\n        return `${selected.code} - ${this.getName({\r\n          nameRu: selected.nameRu,\r\n          nameLt: selected.nameLt,\r\n          nameUz: selected.nameUz,\r\n        })}`\r\n      }\r\n      return ``;\r\n    },\r\n    // --------------------------\r\n    clearAll() {\r\n      this.selectedColumns = [];\r\n      this.selectedRows = [];\r\n      this.firstColumns = [];\r\n      this.secondColumns = [];\r\n      this.thirdColumns = [];\r\n      this.thirdTrIdData = [];\r\n      this.formulas = [];\r\n      this.table = [];\r\n      this.f1Ids = [];\r\n      this.f2Ids = [];\r\n    },\r\n    keydownEvt(evt, rowId, value, rowIndex, columnIndex, columnId, typeCode) {\r\n      this.keyUpEventsDisable(evt);\r\n      if (columnId != null) {\r\n        if (evt.keyCode == 40 && rowId != null) {\r\n          evt.preventDefault();\r\n          // down\r\n          if (rowIndex < this.selectedRows.length - 1) {\r\n            let currentColumn = this.thirdTrIdData[columnIndex];\r\n            let downRowColumn = this.selectedRows[rowIndex + 1];\r\n            let downInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: downRowColumn.id,\r\n                  columnId: currentColumn.columnId,\r\n                })\r\n            );\r\n            if (downInput) {\r\n              downInput.focus();\r\n            }\r\n          }\r\n        } else if (evt.keyCode == 38 && rowId != null) {\r\n          evt.preventDefault();\r\n          if (rowIndex != 0) {\r\n            let currentColumn = this.thirdTrIdData[columnIndex];\r\n            let upRowColumn = this.selectedRows[rowIndex - 1];\r\n            let upInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: upRowColumn.id,\r\n                  columnId: currentColumn.columnId,\r\n                })\r\n            );\r\n            if (upInput) {\r\n              upInput.focus();\r\n            }\r\n          }\r\n          //up\r\n        } else if (evt.keyCode == 37) {\r\n          evt.preventDefault();\r\n          //left\r\n          if (columnIndex != 0) {\r\n            let prevColumn = this.thirdTrIdData[columnIndex - 1];\r\n\r\n            let currentRow = this.selectedRows[rowIndex];\r\n            let prevInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: currentRow.id,\r\n                  columnId: prevColumn.columnId,\r\n                })\r\n            );\r\n            if (prevInput) {\r\n              if (prevInput.disabled) {\r\n                let count = this.thirdTrIdData.length - (columnIndex - 1);\r\n                for (let i = 0; i < count; i++) {\r\n                  let prevColumn2 = this.thirdTrIdData[columnIndex - 1 - i];\r\n                  if (prevColumn2) {\r\n                    let input = document.getElementById(\r\n                        JSON.stringify({\r\n                          rowId: currentRow.id,\r\n                          columnId: prevColumn2.columnId,\r\n                        })\r\n                    );\r\n                    if (input && input.disabled) {\r\n                      continue;\r\n                    } else {\r\n                      if (input) {\r\n                        input.focus();\r\n                      }\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                prevInput.focus();\r\n              }\r\n            }\r\n          }\r\n        } else if (evt.keyCode == 39) {\r\n          //right\r\n          evt.preventDefault();\r\n          if (this.thirdTrIdData.length - 1 > columnIndex) {\r\n            let nextColumn = this.thirdTrIdData[columnIndex + 1];\r\n            let currentRow = this.selectedRows[rowIndex];\r\n            let nextInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: currentRow.id,\r\n                  columnId: nextColumn.columnId,\r\n                })\r\n            );\r\n            if (nextInput) {\r\n              if (nextInput.disabled) {\r\n                let forCount = this.thirdTrIdData.length - (columnIndex + 1);\r\n                for (let i = 0; i < forCount; i++) {\r\n                  let nextColumn2 = this.thirdTrIdData[columnIndex + 1 + i];\r\n\r\n                  let input = document.getElementById(\r\n                      JSON.stringify({\r\n                        rowId: currentRow.id,\r\n                        columnId: nextColumn2.columnId,\r\n                      })\r\n                  );\r\n                  if (input.disabled) {\r\n                    continue;\r\n                  } else {\r\n                    if (input) {\r\n                      input.focus();\r\n                    }\r\n                    break;\r\n                  }\r\n                }\r\n              } else {\r\n                nextInput.focus();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async resetIndex() {\r\n      await this.$set(this.currentPosition, \"rowIndex\", null);\r\n      await this.$set(this.currentPosition, \"columnIndex\", null);\r\n      await this.$set(this.currentPosition, \"rowId\", null);\r\n      await this.$set(this.currentPosition, \"columnId\", null);\r\n      // await document.addEventListener(\"keydown\", this.keyUpEvents);\r\n    },\r\n    setError(f1, f2, frowId) {\r\n      this.f1Ids = f1;\r\n      this.f2Ids = f2;\r\n      this.fRowId = frowId;\r\n    },\r\n    keyUpEventsDisable(e) {\r\n      if (this.currentPosition.columnId != null) {\r\n        if (e.which === 38 || e.which === 40) {\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    },\r\n    keyUpEvents(evt) {\r\n      this.keyUpEventsDisable(evt);\r\n      // if (this.currentPosition.columnId != null) {\r\n      //   if (evt.keyCode == 40 && this.currentPosition.rowId != null) {\r\n      //     evt.preventDefault();\r\n      //     // down\r\n      //     if (this.currentPosition.rowIndex < this.selectedRows.length - 1) {\r\n      //       let currentColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex];\r\n      //       let downRowColumn =\r\n      //         this.selectedRows[this.currentPosition.rowIndex + 1];\r\n      //       let downInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: downRowColumn.id,\r\n      //           columnId: currentColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (downInput) {\r\n      //         downInput.focus();\r\n      //       }\r\n      //     }\r\n      //   } else if (evt.keyCode == 38 && this.currentPosition.rowId != null) {\r\n      //     evt.preventDefault();\r\n      //     if (this.currentPosition.rowIndex != 0) {\r\n      //       let currentColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex];\r\n      //       let upRowColumn =\r\n      //         this.selectedRows[this.currentPosition.rowIndex - 1];\r\n      //       let upInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: upRowColumn.id,\r\n      //           columnId: currentColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (upInput) {\r\n      //         upInput.focus();\r\n      //       }\r\n      //     }\r\n      //     //up\r\n      //   } else if (evt.keyCode == 37) {\r\n      //     evt.preventDefault();\r\n      //     //left\r\n      //     if (this.currentPosition.columnIndex != 0) {\r\n      //       let prevColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex - 1];\r\n      //       let currentRow = this.selectedRows[this.currentPosition.rowIndex];\r\n      //       let prevInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: currentRow.id,\r\n      //           columnId: prevColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (prevInput) {\r\n      //         if (prevInput.disabled) {\r\n      //           let count =\r\n      //             this.thirdTrIdData.length -\r\n      //             (this.currentPosition.columnIndex - 1);\r\n      //           for (let i = 0; i < count; i++) {\r\n      //             let prevColumn2 =\r\n      //               this.thirdTrIdData[\r\n      //                 this.currentPosition.columnIndex - 1 - i\r\n      //               ];\r\n      //             let input = document.getElementById(\r\n      //               JSON.stringify({\r\n      //                 rowId: currentRow.id,\r\n      //                 columnId: prevColumn2.columnId,\r\n      //               })\r\n      //             );\r\n      //             if (input && input.disabled) {\r\n      //               continue;\r\n      //             } else {\r\n      //               if (input) {\r\n      //                 input.focus();\r\n      //               }\r\n      //               break;\r\n      //             }\r\n      //           }\r\n      //         } else {\r\n      //           prevInput.focus();\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   } else if (evt.keyCode == 39) {\r\n      //     //right\r\n      //     evt.preventDefault();\r\n      //     if (\r\n      //       this.thirdTrIdData.length - 1 >\r\n      //       this.currentPosition.columnIndex\r\n      //     ) {\r\n      //       let nextColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex + 1];\r\n      //       let currentRow = this.selectedRows[this.currentPosition.rowIndex];\r\n      //       let nextInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: currentRow.id,\r\n      //           columnId: nextColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (nextInput) {\r\n      //         if (nextInput.disabled) {\r\n      //           let forCount =\r\n      //             this.thirdTrIdData.length -\r\n      //             (this.currentPosition.columnIndex + 1);\r\n      //           for (let i = 0; i < forCount; i++) {\r\n      //             let nextColumn2 =\r\n      //               this.thirdTrIdData[\r\n      //                 this.currentPosition.columnIndex + 1 + i\r\n      //               ];\r\n\r\n      //             let input = document.getElementById(\r\n      //               JSON.stringify({\r\n      //                 rowId: currentRow.id,\r\n      //                 columnId: nextColumn2.columnId,\r\n      //               })\r\n      //             );\r\n      //             if (input.disabled) {\r\n      //               continue;\r\n      //             } else {\r\n      //               if (input) {\r\n      //                 input.focus();\r\n      //               }\r\n      //               break;\r\n      //             }\r\n      //           }\r\n      //         } else {\r\n      //           nextInput.focus();\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   }\r\n      // }\r\n    },\r\n\r\n    focusVal(rowId, value, rowIndex, columnIndex, columnId, typeCode) {\r\n      this.$set(this.currentPosition, \"rowIndex\", parseFloat(rowIndex));\r\n      this.$set(this.currentPosition, \"columnIndex\", parseFloat(columnIndex));\r\n      this.$set(this.currentPosition, \"rowId\", parseFloat(rowId));\r\n      this.$set(this.currentPosition, \"columnId\", parseFloat(columnId));\r\n    },\r\n    getFormulas_2() {\r\n      return new Promise((res, rej) => {\r\n        if (this.tableId) {\r\n          Service.formulasByTableId_2(this.tableId)\r\n              .then(({ data }) => {\r\n                this.formulas = data;\r\n                res(data);\r\n              })\r\n              .catch((e) => rej(e));\r\n        } else {\r\n          rej();\r\n        }\r\n      });\r\n    },\r\n    getDataById(id) {\r\n      return new Promise((res, rej) => {\r\n        Service.getReportById(id)\r\n            .then(({ data }) => {\r\n              res(data);\r\n            })\r\n            .catch((e) => rej(e));\r\n      });\r\n    },\r\n    editValue(rowIndex, index) {\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'notEditable', false)\r\n      this.$forceUpdate();\r\n    },\r\n    resetValue(rowIndex, index) {\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueId', this.thirdTrIdData[index].value[rowIndex].originalSelectValueId)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueNameUz', this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueNameLt', this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueNameRu', this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'notEditable', true)\r\n      this.$forceUpdate();\r\n    },\r\n    setValue(rowId, value, rowIndex, index, id, typeCode, notEditable = false, initialLoadCall = false) {\r\n      /* this.thirdTrIdData[index].value[rowIndex] = {\r\n        rowId: rowId ? rowId : null,\r\n        value: typeCode === 'SELECT' ? '' : value,\r\n        selectValueId: value ? value.id : null,\r\n        selectValueNameUz: value ? value.nameUz : null,\r\n        selectValueNameLt: value ? value.nameLt : null,\r\n        selectValueNameRu: value ? value.nameRu : null,\r\n        originalSelectValueNameUz: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz : '',\r\n        originalSelectValueNameLt: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt : '',\r\n        originalSelectValueNameRu: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu : '',\r\n        typeCode: typeCode,\r\n        columnId: id,\r\n        notEditable: notEditable\r\n      }; */\r\n      if (initialLoadCall && typeCode === 'SELECT') {\r\n        let rowIndex = this.selectedRows.findIndex(el => el.id == rowId)\r\n        if (!this.thirdTrIdData[index].value[rowIndex].rowId) {\r\n          this.thirdTrIdData[index].value[rowIndex] = {\r\n            rowId: rowId,\r\n            value: typeCode === 'SELECT' ? '' : value,\r\n            selectValueId: value ? value.id : null,\r\n            selectValueNameUz: value ? (value.nameUz ? value.nameUz : value.name) : null,\r\n            selectValueNameLt: value ? value.nameLt : null,\r\n            selectValueNameRu: value ? value.nameRu : null,\r\n            originalSelectValueNameUz: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz : '',\r\n            originalSelectValueNameLt: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt : '',\r\n            originalSelectValueNameRu: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu : '',\r\n            typeCode: typeCode,\r\n            columnId: id,\r\n            notEditable: notEditable,\r\n          }\r\n          this.thirdTrIdData[index].value[rowIndex].originalselectValueId = value.id\r\n          this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz = value.nameUz\r\n          this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt = value.nameLt\r\n          this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu = value.nameRu\r\n        }\r\n      } else {\r\n        if (typeCode === 'SELECT') {\r\n          value.rowId = rowId\r\n          value.columnId = id\r\n          value.typeCode = typeCode\r\n          value.notEditable = notEditable\r\n          value.selectValueId = value.id\r\n          value.selectValueNameLt = value.nameLt\r\n          value.selectValueNameRu = value.nameRu\r\n          value.selectValueNameUz = value.nameUz ? value.nameUz : value.name\r\n        }\r\n\r\n        this.thirdTrIdData[index].value[rowIndex] = {\r\n          rowId: rowId,\r\n          value: typeCode === 'SELECT' ? '' : value,\r\n          selectValueId: value ? value.id : null,\r\n          selectValueNameUz: value ? value.nameUz : null,\r\n          selectValueNameLt: value ? value.nameLt : null,\r\n          selectValueNameRu: value ? value.nameRu : null,\r\n          originalSelectValueNameUz: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz : '',\r\n          originalSelectValueNameLt: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt : '',\r\n          originalSelectValueNameRu: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu : '',\r\n          typeCode: typeCode,\r\n          columnId: id,\r\n          notEditable: notEditable,\r\n        };\r\n      }\r\n      document.getElementsByClassName(\"no_enter_value\").forEach((input) => {\r\n        if (JSON.parse(input.id).rowId) {\r\n          this.formulas.forEach((e) => {\r\n            let index_f2 = JSON.parse(e.f2).findIndex(\r\n                (d) => d == parseFloat(id)\r\n            );\r\n            let index_f1 = JSON.parse(e.f1).findIndex(\r\n                (d) => d == parseFloat(JSON.parse(input.id).columnId)\r\n            );\r\n            if (\r\n                index_f2 > -1 &&\r\n                index_f1 > -1 &&\r\n                parseFloat(JSON.parse(input.id).rowId) == parseFloat(rowId)\r\n            ) {\r\n              let allVal = 0;\r\n              document.getElementsByClassName(\"input_val\").forEach((vInput) => {\r\n\r\n                let e_index_f2 = JSON.parse(e.f2).findIndex(\r\n                    (d) => d == parseFloat(JSON.parse(vInput.id).columnId)\r\n                );\r\n                if (\r\n                    e_index_f2 > -1 &&\r\n                    parseFloat(JSON.parse(vInput.id).rowId) == parseFloat(rowId)\r\n                ) {\r\n                  if (this._empty(vInput.value)) {\r\n                  } else {\r\n                    if (typeof parseFloat(vInput.value) === \"number\") {\r\n                      allVal += parseFloat(vInput.value);\r\n                    } else {\r\n                      allVal += 0;\r\n                    }\r\n                  }\r\n\r\n                  this.$set(input, \"value\", parseFloat(allVal));\r\n                  let foundIndex = this.thirdTrIdData.findIndex(\r\n                      (e) => e.columnId == JSON.parse(input.id).columnId\r\n                  );\r\n                  this.thirdTrIdData[foundIndex].value[rowIndex] = {\r\n                    rowId: rowId ? rowId : null,\r\n                    value: allVal,\r\n                    typeCode: typeCode,\r\n                    columnId: JSON.parse(input.id).columnId,\r\n                  };\r\n                  this.$forceUpdate();\r\n                }\r\n              });\r\n            }\r\n          });\r\n        } else {\r\n          this.formulas.forEach((e) => {\r\n            let index_f2 = JSON.parse(e.f2).findIndex(\r\n                (d) => d == parseFloat(id)\r\n            );\r\n            let index_f1 = JSON.parse(e.f1).findIndex(\r\n                (d) => d == parseFloat(JSON.parse(input.id).columnId)\r\n            );\r\n\r\n            if (index_f2 > -1 && index_f1 > -1) {\r\n              let allVal = 0;\r\n              document.getElementsByClassName(\"input_val\").forEach((vInput) => {\r\n                let e_index_f2 = JSON.parse(e.f2).findIndex(\r\n                    (d) => d == parseFloat(JSON.parse(vInput.id).columnId)\r\n                );\r\n                if (e_index_f2 > -1) {\r\n                  if (this._empty(vInput.value)) {\r\n                  } else {\r\n                    if (typeof parseFloat(vInput.value) === \"number\") {\r\n                      allVal += parseFloat(vInput.value);\r\n                    } else {\r\n                      allVal += 0;\r\n                    }\r\n                  }\r\n                }\r\n                this.$set(input, \"value\", parseFloat(allVal));\r\n                let foundIndex = this.thirdTrIdData.findIndex(\r\n                    (e) => e.columnId == JSON.parse(input.id).columnId\r\n                );\r\n                this.thirdTrIdData[foundIndex].value[0] = {\r\n                  rowId: null,\r\n                  value: allVal,\r\n                  typeCode: typeCode,\r\n                  columnId: JSON.parse(input.id).columnId,\r\n                };\r\n\r\n                this.$forceUpdate();\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      this.$forceUpdate();\r\n    },\r\n    getById(id, reportId) {\r\n      this.clearAll();\r\n      this.tableId = id;\r\n      this.reportId = reportId;\r\n      this.loader = true;\r\n\r\n      Service.reportGetById(reportId).then(({ data }) => {\r\n        this.report = data;\r\n      });\r\n\r\n      Service.getByIdTable(id, reportId)\r\n          .then(async (rs) => {\r\n            if (rs.data) {\r\n              await this.setColumns(rs.data.columns, rs.data.rows.length);\r\n              this.setRow(rs.data.rows);\r\n              this.table = rs.data.table;\r\n              setTimeout(() => {\r\n                Promise.all([\r\n                  this.getDataById(reportId),\r\n                  this.getFormulas_2(),\r\n                ]).then(([data, formulas]) => {\r\n                  if (data && data.length) {\r\n                    data.forEach((e) => {\r\n\r\n                      if (e.valueString || e.valueBigDecimal) {\r\n                        if (e.typeCode === \"YEAR\") {\r\n                          document.getElementsByClassName(\"custom-datepicker mx-datepicker dynamic-year\").forEach((field, idx) => {\r\n                            if (JSON.parse(field.id).rowId) {\r\n                              if (\r\n                                  parseFloat(JSON.parse(field.id).columnId) === parseFloat(e.columnId) &&\r\n                                  parseFloat(JSON.parse(field.id).rowId) === parseFloat(e.rowId)\r\n                              ) {\r\n                                let rowIndex = this.selectedRows.findIndex(el => el.id == JSON.parse(field.id).rowId)\r\n                                let colIndex = this.thirdTrIdData.findIndex(item => item.columnId === e.columnId)\r\n                                this.setValue(e.rowId, e.value, rowIndex, colIndex, e.columnId, 'DATE')\r\n                              }\r\n                            }\r\n                          })\r\n                        } else {\r\n                          if (e.typeCode === 'BIGDECIMAL') {\r\n                            let foundColumnId = this.showData.findIndex((d) => d.columnId === e.columnId)\r\n\r\n                            if (foundColumnId > -1) {\r\n                              this.showData.map(f => {\r\n\r\n                                if (f.columnId == e.columnId) {\r\n                                  f.columnData = (+f.columnData) + (+e.value)\r\n                                }\r\n                              })\r\n                            } else {\r\n                              this.showData.push({\r\n                                columnId: e.columnId,\r\n                                columnData: (e.value)\r\n                              })\r\n                            }\r\n                          }\r\n                          document\r\n                              .getElementsByClassName(\"input_val\")\r\n                              .forEach((input) => {\r\n                                formulas.forEach((element) => {\r\n                                  let index_V = JSON.parse(element.f1).findIndex(\r\n                                      (e) => e == JSON.parse(input.id).columnId\r\n                                  );\r\n                                  if (index_V > -1) {\r\n                                    this.$set(input, \"disabled\", true);\r\n                                    this.$set(input.style, \"border\", \"none\");\r\n                                    input.classList.add(\"no_enter_value\");\r\n                                    input.style.fontWeight = \"bold\";\r\n                                  }\r\n                                });\r\n                                if (JSON.parse(input.id).rowId) {\r\n                                  if (\r\n                                      parseFloat(JSON.parse(input.id).columnId) ==\r\n                                      parseFloat(e.columnId) &&\r\n                                      parseFloat(JSON.parse(input.id).rowId) ==\r\n                                      parseFloat(e.rowId)\r\n                                  ) {\r\n                                    this.$set(input, \"value\", e.value);\r\n                                  }\r\n                                } else {\r\n                                  if (\r\n                                      parseFloat(JSON.parse(input.id).columnId) ==\r\n                                      parseFloat(e.columnId)\r\n                                  ) {\r\n                                    this.$set(input, \"value\", e.value);\r\n                                  }\r\n                                }\r\n                              });\r\n                        }\r\n                      } else if (e.valueDate) {\r\n                        document.getElementsByClassName(\"custom-datepicker mx-datepicker\").forEach((field, idx) => {\r\n                          if (JSON.parse(field.id).rowId) {\r\n                            if (\r\n                                parseFloat(JSON.parse(field.id).columnId) ==\r\n                                parseFloat(e.columnId) &&\r\n                                parseFloat(JSON.parse(field.id).rowId) ==\r\n                                parseFloat(e.rowId)\r\n                            ) {\r\n                              let colIndex = this.thirdTrIdData.findIndex(item => item.columnId == e.columnId)\r\n                              this.setValue(\r\n                                  e.rowId,\r\n                                  e.value,\r\n                                  idx,\r\n                                  colIndex,\r\n                                  e.columnId,\r\n                                  'DATE'\r\n                              )\r\n                            }\r\n                          }\r\n                        })\r\n                      } else if (e.valueBoolean !== null) {\r\n                        document.getElementsByClassName(\"checkbox_field\").forEach((field, idx) => {\r\n                          let checkboxInput = field.children[0].children[0].children[0]\r\n                          if (JSON.parse(checkboxInput.id).rowId) {\r\n                            if (\r\n                                parseFloat(JSON.parse(checkboxInput.id).columnId) ==\r\n                                parseFloat(e.columnId) &&\r\n                                parseFloat(JSON.parse(checkboxInput.id).rowId) ==\r\n                                parseFloat(e.rowId)\r\n                            ) {\r\n\r\n                              let colIndex = this.thirdTrIdData.findIndex(item => item.columnId == e.columnId)\r\n\r\n                              this.setValue(\r\n                                  e.rowId,\r\n                                  JSON.parse(e.value),\r\n                                  idx,\r\n                                  colIndex,\r\n                                  e.columnId,\r\n                                  'BOOLEAN'\r\n                              )\r\n                            }\r\n                          }\r\n                        })\r\n                      } else if (e.selectValueNameUz) {\r\n                        document.getElementsByClassName(\"select_field\").forEach((field, idx) => {\r\n                          if (JSON.parse(field.id).rowId) {\r\n                            if (\r\n                                parseFloat(JSON.parse(field.id).columnId) ==\r\n                                parseFloat(e.columnId) &&\r\n                                parseFloat(JSON.parse(field.id).rowId) ==\r\n                                parseFloat(e.rowId)\r\n                            ) {\r\n                              let colIndex = this.thirdTrIdData.findIndex(item => item.columnId == e.columnId)\r\n                              this.setValue(\r\n                                  e.rowId,\r\n                                  {\r\n                                    id: e.id,\r\n                                    nameUz: e.selectValueNameUz,\r\n                                    nameLt: e.selectValueNameLt,\r\n                                    nameRu: e.selectValueNameRu\r\n                                  },\r\n                                  idx,\r\n                                  colIndex,\r\n                                  e.columnId,\r\n                                  'SELECT',\r\n                                  true,\r\n                                  true\r\n                              )\r\n                            }\r\n                          }\r\n                        })\r\n                      }\r\n                    });\r\n                  } else {\r\n                    document\r\n                        .getElementsByClassName(\"input_val\")\r\n                        .forEach((input) => {\r\n                          formulas.forEach((element) => {\r\n                            let index_V = JSON.parse(element.f1).findIndex(\r\n                                (e) => e == JSON.parse(input.id).columnId\r\n                            );\r\n                            if (index_V > -1) {\r\n                              this.$set(input, \"disabled\", true);\r\n                              this.$set(input.style, \"border\", \"none\");\r\n                              input.classList.add(\"no_enter_value\");\r\n                              input.style.fontWeight = \"bold\";\r\n                            }\r\n                          });\r\n                        });\r\n                  }\r\n\r\n                  this.loader = false;\r\n                });\r\n              }, 500);\r\n            }\r\n          })\r\n          .catch((e) => {\r\n            this.loader = false;\r\n            // this.catchErr(e);\r\n          });\r\n\r\n\r\n    },\r\n    async setColumns(v, rowsCount) {\r\n      this.selectedColumns = v;\r\n      this.firstColumns = [];\r\n      this.secondColumns = [];\r\n      this.thirdColumns = [];\r\n      v.forEach((el1) => {\r\n        this.firstColumns.push(el1);\r\n        el1.children.forEach((el2) => {\r\n          this.secondColumns.push(el2);\r\n          el2.children.forEach((el3) => {\r\n            this.thirdColumns.push({ ...el3, fId: el1.id });\r\n          });\r\n        });\r\n      });\r\n      setTimeout(async () => {\r\n        // this.thirdTrIdData = Array.prototype.slice\r\n        //   .call(document.getElementsByClassName(\"thirdTrId\"))\r\n        //   .map((e) => {\r\n        //     let array = e.id.split(\",\");\r\n        //     return {\r\n        //       columnId: array[0],\r\n        //       typeCode: array[1],\r\n        //       rowId: [],\r\n        //       value: [],\r\n        //     };\r\n        //   });\r\n        let firstTrTh = document.getElementsByClassName(\"firstTrTh\");\r\n        let secondTrTh = document.getElementsByClassName(\"secondTrTh\");\r\n        let thirdTrTh = document.getElementsByClassName(\"thirdTrTh\");\r\n        let counter2 = 0,\r\n            counter3 = 0;\r\n        await firstTrTh.forEach(async (th) => {\r\n          if (th.colSpan > 1) {\r\n            for (let index2 = 0; index2 < th.colSpan; index2++) {\r\n              if (secondTrTh[counter2] && secondTrTh[counter2].colSpan > 1) {\r\n                for (\r\n                    let index3 = 0;\r\n                    index3 < secondTrTh[counter2].colSpan;\r\n                    index3++\r\n                ) {\r\n                  let array = thirdTrTh[counter3].id.split(\",\");\r\n                  let tmp = {\r\n                    columnId: array[0],\r\n                    typeCode: array[1],\r\n                    refCode: array[2],\r\n                    referenceUrl: array[3],\r\n                    referenceAppendUrl: array[4],\r\n                    referenceCode: array[5],\r\n                    referenceNameUz: array[6],\r\n                    referenceNameLt: array[7],\r\n                    referenceNameRu: array[8],\r\n                    searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                    hasNextPage: false,\r\n                    options: [],\r\n                    rowId: [],\r\n                    value: [],\r\n                  };\r\n                  // GET DYNAMIC REFRENCE OPTIONS\r\n                  if (tmp.typeCode === 'SELECT') {\r\n                    for (let i = 0; i < rowsCount; i++) {\r\n                      tmp.value.push({ selectedItem: null })\r\n                    }\r\n                    crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                        .then(res => {\r\n                          tmp.options.push(...res.data.list)\r\n                          tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                          tmp.searchPayload.page += 1\r\n                          /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                              let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                              if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                  this.okeds.push(this.editingItem.infoOkedDto)\r\n                              }\r\n                          } */\r\n                        })\r\n                        .catch(e => {\r\n                          console.log(e)\r\n                          // this.okeds = []\r\n                        })\r\n                        .finally(() => {\r\n                          // this.isLoadingOked = false\r\n                        })\r\n                  }\r\n                  this.thirdTrIdData.push(tmp);\r\n                  counter3++;\r\n                }\r\n                counter2++;\r\n              } else {\r\n                if (\r\n                    secondTrTh[counter2] &&\r\n                    secondTrTh[counter2].classList.contains(\"thirdTrId\")\r\n                ) {\r\n                  let array = secondTrTh[counter2].id.split(\",\");\r\n                  let tmp = {\r\n                    columnId: array[0],\r\n                    typeCode: array[1],\r\n                    refCode: array[2],\r\n                    referenceUrl: array[3],\r\n                    referenceAppendUrl: array[4],\r\n                    referenceCode: array[5],\r\n                    referenceNameUz: array[6],\r\n                    referenceNameLt: array[7],\r\n                    referenceNameRu: array[8],\r\n                    searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                    hasNextPage: false,\r\n                    options: [],\r\n                    rowId: [],\r\n                    value: [],\r\n                  };\r\n                  // GET DYNAMIC REFRENCE OPTIONS\r\n                  if (tmp.typeCode === 'SELECT') {\r\n                    for (let i = 0; i < rowsCount; i++) {\r\n                      tmp.value.push({ selectedItem: null })\r\n                    }\r\n                    crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                        .then(res => {\r\n                          tmp.options.push(...res.data.list)\r\n                          tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                          tmp.searchPayload.page += 1\r\n                          /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                              let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                              if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                  this.okeds.push(this.editingItem.infoOkedDto)\r\n                              }\r\n                          } */\r\n                        })\r\n                        .catch(e => {\r\n                          console.log(e)\r\n                          // this.okeds = []\r\n                        })\r\n                        .finally(() => {\r\n                          // this.isLoadingOked = false\r\n                        })\r\n                  }\r\n                  this.thirdTrIdData.push(tmp);\r\n                  counter2++;\r\n                } else {\r\n                  if (secondTrTh[counter2]) {\r\n                    for (\r\n                        let index3 = 0;\r\n                        index3 < secondTrTh[counter2].colSpan;\r\n                        index3++\r\n                    ) {\r\n                      let array = thirdTrTh[counter3].id.split(\",\");\r\n                      let tmp = {\r\n                        columnId: array[0],\r\n                        typeCode: array[1],\r\n                        refCode: array[2],\r\n                        referenceUrl: array[3],\r\n                        referenceAppendUrl: array[4],\r\n                        referenceCode: array[5],\r\n                        referenceNameUz: array[6],\r\n                        referenceNameLt: array[7],\r\n                        referenceNameRu: array[8],\r\n                        searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                        hasNextPage: false,\r\n                        options: [],\r\n                        rowId: [],\r\n                        value: [],\r\n                      };\r\n                      // GET DYNAMIC REFRENCE OPTIONS\r\n                      if (tmp.typeCode === 'SELECT') {\r\n                        for (let i = 0; i < rowsCount; i++) {\r\n                          tmp.value.push({ selectedItem: null })\r\n                        }\r\n                        crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                            .then(res => {\r\n                              tmp.options.push(...res.data.list)\r\n                              tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                              tmp.searchPayload.page += 1\r\n                              /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                  let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                  if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                      this.okeds.push(this.editingItem.infoOkedDto)\r\n                                  }\r\n                              } */\r\n                            })\r\n                            .catch(e => {\r\n                              console.log(e)\r\n                              // this.okeds = []\r\n                            })\r\n                            .finally(() => {\r\n                              // this.isLoadingOked = false\r\n                            })\r\n                      }\r\n                      this.thirdTrIdData.push(tmp);\r\n                      counter3++;\r\n                    }\r\n\r\n                    counter2++;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            if (th.classList.contains(\"thirdTrId\")) {\r\n              let array = th.id.split(\",\");\r\n              let tmp = {\r\n                columnId: array[0],\r\n                typeCode: array[1],\r\n                refCode: array[2],\r\n                referenceUrl: array[3],\r\n                referenceAppendUrl: array[4],\r\n                referenceCode: array[5],\r\n                referenceNameUz: array[6],\r\n                referenceNameLt: array[7],\r\n                referenceNameRu: array[8],\r\n                searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                hasNextPage: false,\r\n                options: [],\r\n                rowId: [],\r\n                value: [],\r\n              };\r\n              // GET DYNAMIC REFRENCE OPTIONS\r\n              if (tmp.typeCode === 'SELECT') {\r\n                for (let i = 0; i < rowsCount; i++) {\r\n                  tmp.value.push({ selectedItem: null })\r\n                }\r\n                crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                    .then(res => {\r\n                      tmp.options.push(...res.data.list)\r\n                      tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                      tmp.searchPayload.page += 1\r\n                      /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                          let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                          if (!foundItm && this.editingItem.infoOkedDto) {\r\n                              this.okeds.push(this.editingItem.infoOkedDto)\r\n                          }\r\n                      } */\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e)\r\n                      // this.okeds = []\r\n                    })\r\n                    .finally(() => {\r\n                      // this.isLoadingOked = false\r\n                    })\r\n              }\r\n              this.thirdTrIdData.push(tmp);\r\n            } else {\r\n              for (let index2 = 0; index2 < th.colSpan; index2++) {\r\n                if (secondTrTh[counter2].colSpan > 1) {\r\n                  for (\r\n                      let index3 = 0;\r\n                      index3 < secondTrTh[counter2].colSpan;\r\n                      index3++\r\n                  ) {\r\n                    let array = thirdTrTh[counter3].id.split(\",\");\r\n                    let tmp = {\r\n                      columnId: array[0],\r\n                      typeCode: array[1],\r\n                      refCode: array[2],\r\n                      referenceUrl: array[3],\r\n                      referenceAppendUrl: array[4],\r\n                      referenceCode: array[5],\r\n                      referenceNameUz: array[6],\r\n                      referenceNameLt: array[7],\r\n                      referenceNameRu: array[8],\r\n                      searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                      hasNextPage: false,\r\n                      options: [],\r\n                      rowId: [],\r\n                      value: [],\r\n                    };\r\n                    // GET DYNAMIC REFRENCE OPTIONS\r\n                    if (tmp.typeCode === 'SELECT') {\r\n                      for (let i = 0; i < rowsCount; i++) {\r\n                        tmp.value.push({ selectedItem: null })\r\n                      }\r\n                      crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                          .then(res => {\r\n                            tmp.options.push(...res.data.list)\r\n                            tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                            tmp.searchPayload.page += 1\r\n                            /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                    this.okeds.push(this.editingItem.infoOkedDto)\r\n                                }\r\n                            } */\r\n                          })\r\n                          .catch(e => {\r\n                            console.log(e)\r\n                            // this.okeds = []\r\n                          })\r\n                          .finally(() => {\r\n                            // this.isLoadingOked = false\r\n                          })\r\n                    }\r\n                    this.thirdTrIdData.push(tmp);\r\n                    counter3++;\r\n                  }\r\n                  counter2++;\r\n                } else {\r\n                  if (\r\n                      secondTrTh[counter2] &&\r\n                      secondTrTh[counter2].classList.contains(\"thirdTrId\")\r\n                  ) {\r\n                    let array = secondTrTh[counter2].id.split(\",\");\r\n                    let tmp = {\r\n                      columnId: array[0],\r\n                      typeCode: array[1],\r\n                      refCode: array[2],\r\n                      referenceUrl: array[3],\r\n                      referenceAppendUrl: array[4],\r\n                      referenceCode: array[5],\r\n                      referenceNameUz: array[6],\r\n                      referenceNameLt: array[7],\r\n                      referenceNameRu: array[8],\r\n                      searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                      hasNextPage: false,\r\n                      options: [],\r\n                      rowId: [],\r\n                      value: [],\r\n                    };\r\n                    // GET DYNAMIC REFRENCE OPTIONS\r\n                    if (tmp.typeCode === 'SELECT') {\r\n                      for (let i = 0; i < rowsCount; i++) {\r\n                        tmp.value.push({ selectedItem: null })\r\n                      }\r\n                      crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                          .then(res => {\r\n                            tmp.options.push(...res.data.list)\r\n                            tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                            tmp.searchPayload.page += 1\r\n                            /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                    this.okeds.push(this.editingItem.infoOkedDto)\r\n                                }\r\n                            } */\r\n                          })\r\n                          .catch(e => {\r\n                            console.log(e)\r\n                            // this.okeds = []\r\n                          })\r\n                          .finally(() => {\r\n                            // this.isLoadingOked = false\r\n                          })\r\n                    }\r\n                    this.thirdTrIdData.push(tmp);\r\n                    counter2++;\r\n                  } else {\r\n                    if (secondTrTh[counter2]) {\r\n                      for (\r\n                          let index3 = 0;\r\n                          index3 < secondTrTh[counter2].colSpan;\r\n                          index3++\r\n                      ) {\r\n                        let array = thirdTrTh[counter3].id.split(\",\");\r\n                        let tmp = {\r\n                          columnId: array[0],\r\n                          typeCode: array[1],\r\n                          refCode: array[2],\r\n                          referenceUrl: array[3],\r\n                          referenceAppendUrl: array[4],\r\n                          referenceCode: array[5],\r\n                          referenceNameUz: array[6],\r\n                          referenceNameLt: array[7],\r\n                          referenceNameRu: array[8],\r\n                          searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                          hasNextPage: false,\r\n                          options: [],\r\n                          rowId: [],\r\n                          value: [],\r\n                        };\r\n                        // GET DYNAMIC REFRENCE OPTIONS\r\n                        if (tmp.typeCode === 'SELECT') {\r\n                          for (let i = 0; i < rowsCount; i++) {\r\n                            tmp.value.push({ selectedItem: null })\r\n                          }\r\n                          crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                              .then(res => {\r\n                                tmp.options.push(...res.data.list)\r\n                                tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                                tmp.searchPayload.page += 1\r\n                                /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                    let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                    if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                        this.okeds.push(this.editingItem.infoOkedDto)\r\n                                    }\r\n                                } */\r\n                              })\r\n                              .catch(e => {\r\n                                console.log(e)\r\n                                // this.okeds = []\r\n                              })\r\n                              .finally(() => {\r\n                                // this.isLoadingOked = false\r\n                              })\r\n                        }\r\n                        this.thirdTrIdData.push(tmp);\r\n                        counter3++;\r\n                      }\r\n                      counter2++;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }, 300);\r\n    },\r\n    setRow(v) {\r\n      this.selectedRows = v;\r\n      if (this.selectedRows.length == 0) {\r\n        this.selectedRows = [{}];\r\n      }\r\n    },\r\n\r\n    rowspanFirst(el) {\r\n      return el.children.length > 0\r\n          ? 1\r\n          : el.children.length > 0 && this.thirdColumns.length > 0\r\n              ? 3\r\n              : 3;\r\n    },\r\n    colspanFirst(el) {\r\n      let found = this.thirdColumns.filter((i) => i.fId === el.id);\r\n      let totalNotChild = el.children.filter((d) => d.children.length == 0);\r\n      return el.children.length > 0 && found.length == 0\r\n          ? el.children.length\r\n          : el.children.length > 0 && found.length > 0\r\n              ? totalNotChild.length + found.length\r\n              : 1;\r\n    },\r\n\r\n    rowspanSecond(el) {\r\n      return el.children.length == 0 && this.thirdColumns.length == 0\r\n          ? 1\r\n          : el.children.length == 0 && this.thirdColumns.length > 0\r\n              ? 2\r\n              : 1;\r\n    },\r\n    colspanSecond(el) {\r\n      return el.children.length > 0 ? el.children.length : 1;\r\n    },\r\n\r\n    rowspanFirstClass(el) {\r\n      return el.children.length > 0\r\n          ? \"\"\r\n          : el.children.length > 0 && this.thirdColumns.length > 0\r\n              ? \"thirdTrId\"\r\n              : \"thirdTrId\";\r\n    },\r\n    rowspanSecondClass(el) {\r\n      return el.children.length == 0 && this.thirdColumns.length == 0\r\n          ? \"thirdTrId\"\r\n          : el.children.length == 0 && this.thirdColumns.length > 0\r\n              ? \"thirdTrId\"\r\n              : \"\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div>\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <h5 class=\"text-center mb-1\">\r\n            <strong>\r\n              {{ getName({ nameLt: table.nameLt, nameRu: table.nameRu }) }}\r\n\r\n            </strong>\r\n          </h5>\r\n          <p class=\"text-center m-0\">\r\n            {{ getName({ nameLt: table.titleLt, nameRu: table.titleRu }) }}\r\n\r\n          </p>\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <div class=\"d-flex justify-content-between align-items-end pl-3 pr-3\">\r\n            <div>\r\n              <strong>\r\n                {{\r\n                  getName({\r\n                    nameLt: report.nameLt,\r\n                    nameRu: report.nameRu,\r\n                    nameUz: report.nameUz\r\n                  })\r\n                }}\r\n              </strong><br>\r\n              <span>\r\n                {{\r\n                  report.reportDate\r\n                }}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <strong>\r\n                {{\r\n                  getName({\r\n                    nameLt: table.conditionLt,\r\n                    nameRu: table.conditionRu,\r\n                  })\r\n                }}\r\n              </strong>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <b-overlay :opacity=\"0.1\" :show=\"loader\" rounded=\"sm\">\r\n            <div class=\"bg-white pl-3 pr-3 pt-1\" style=\"min-height: 60vh; overflow: auto;\">\r\n              <div class=\"pb-5\">\r\n                <table class=\"table thead-table table-centered  table-custom-bordered\">\r\n                  <thead>\r\n                  <tr class=\"tr-text-center\">\r\n                    <th\r\n                        :id=\"[el.id, el.typeCode, el.refCode, el.referenceUrl, el.referenceAppendUrl, el.referenceCode, el.referenceNameUz, el.referenceNameLt, el.referenceNameRu]\"\r\n                        :class=\"rowspanFirstClass(el, index)\"\r\n                        class=\"firstTrTh\"\r\n                        style=\"min-width: 70px\"\r\n                        :rowspan=\"rowspanFirst(el)\"\r\n                        :colspan=\"colspanFirst(el)\"\r\n                        v-for=\"(el, index) in firstColumns\"\r\n                        :key=\"index + 'first'\"\r\n                    >\r\n                      <div style=\" max-height: 200px; display: inline-block; \">\r\n                        <div :class=\" (el.isVertical == 1 ) ? 'rotate_text' : '' \">\r\n                          {{\r\n                            getName({ nameLt: el.nameLt, nameRu: el.nameRu, nameUz: el.nameUz })\r\n                          }}\r\n                        </div>\r\n                      </div>\r\n                    </th>\r\n                  </tr>\r\n                  <tr class=\"tr-text-center\">\r\n                    <th\r\n                        style=\"min-width: 70px\"\r\n                        :id=\"[el.id, el.typeCode, el.refCode, el.referenceUrl, el.referenceAppendUrl, el.referenceCode, el.referenceNameUz, el.referenceNameLt, el.referenceNameRu]\"\r\n                        :class=\"rowspanSecondClass(el)\"\r\n                        class=\"secondTrTh\"\r\n                        :rowspan=\"rowspanSecond(el)\"\r\n                        :colspan=\"colspanSecond(el)\"\r\n                        v-for=\"(el, index) in secondColumns\"\r\n                        :key=\"index + 'second'\"\r\n                    >\r\n                      <div style=\" max-height: 200px; position: relative; display: inline-block; cursor: pointer;\">\r\n                        <div :class=\"(el.isVertical == 1 )  ? 'rotate_text' : ''\">\r\n                          {{ getName({ nameLt: el.nameLt, nameRu: el.nameRu, nameUz: el.nameUz }) }}\r\n                        </div>\r\n                      </div>\r\n                    </th>\r\n                  </tr>\r\n\r\n                  <tr class=\"tr-text-center\">\r\n                    <th\r\n                        style=\"min-width: 70px\"\r\n                        :id=\"[el.id, el.typeCode, el.refCode, el.referenceUrl, el.referenceAppendUrl, el.referenceCode, el.referenceNameUz, el.referenceNameLt, el.referenceNameRu]\"\r\n                        class=\"thirdTrId thirdTrTh\"\r\n                        :colspan=\"el.children.length > 0 ? el.children.length : 1\"\r\n                        v-for=\"(el, index) in thirdColumns\"\r\n                        :key=\"index + 'third'\"\r\n                    >\r\n                      <div style=\" max-height: 200px; position: relative; display: inline-block; cursor: pointer; \">\r\n                        <div :class=\"(el.isVertical == 1 )  ? 'rotate_text' : ''\">\r\n                          {{\r\n                            getName({ nameLt: el.nameLt, nameRu: el.nameRu, nameUz: el.nameUz })\r\n                          }}\r\n                        </div>\r\n                      </div>\r\n                    </th>\r\n                  </tr>\r\n\r\n                  <tr class=\"tr-text-center\">\r\n                    <td v-for=\"(item, index) of thirdTrIdData\" :key=\"index + 'I-1'\">\r\n                      <strong v-if=\"selectedRows.length > 1\">\r\n                        {{\r\n                          selectedRows.length > 1 && index == 0 ? \"\" : index\r\n                        }}\r\n                      </strong>\r\n                      <strong v-else>\r\n                        {{ index + 1 }}\r\n                      </strong>\r\n                    </td>\r\n                  </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  <tr v-for=\"(data, index1) in selectedRows\" :key=\"index1 + 'MM'\">\r\n                    <!-- <th>\r\n                      {{ getName({ ...data }) }}\r\n                    </th> -->\r\n\r\n                    <td\r\n                        :class=\"[\r\n                          f1Ids &&\r\n                          f1Ids.indexOf(i.columnId) > -1 &&\r\n                          selectedRows.length > 1 &&\r\n                          fRowId == data.id\r\n                            ? 'bg-success'\r\n                            : f1Ids &&\r\n                              f1Ids.indexOf(i.columnId) > -1 &&\r\n                              selectedRows.length <= 1\r\n                            ? 'bg-success'\r\n                            : '',\r\n                          f2Ids &&\r\n                          f2Ids.indexOf(i.columnId) > -1 &&\r\n                          selectedRows.length > 1 &&\r\n                          fRowId == data.id\r\n                            ? 'bg-primary'\r\n                            : f2Ids &&\r\n                              f2Ids.indexOf(i.columnId) > -1 &&\r\n                              selectedRows.length <= 1\r\n                            ? 'bg-primary'\r\n                            : '',\r\n                        ]\"\r\n                        v-for=\"(i, index) in thirdTrIdData\"\r\n                        :key=\"index + 'td'\"\r\n                        class=\"text-center p\"\r\n                    >\r\n                      <p class=\"m-0 p-2\" v-if=\"data.id && index == 0\">\r\n                        {{ getName(data) }}\r\n                      </p>\r\n\r\n                      <div\r\n                          v-else-if=\"i.typeCode === 'SELECT' && thirdTrIdData[index].value[index1] && thirdTrIdData[index].value[index1].notEditable\"\r\n                          v-b-tooltip=\"{ variant: 'info' }\"\r\n                          class=\"cursor-pointer\"\r\n                          @click=\"editValue(index1, index)\"\r\n                          :title=\"$t('actions.click_to_edit')\"\r\n                      >\r\n                        {{\r\n                          getName({\r\n                            nameUz: thirdTrIdData[index].value[index1].selectValueNameUz,\r\n                            nameLt: thirdTrIdData[index].value[index1].selectValueNameLt,\r\n                            nameRu: thirdTrIdData[index].value[index1].selectValueNameRu\r\n                          })\r\n                        }}\r\n                      </div>\r\n                      <!-- FOR SELECT -->\r\n                      <div v-else-if=\"i.typeCode === 'SELECT'\" style=\"min-width: 300px;\">\r\n                        <BaseMultiselectWithValidation\r\n                            v-if=\"thirdTrIdData[index].value[index1]\"\r\n                            not-required\r\n                            only-form-element\r\n                            v-model=\"thirdTrIdData[index].value[index1].selectedItem\"\r\n                            class=\"select_field\"\r\n                            :id=\"\r\n                                JSON.stringify({\r\n                                  rowId: data.id,\r\n                                  columnId: i.columnId,\r\n                                })\r\n                              \"\r\n                            :custom-label=\"({nameUz, nameLt, nameRu}) => getName({nameUz: nameUz, nameLt: nameLt, nameRu: nameRu})\"\r\n                            @select=\"setValue(\r\n                                    data.id,\r\n                                    $event,\r\n                                    index1,\r\n                                    index,\r\n                                    i.columnId,\r\n                                    i.typeCode,\r\n                                    i.notEditable\r\n                                )\"\r\n                            :options=\"i.options\"\r\n                            :placeholder=\"getName({nameUz: i.referenceNameUz, nameLt: i.referenceNameLt, nameRu: i.referenceNameRu})\"\r\n                            open-direction=\"bottom\"\r\n                            :max-height=\"600\"\r\n                            :show-labels=\"false\"\r\n                            :has-next-page=\"i.hasNextPage\"\r\n                            @reachedEndOfList=\"dynamicRefsReachedEndOfList\"\r\n                            @search-change=\"debounceSearchDynamicRefs\"\r\n                            :searchable=\"true\"\r\n                            preserve-search\r\n                            :clear-on-select=\"false\"\r\n                            :loading=\"i.isLoading\"\r\n                            :internal-search=\"false\"\r\n                            :with-create-addition=\"(thirdTrIdData[index].value[index1] && thirdTrIdData[index].value[index1].originalSelectValueNameUz) ? true : false\"\r\n                        >\r\n                          <template v-slot:append-slot>\r\n                            <b-btn\r\n                                v-if=\"thirdTrIdData[index].value[index1] && thirdTrIdData[index].value[index1].originalSelectValueNameUz\"\r\n                                variant=\"link\"\r\n                                class=\"text-decoration-none p-0 text-danger\"\r\n                                style=\"font-size: 1.2rem;\"\r\n                            >\r\n                              <i @click=\"resetValue(index1, index)\" class=\"mdi mdi-refresh\"></i>\r\n                            </b-btn>\r\n                          </template>\r\n                        </BaseMultiselectWithValidation>\r\n                        <BaseMultiselectWithValidation\r\n                            v-else-if=\"!thirdTrIdData[index].value[index1]\"\r\n                            not-required\r\n                            only-form-element\r\n                            class=\"select_field\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId})\"\r\n                            v-model=\"thirdTrIdData[index].value[index1]\"\r\n                            :custom-label=\"({nameUz, nameLt, nameRu}) => getName({nameUz: nameUz, nameLt: nameLt, nameRu: nameRu})\"\r\n                            @select=\"setValue( data.id, $event, index1, index, i.columnId, i.typeCode, i.notEditable )\"\r\n                            :options=\"i.options\"\r\n                            :placeholder=\"getName({nameUz: i.referenceNameUz, nameLt: i.referenceNameLt, nameRu: i.referenceNameRu})\"\r\n                            open-direction=\"bottom\"\r\n                            :max-height=\"600\"\r\n                            :show-labels=\"false\"\r\n                            :has-next-page=\"i.hasNextPage\"\r\n                            @reachedEndOfList=\"dynamicRefsReachedEndOfList\"\r\n                            @search-change=\"debounceSearchDynamicRefs\"\r\n                            :searchable=\"true\"\r\n                            preserve-search\r\n                            :clear-on-select=\"false\"\r\n                            :loading=\"i.isLoading\"\r\n                            :internal-search=\"false\"\r\n                        />\r\n                      </div>\r\n                      <!-- FOR DATE -->\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'DATE' && thirdTrIdData[index].value[index1]\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          placeholder=\"\"\r\n                          v-model=\"thirdTrIdData[index].value[index1].value\"\r\n                          class=\"datepicker_field\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                          lang=\"ru\"\r\n                      />\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'DATE'\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          class=\"datepicker_field\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          placeholder=\"\"\r\n                          @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                          lang=\"ru\"\r\n                      />\r\n\r\n                      <!-- FOR YEAR -->\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'YEAR' && thirdTrIdData[index].value[index1]\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          placeholder=\"\"\r\n                          v-model=\"thirdTrIdData[index].value[index1].value\"\r\n                          class=\"datepicker_field\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                          lang=\"ru\"\r\n                          type=\"year\"\r\n                      />\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'YEAR'\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          class=\"datepicker_field\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          placeholder=\"\"\r\n                          @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                          lang=\"ru\"\r\n                          type=\"year\"\r\n                      />\r\n\r\n                      <!-- FOR STRING -->\r\n                      <div v-else-if=\"i.typeCode === 'STRING'\" style=\"min-width: 300px;\">\r\n                        <b-form-input\r\n                            @keydown=\"(evt) =>keydownEvt(evt,data.id,evt.target.value,index1,index,i.columnId,i.typeCode)\"\r\n                            :class=\"\r\n                              currentPosition.rowId &&\r\n                              currentPosition.columnId &&\r\n                              i.columnId == currentPosition.columnId &&\r\n                              data.id == currentPosition.rowId\r\n                                ? 'borderInput'\r\n                                : currentPosition.columnId &&\r\n                                  !currentPosition.rowId &&\r\n                                  i.columnId == currentPosition.columnId\r\n                                ? 'borderInput'\r\n                                : ''\r\n                            \"\r\n                            @focus=\"(e) =>focusVal(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                            :style=\"report.status && report.status !== 'CREATED'? 'border: none !important': ''\"\r\n                            :disabled=\"report.status && report.status !== 'CREATED'\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                            @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                            class=\"text-center input_val p-0\"\r\n                        >\r\n                        </b-form-input>\r\n                      </div>\r\n                      <!-- FOR BOOLEAN -->\r\n                      <Checkbox\r\n                          v-else-if=\"i.typeCode === 'BOOLEAN' && thirdTrIdData[index].value[index1]\"\r\n                          v-model=\"thirdTrIdData[index].value[index1].value\"\r\n                          :font-size=\"0\"\r\n                          :disabled=\"report.status && report.status !== 'CREATED'\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          class=\"justify-content-center checkbox_field\"\r\n                          @change=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                      />\r\n                      <Checkbox\r\n                          v-else-if=\"i.typeCode === 'BOOLEAN'\"\r\n                          :font-size=\"0\"\r\n                          :disabled=\"report.status && report.status !== 'CREATED'\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          class=\"justify-content-center checkbox_field\"\r\n                          @change=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                      />\r\n                      <!-- FOR INTEGER -->\r\n                      <div v-else>\r\n                        <b-form-input\r\n                            @keydown=\"(evt) =>keydownEvt(evt,data.id,evt.target.value,index1,index,i.columnId,i.typeCode)\"\r\n                            :class=\"\r\n                              currentPosition.rowId &&\r\n                              currentPosition.columnId &&\r\n                              i.columnId == currentPosition.columnId &&\r\n                              data.id == currentPosition.rowId\r\n                                ? 'borderInput'\r\n                                : currentPosition.columnId &&\r\n                                  !currentPosition.rowId &&\r\n                                  i.columnId == currentPosition.columnId\r\n                                ? 'borderInput'\r\n                                : ''\r\n                            \"\r\n                            @focus=\"(e) =>focusVal(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                            :style=\"report.status && report.status !== 'CREATED'? 'border: none !important': ''\"\r\n                            :disabled=\"report.status && report.status !== 'CREATED'\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                            @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                            type=\"number\"\r\n                            class=\"text-center input_val p-0\"\r\n                        >\r\n                        </b-form-input>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                  </tbody>\r\n                  <tfoot>\r\n                  <tr class=\"mt-5\" v-show=\"showResult\"\r\n                  >\r\n                    <td v-for=\"(i, index) in thirdTrIdData\"\r\n                        :key=\"index + 'td'\"\r\n                        class=\"text-center p\"\r\n                    >\r\n                      <p v-if=\"index === 0\">Jami</p>\r\n                      <div v-else-if=\"i.typeCode === 'BIGDECIMAL'\">\r\n                        {{ getColumnData(i) }}\r\n                      </div>\r\n                      <div v-else>---</div>\r\n                    </td>\r\n                  </tr>\r\n                  </tfoot>\r\n                </table>\r\n              </div>\r\n              <div>\r\n              </div>\r\n            </div>\r\n          </b-overlay>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<style lang=\"scss\">\r\n.borderInput {\r\n  border: 2px solid green !important;\r\n}\r\n\r\nth {\r\n  /* &#SELECT {\r\n    width: 20%;\r\n  } */\r\n  &[id*=\"SELECT\"] {\r\n    width: 150px;\r\n  }\r\n}\r\n\r\n.check {\r\n  margin-top: 5px;\r\n\r\n  .m-chckbox--container {\r\n    margin: 0px !important;\r\n    width: 22px !important;\r\n  }\r\n\r\n  label {\r\n    margin: 0;\r\n    display: none;\r\n  }\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n/* Chrome, Safari, Edge, Opera */\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n/* Firefox */\r\ninput[type=\"number\"] {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n.rotate_text {\r\n  height: 100%;\r\n  word-break: normal;\r\n  writing-mode: vertical-rl;\r\n  -ms-writing-mode: vertical-lr;\r\n  -webkit-transform: rotate(-180deg);\r\n  -moz-transform: rotate(-180deg);\r\n  -o-transform: rotate(-180deg);\r\n  transform: rotate(-180deg);\r\n  padding-bottom: 20px !important;\r\n  padding-top: 20px !important;\r\n}\r\n\r\n.no_enter_value {\r\n  padding: 0px !important;\r\n  min-width: auto !important;\r\n}\r\n</style>\r\n"]}]}