{"remainingRequest":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js??ref--12-0!D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js!D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\interactive-services\\src\\modules\\reporting\\menu\\Index.vue?vue&type=template&id=de9f42c6&scoped=true","dependencies":[{"path":"D:\\ACRU\\interactive-services\\src\\modules\\reporting\\menu\\Index.vue","mtime":1709020148478},{"path":"D:\\ACRU\\interactive-services\\babel.config.js","mtime":1709020148252},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}