{"remainingRequest":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ACRU\\interactive-services\\src\\modules\\reporting\\menu\\Index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\ACRU\\interactive-services\\src\\modules\\reporting\\menu\\Index.vue","mtime":1710740177193},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ACRU\\interactive-services\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}