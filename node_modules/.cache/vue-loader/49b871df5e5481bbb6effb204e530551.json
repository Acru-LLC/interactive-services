{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\management\\modules\\project-lesson\\CreateOrUpdate.vue?vue&type=style&index=0&id=7cb3e758&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\management\\modules\\project-lesson\\CreateOrUpdate.vue","mtime":1669370502157},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1667355356565},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQp1bCB7DQogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsNCn0NCg=="},{"version":3,"sources":["CreateOrUpdate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA","file":"CreateOrUpdate.vue","sourceRoot":"src/modules/management/modules/project-lesson","sourcesContent":["<template>\r\n  <b-row class=\"mb-3\">\r\n    <b-col md=\"12\" class=\"text-center\">\r\n      <div class=\"h4 mb-4 d-inline-block\">\r\n        {{ $t('modules.management.project_lessons.title') }}\r\n      </div>\r\n    </b-col>\r\n    <b-col md=\"12\">\r\n      <base-create-or-update-wrapper\r\n          @save=\"save\"\r\n          has-save-suspend\r\n          :custom-title=\"isModeCreate ? $t('actions.create') : $t('actions.update')\"\r\n      >\r\n        <ValidationObserver ref=\"observer\" v-slot=\"{}\">\r\n          <b-row class=\"mb-3\">\r\n            <b-col sm=\"12\" md=\"6\" class=\"mt-2\">\r\n              <label for=\"\">{{ $t('modules.management.project_lessons.name') }}</label>\r\n              <b-form-input\r\n                  v-model=\"editingItem.fileName\"\r\n                  :placeholder=\"$t('modules.management.project_lessons.name')\"\r\n              />\r\n            </b-col>\r\n            <b-col sm=\"12\" md=\"6\" class=\"mt-2\">\r\n              <label for=\"\">{{ $t('modules.management.project_lessons.video') }}</label>\r\n              <file-input\r\n                  ref=\"video\"\r\n                  accept=\".mp4, .mkv, .webm, .pdf, .jpg, .jpeg, .gif, .png, .mp3\"\r\n                  :file-size-limit=\"fileSizeLimit\"\r\n                  @is-large=\"fileIsLarge\"/>\r\n            </b-col>\r\n          </b-row>\r\n        </ValidationObserver>\r\n      </base-create-or-update-wrapper>\r\n    </b-col>\r\n  </b-row>\r\n</template>\r\n<script>\r\nimport apiService from \"@/shared/services/api.service\";\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport FileInput from '../../components/FileInput'\r\n\r\nconst MAIN_API_URL = 'project-lesson';\r\nexport default {\r\n  name: \"CreateOrUpdate\",\r\n  components: {\r\n    FileInput\r\n  },\r\n  data() {\r\n    return {\r\n      editingItem: {},\r\n      statuses: [],\r\n      fileSizeLimit: 104857600,\r\n    }\r\n  },\r\n  computed: {\r\n    isModeCreate() {\r\n      return this.$route.name === 'ProjectLessonsCreate'\r\n    },\r\n    computedObserver() {\r\n      return this.$refs.observer\r\n    }\r\n  },\r\n  methods: {\r\n    treeClosed(veeName) {\r\n      this.computedObserver.refs[veeName].validate();\r\n    },\r\n    fileIsLarge(){\r\n      this.$toast.warning(this.$t('modules.management.project_lessons.file_size_to_large'))\r\n    },\r\n    save() {\r\n      this.computedObserver.validate().then(valid => {\r\n        if (valid) {\r\n          if (this.editingItem.file_id) {\r\n            const formData = new FormData();\r\n            formData.append('file', this.$refs.video.file);\r\n            apiService\r\n                .formDataFile(MAIN_API_URL + `/update/${this.editingItem.file_id}/${this.editingItem.fileName}`, formData, true)\r\n                .then(() => {\r\n                  this.$refs.video.file = null;\r\n                  this.computedObserver.reset()\r\n                  this.editingItem = Object.assign({}, {});\r\n                  this.$router.go(-1)\r\n                  this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n                })\r\n                .catch((err) => {\r\n                  this.$toast(err, { type: 'error' });\r\n                });\r\n          } else {\r\n            const formData = new FormData();\r\n            formData.append('file', this.$refs.video.file);\r\n            apiService\r\n                .post(MAIN_API_URL + `/create/${this.editingItem.fileName}`, formData, {\r\n                  headers: {\r\n                    \"Content-Type\": \"multipart/form-data\",\r\n                  },\r\n                })\r\n                .then(() => {\r\n                  this.$refs.video.file = null;\r\n                  this.computedObserver.reset()\r\n                  this.editingItem = Object.assign({}, {});\r\n                  this.$router.go(-1)\r\n                  this.$toast(this.$t('messages.saved_successfully'), { type: 'success' });\r\n                })\r\n                .catch((err) => {\r\n                  this.$toast(err, { type: 'error' });\r\n                });\r\n          }\r\n        } else {\r\n          this.$toast(this.$t('messages.fill_required_fields'), { type: 'error' });\r\n        }\r\n      });\r\n    },\r\n    async handleCreated() {\r\n      this.var_default_search_payload.itemsPerPage = 500\r\n      if (this.isModeCreate) {\r\n        await crudAndListsService.getEmpty(MAIN_API_URL, null, true)\r\n            .then(res => {\r\n              this.editingItem = res.data\r\n            })\r\n            .catch(e => {\r\n              console.log(e)\r\n            })\r\n      } else {\r\n        await crudAndListsService.getById(MAIN_API_URL, this.$route.params.id, true)\r\n            .then(res => {\r\n              this.editingItem = res.data\r\n            })\r\n            .catch(e => {\r\n              console.log(e)\r\n            })\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    await this.handleCreated();\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\nul {\r\n  list-style-type: none;\r\n}\r\n</style>"]}]}