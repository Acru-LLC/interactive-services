{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\monitor\\monitor.vue?vue&type=template&id=00c03546&scoped=true&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\monitor\\monitor.vue","mtime":1667352074487},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1667355356566},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<!-- <Layout> -->
<div>
  <div class="col-md-12 text-center">
    <div class="h4 mb-4 d-inline-block">{{ $t('submodules.commission.monitor') }}</div>
  </div>
  <Modal
      :scroll="true"
      :variantOk="'success'"
      :value="editModal"
      @okModal="okModal"
      @closeModal="editModal = false"
      :title="selectedTrItem.fileName"
      :cancelText="'actions.cancel'"
      @viewModalClick="viewModalClick"
      :okText="'actions.save'"
      :signerHide="false"
      ref="editModalRef"
      :size="'xl'"
  >
    <template v-slot:body>
      <div>
        <Editor
            ref="editorRef"
            @changeText="changeText"
        />
      </div>
    </template>
  </Modal>

  <!-- <PageHeader :title="title" :items="items" /> -->
  <!-- for view ilova -->
  <b-modal
      scrollable
      v-model="viewIlovaModal"
      size="xl"
      :title="$t('actions.view')"
  >
    <div
        style="height: 700px"
        v-if="ilovaUploadPath"
    >
      <embed
          width="100%"
          height="800"
          :src="`${baseUrl}/${ilovaUploadPath}`"
          type="application/pdf"
      />
    </div>
    <template v-slot:modal-footer>
      <b-button
          variant="secondary"
          @click="viewIlovaModal = false"
      >{{
          $t("actions.close")
        }}
      </b-button>
    </template>
  </b-modal>


  <!-- for view document -->
  <b-modal
      scrollable
      v-model="viewModal"
      size="xl"
      :title="selectedTrItem.id ? selectedTrItem.fileName : ''"
  >
    <div
        style="height: 700px"
        v-if="selectedTrItem.url"
    >
      <embed
          width="100%"
          height="800"
          :src="`${baseUrl}/${selectedTrItem.url}`"
          type="application/pdf"
      />
    </div>
    <template v-slot:modal-footer>
      <b-button
          variant="secondary"
          @click="viewModal = false"
      >{{
          $t("actions.close")
        }}
      </b-button>
    </template>
  </b-modal>

  <!-- modal view before modal -->
  <b-modal
      scrollable
      v-model="viewModalBeforeSigned"
      size="xl"
      body-bg-variant="light"
      :title="selectedTrItem.id ? selectedTrItem.fileName : ''"
  >
    <b-overlay
        variant="white"
        :opacity="1"
        :show="loaderPdf"
        rounded="lg"
    >
      <div style="min-height: 700px">
        <embed
            style="width: 100%;"
            :style="`min-height:${heightWindow-250}px`"
            v-if="base64"
            :src="`data:application/pdf;base64, ${base64}`"
        />
      </div>
    </b-overlay>

    <template v-slot:modal-footer>
      <b-button
          variant="secondary"
          @click="viewModalBeforeSigned = false"
      >{{ $t("actions.close") }}
      </b-button>
    </template>
  </b-modal>

  <!-- COMMISSIONS MODAL -->
  <b-modal
      scrollable
      v-model="commissionsModal"
      size="md"
      :title="`${$t('submodules.commission.title')}`"
  >
    <BaseMultiselectWithValidation
        rules="required"
        class="required"
        v-model="commissionTypeId"
        :options="commissionTypes.map(e => e.id)"
        :label="$t('submodules.commission.special_commission_type.title')"
        label-on-top
        placeholder=""
        :custom-label="customLabelCommissionTypes"
        open-direction="bottom"
        :max-height="600"
        :show-labels="false"
    ></BaseMultiselectWithValidation>

    <b-form-textarea
        class="mt-3"
        v-model="commissionComment"
        :placeholder="$t('submodules.doc.summary')"
        rows="5"
    ></b-form-textarea>

    <template v-slot:modal-footer>
      <b-button
          variant="success"
          @click="openSignatureModalForCommission"
      >
        <b-overlay
            :opacity="0.1"
            :show="commissionModalLoader"
            rounded="sm"
        >
          {{ $t("actions.continue") }}
        </b-overlay>
      </b-button>
    </template>
  </b-modal>
  <!-- rejected modal -->
  <b-modal
      scrollable
      v-model="isRejectedModal"
      size="md"
      :title="`${$t('submodules.reports.reasonRejected')}`"
  >
    <b-form-textarea
        v-model="reasonRejected"
        rows="5"
    ></b-form-textarea>

    <template v-slot:modal-footer>
      <b-button
          variant="danger"
          @click="rejectConfirm"
      >
        <b-overlay
            :opacity="0.1"
            :show="rejectedLoader"
            rounded="sm"
        >
          {{ $t("submodules.reports.rejected") }}
        </b-overlay>
      </b-button>
    </template>
  </b-modal>

  <div class="row" v-if="activeTab">
    <div class="col-12">
      <div class="card">
        <div class="card-body p-2">
          <div class="row">
            <div :class="isTabDxa ? 'col-sm-4' : 'col-12'">
              <div class="d-inline-block mt-1">
                <div class="search-box">
                  <div class="position-relative">
                    <input
                        style="width: 300px"
                        type="text"
                        v-model="searchValue"
                        class="form-control rounded bg-light border-light"
                        :placeholder="$t('actions.search')"
                    />
                    <i class="mdi mdi-magnify search-icon"></i>
                  </div>
                </div>
              </div>
            </div>
            <div :class="isTabDxa ? 'col-sm-8' : 'col-12'">
              <div class="text-sm-right">
                <div :class="!isTabDxa && activeTab ? 'w-100' : ''" class="float-right">
                  <div v-if="isTabDxa" class="d-flex align-items-center">
                    <!--                      <div-->
                    <!--                          v-show="selectedTrItem.applicationStatus=='DESCENDED' || selectedTrItem.applicationStatus=='RETURN_FOR_COMPLETE'"-->
                    <!--                          @click.prevent="selectSendType(dc.value)"-->
                    <!--                          class="card m-0 my-card-hovered_2 mr-3"-->
                    <!--                          v-for="(dc, index) in sendTypeList"-->
                    <!--                          :key="index + 'doc'"-->
                    <!--                          :class="dc.value == active ? 'my-card-active' : ''"-->
                    <!--                      >-->
                    <!--                        <div-->
                    <!--                            class="-->
                    <!--                                                    card-body-->
                    <!--                                                    p-0-->
                    <!--                                                    text-center-->
                    <!--                                                    d-flex-->
                    <!--                                                    align-items-center-->
                    <!--                                                    justify-content-center-->
                    <!--                                                  ">-->
                    <!--                          <div>-->
                    <!--                            <div class="d-flex align-items-center">-->
                    <!--                              <img-->
                    <!--                                  :src="dc.value == 'SEND_REGION'-->
                    <!--                                  ? require('@/assets/doc/5.png')-->
                    <!--                                  : require('@/assets/doc/1.png')"-->

                    <!--                                  alt="DOC"-->
                    <!--                                  height="30"-->
                    <!--                              />-->

                    <!--                              <div class="ml-2">-->
                    <!--                                <p class="m-0">-->
                    <!--                                  {{ dc.label }}-->
                    <!--                                </p>-->
                    <!--                              </div>-->
                    <!--                              <div class="ml-2">-->
                    <!--                                <b-badge-->
                    <!--                                    v-if="-->
                    <!--                                                            dc.value == 'AGREEMENT' &&-->
                    <!--                                                            agreementCount > 0-->
                    <!--                                                          "-->
                    <!--                                    variant="success"-->
                    <!--                                >-->
                    <!--                                  {{ agreementCount }}-->
                    <!--                                </b-badge>-->

                    <!--                                <b-badge-->
                    <!--                                    v-if="-->
                    <!--                                                            dc.value == 'SIGNATURE' &&-->
                    <!--                                                            signatureCount > 0-->
                    <!--                                                          "-->
                    <!--                                    variant="success"-->
                    <!--                                >-->
                    <!--                                  {{ signatureCount }}-->
                    <!--                                </b-badge>-->

                    <!--                                <b-badge-->
                    <!--                                    v-if="-->
                    <!--                                                            dc.value == 'REVIEW' && reviewCount > 0-->
                    <!--                                                          "-->
                    <!--                                    variant="success"-->
                    <!--                                >-->
                    <!--                                  {{ reviewCount }}-->
                    <!--                                </b-badge>-->
                    <!--                              </div>-->
                    <!--                            </div>-->
                    <!--                          </div>-->
                    <!--                        </div>-->
                    <!--                      </div>-->
                  </div>
                </div>
                <!-- <b-button
  @click.prevent="add"
  type="button"
  variant="primary"
>
  <i class="mdi mdi-plus mr-1"></i>
  {{ $t("actions.createNewDoc") }}
</b-button> -->
              </div>
            </div>
          </div>
        </div>
      </div>


      <!--        STATISTICS FOR DXA APPLICATION-->

      <div class="row" v-if="isTabDxa && activeTab == 'dxa'">
        <div class="col-7">
          <div class="card">
            <div class="card-body pt-3 px-3"
                 :class="(loadingChartDataForDXA || loadingMonthlyChartDataForDXA) ? 'pb-3' : 'pb-1'">
              <!-- SKELETON-LOADER -->
              <template v-if="loadingChartDataForDXA || loadingMonthlyChartDataForDXA">
                <b-skeleton class="card-title mb-2" animation="wave" width="35%"></b-skeleton>
                <b-skeleton-img no-aspect height="230px"></b-skeleton-img>
              </template>
              <!-- Column Charts -->
              <template v-else>
                <h4 class="card-title mb-2 d-flex justify-content-between">
                  {{ $t('column.monthly_general_statistics') }}
                  <BaseDatePickerWithValidation
                      not-required
                      disable-after
                      :clearable="false"
                      type="year"
                      format="YYYY"
                      custom-styles="grid-template-columns: 50% 50%"
                      v-model="lineWithDataChartForDXA.year"
                      @change="fetchDataForMonthlyChartForDXA(true, $event)"
                      :placeholder="$t('column.year')"
                      lang="ru"
                  ></BaseDatePickerWithValidation>
                </h4>
                <apexchart
                    class="apex-charts"
                    height="210"
                    type="line"
                    dir="ltr"
                    :series="lineWithDataChartForDXA.series"
                    :options="lineWithDataChartForDXA.chartOptions"
                ></apexchart>
              </template>
            </div>
          </div>
        </div>
        <div class="col-5">
          <div class="card">
            <div class="card-body p-3">
              <!-- SKELETON-LOADER -->
              <template v-if="loadingChartDataForDXA">
                <b-skeleton class="card-title mb-2" animation="wave" width="35%"></b-skeleton>
                <div class="row">
                  <div class="col-5 mt-2">
                    <b-skeleton animation="wave" width="55%"></b-skeleton>
                    <b-skeleton animation="wave" width="75%"></b-skeleton>
                    <b-skeleton animation="wave" width="85%"></b-skeleton>
                    <b-skeleton animation="wave" width="65%"></b-skeleton>
                    <b-skeleton animation="wave" width="90%"></b-skeleton>
                    <b-skeleton animation="wave" width="75%"></b-skeleton>
                    <b-skeleton animation="wave" width="55%"></b-skeleton>
                  </div>
                  <div class="col-7">
                    <b-skeleton-img no-aspect height="230px"></b-skeleton-img>
                  </div>
                </div>
              </template>
              <!-- Donut Chart -->
              <template v-else>
                <h4 class="card-title mb-2">{{ $t('column.current_statistics') }}</h4>
                <apexchart
                    class="apex-charts"
                    height="225"
                    type="donut"
                    dir="ltr"
                    :series="donutChartForDXA.series"
                    :options="donutChartForDXA.chartOptions"
                ></apexchart>
              </template>
            </div>
          </div>
        </div>
      </div>

      <!-- APPLICATIONS TABS -->
      <div class="row">
        <!-- APPLICATIONS TABS -->
        <div :class="isTabDxa ? 'col-12' : 'col-7'">
          <div class="row">
            <!-- COLUMN CHART COLUMN -->
            <div v-if="!isTabDxa && activeTab" class="col-12">
              <div class="card">
                <div class="card-body pt-3 px-3"
                     :class="(loadingChartData || loadingMonthlyChartData) ? 'pb-3' : 'pb-1'">
                  <!-- SKELETON-LOADER -->
                  <template v-if="loadingChartData || loadingMonthlyChartData">
                    <b-skeleton class="card-title mb-2" animation="wave" width="35%"></b-skeleton>
                    <b-skeleton-img no-aspect height="230px"></b-skeleton-img>
                  </template>
                  <!-- Column Charts -->
                  <template v-else>
                    <h4 class="card-title mb-2 d-flex justify-content-between">
                      {{ $t('column.monthly_general_statistics') }}
                      <BaseDatePickerWithValidation
                          not-required
                          disable-after
                          :clearable="false"
                          type="year"
                          format="YYYY"
                          custom-styles="grid-template-columns: 50% 50%"
                          v-model="lineWithDataChart.year"
                          @change="fetchDataForMonthlyChart(true, $event)"
                          :placeholder="$t('column.year')"
                          lang="ru"
                      ></BaseDatePickerWithValidation>
                    </h4>
                    <apexchart
                        class="apex-charts"
                        height="210"
                        type="line"
                        dir="ltr"
                        :series="lineWithDataChart.series"
                        :options="lineWithDataChart.chartOptions"
                    ></apexchart>
                  </template>
                </div>
              </div>
            </div>

            <div class="col-12">
              <div
                  class="card card-body card-tabs p-2"
                  style="min-height: 35em"
              >
                <div>
                  <div v-if="!isTabDxa && activeTab" class="d-flex align-items-center">
                    <!-- APPLICATION STATUSES TO FILTER -->
                    <div class="mb-2">
                      <b-form-radio-group
                          class="btn-custom mb-0"
                          button-variant="outline-primary"
                          id="application-statuses-for-filter"
                          v-model="selectedAppStatus"
                          buttons
                          name="application-statuses-for-filter"
                      >
                        <b-form-radio
                            value="CREATED"
                            button-variant="outline-secondary"
                        >
                          <span> {{ $t('submodules.commission.doc_status.doc_created') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="warning"
                              v-if="chartData.find(el => el.status == 'CREATED') && chartData.find(el => el.status == 'CREATED').count > 0"
                          >{{ chartData.find(el => el.status == 'CREATED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            button-variant="outline-warning"
                            value="BEING_SEEN"
                        >
                          <span> {{ $t('submodules.commission.doc_status.doc_seen') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="info"
                              v-if="chartData.find(el => el.status == 'BEING_SEEN') && chartData.find(el => el.status == 'BEING_SEEN').count > 0"
                          >{{ chartData.find(el => el.status == 'BEING_SEEN').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="SEEN"
                            button-variant="outline-info"
                        >
                          <span> {{ $t('submodules.commission.doc_status.seen') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="primary"
                              v-if="chartData.find(el => el.status == 'SEEN') && chartData.find(el => el.status == 'SEEN').count > 0"
                          >{{ chartData.find(el => el.status == 'SEEN').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="SENT"
                            button-variant="outline-primary"
                        >
                          <span> {{ $t('submodules.reports.report_sended') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="danger"
                              v-if="chartData.find(el => el.status == 'SENT') && chartData.find(el => el.status == 'SENT').count > 0"
                          >{{ chartData.find(el => el.status == 'SENT').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="CANCELLED"
                            button-variant="outline-danger"
                        >
                          <span> {{ $t('docs_r.CANCELED') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="warning"
                              v-if="chartData.find(el => el.status == 'CANCELLED') && chartData.find(el => el.status == 'CANCELLED').count > 0"
                          >{{ chartData.find(el => el.status == 'CANCELLED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="COMMISSION_BEING_SEEN"
                            button-variant="outline-warning"
                        >
                          <span> {{ $t('submodules.commission.doc_status.commission_being_seen') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="info"
                              v-if="chartData.find(el => el.status == 'COMMISSION_BEING_SEEN') && chartData.find(el => el.status == 'COMMISSION_BEING_SEEN').count > 0"
                          >{{ chartData.find(el => el.status == 'COMMISSION_BEING_SEEN').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="COMMISSION_SEEN"
                            button-variant="outline-info"
                        >
                          <span> {{ $t('submodules.commission.doc_status.commission_seen') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="primary"
                              v-if="chartData.find(el => el.status == 'COMMISSION_SEEN') && chartData.find(el => el.status == 'COMMISSION_SEEN').count > 0"
                          >{{ chartData.find(el => el.status == 'COMMISSION_SEEN').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="COMMISSION_SENT"
                            button-variant="outline-primary"
                        >
                          <span> {{ $t('submodules.commission.doc_status.commission_sent') }}</span>
                        </b-form-radio>

                        <b-form-radio
                            value="COMMISSION_SIGNED"
                            button-variant="outline-success"
                        >
                          <span> {{ $t('submodules.commission.doc_status.commission_signed') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="danger"
                              v-if="chartData.find(el => el.status == 'COMMISSION_SIGNED') && chartData.find(el => el.status == 'COMMISSION_SIGNED').count > 0"
                          >{{ chartData.find(el => el.status == 'COMMISSION_SIGNED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="COMMISSION_CANCELLED"
                            button-variant="outline-danger"
                        >
                          <span> {{ $t('submodules.commission.doc_status.commission_canceled') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="secondary"
                              v-if="chartData.find(el => el.status == 'COMMISSION_CANCELLED') && chartData.find(el => el.status == 'COMMISSION_CANCELLED').count > 0"
                          >{{ chartData.find(el => el.status == 'COMMISSION_CANCELLED').count }}
                          </b-badge>
                        </b-form-radio>
                      </b-form-radio-group>
                    </div>
                  </div>

                  <!--        STATISTICS FOR DXA APPLICATION-->
                  <div v-else-if="isTabDxa && activeTab == 'dxa'" class="d-flex align-items-center">
                    <!-- APPLICATION STATUSES TO FILTER -->
                    <div class="mb-2">
                      <b-form-radio-group
                          class="btn-custom mb-0"
                          button-variant="outline-primary"
                          id="application-statuses-for-filter"
                          v-model="selectedAppStatus"
                          buttons
                          name="application-statuses-for-filter"
                      >
                        <b-form-radio
                            value="DESCENDED"
                            button-variant="outline-info"
                        >
                          <span>  {{ $t('submodules.commission.monitor') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="primary"
                              v-if="chartDataForDXA.find(el => el.status == 'DESCENDED') && chartDataForDXA.find(el => el.status == 'DESCENDED').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'DESCENDED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="ACCEPTED"
                            button-variant="outline-success"
                        >
                          <span>    {{ $t('messages.accepted_message') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="outline-success"
                              v-if="chartDataForDXA.find(el => el.status == 'ACCEPTED') && chartDataForDXA.find(el => el.status == 'ACCEPTED').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'ACCEPTED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            button-variant="outline-danger"
                            value="REJECTED"
                        >
                          <span>  {{ $t('messages.rejected_message') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="info"
                              v-if="chartDataForDXA.find(el => el.status == 'REJECTED') && chartDataForDXA.find(el => el.status == 'REJECTED').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'REJECTED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="RETURN_FOR_COMPLETE"
                            button-variant="outline-warning"
                        >
                          <span>     {{ $t('messages.return_for_complete') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="primary"
                              v-if="chartDataForDXA.find(el => el.status == 'RETURN_FOR_COMPLETE') && chartDataForDXA.find(el => el.status == 'RETURN_FOR_COMPLETE').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'RETURN_FOR_COMPLETE').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="RETURN_FROM_REGION"
                            button-variant="outline-info"
                        >
                          <span>     {{ $t('messages.return_from_region') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="primary"
                              v-if="chartDataForDXA.find(el => el.status == 'RETURN_FROM_REGION') && chartDataForDXA.find(el => el.status == 'RETURN_FROM_REGION').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'RETURN_FROM_REGION').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="NOT_BELONG"
                            button-variant="outline-primary"
                        >
                          <span> {{ $t('submodules.dxa.not_belong') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="danger"
                              v-if="chartDataForDXA.find(el => el.status == 'NOT_BELONG') && chartDataForDXA.find(el => el.status == 'NOT_BELONG').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'NOT_BELONG').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="NOT_COMPLETED"
                            button-variant="outline-danger"
                        >
                          <span>  {{ $t('submodules.dxa.not_complete') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="warning"
                              v-if="chartDataForDXA.find(el => el.status == 'NOT_COMPLETED') && chartDataForDXA.find(el => el.status == 'NOT_COMPLETED').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'NOT_COMPLETED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="RECEIVED"
                            button-variant="outline-warning"
                        >
                          <span>  {{ $t('submodules.dxa.received') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="info"
                              v-if="chartDataForDXA.find(el => el.status == 'RECEIVED') && chartDataForDXA.find(el => el.status == 'RECEIVED').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'RECEIVED').count }}
                          </b-badge>
                        </b-form-radio>

                        <b-form-radio
                            value="EXTENDED"
                            button-variant="outline-primary"
                        >
                          <span>  {{ $t('submodules.dxa.extended') }}</span>
                          <b-badge
                              class="ml-1"
                              variant="primary"
                              v-if="chartDataForDXA.find(el => el.status == 'EXTENDED') && chartDataForDXA.find(el => el.status == 'EXTENDED').count > 0"
                          >{{ chartDataForDXA.find(el => el.status == 'EXTENDED').count }}
                          </b-badge>
                        </b-form-radio>

                      </b-form-radio-group>
                    </div>
                  </div>


                  <b-tabs
                      active-nav-item-class="font-weight-bold  text-primary"
                  >
                    <!-- INNER APPLICATIONS TAB -->
                    <b-tab
                        v-if="$can('view', 'application-monitor-inner')"
                        :title="$t('submodules.dxa.tabs_inner')"
                        :active="(!isTabDxa && activeTab) ? true : false"
                        @click="activeTableInnerApplication"
                    >
                      <div class="table-responsive">
                        <b-overlay
                            :opacity="0.1"
                            :show="loading"
                            rounded="sm"
                        >
                          <table class="
                                    table
                                    table-centered
                                    table-striped
                                    table-nowrap
                                    table-hover
                                    bordered
                                  ">
                            <thead class="thead-light">
                            <tr>
                              <th
                                  scope="col"
                                  class="text-center"
                                  style="width: 10%"
                              > №
                              </th>
                              <th
                                  scope="col"
                                  class="text-left"
                              >
                                <span class="ml-5"> {{ $t("column.status") }}</span>
                              </th>
                              <th
                                  class="text-left"
                                  scope="col"
                              >
                                {{ $t("submodules.doc.senderFIO") }}
                              </th>
                              <th
                                  class="text-center"
                                  scope="col"
                              >
                                {{ $t("submodules.doc.sender") }}
                              </th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr
                                class="text-center"
                                v-if="applicationsByStatus.length == 0"
                            >
                              <td
                                  colspan="9"
                                  :style="loading ? 'height:50px' : ''"
                                  style="vertical-align: middle"
                              >
                                <h5>
                                  {{ $t("messages.data_not_found") }}
                                </h5>
                              </td>
                            </tr>
                            <tr
                                @click.prevent="clickTrItem(item)"
                                v-for="(item, index) in applicationsByStatus"
                                :key="index + 'CREATE_DOC'"
                                class="p_cursor"
                                :class="
                                        selectedAppByStatus.id == item.id
                                          ? 'bg-color bg-soft-primary text-primary'
                                          : ''
                                      "
                            >

                              <td class="text-center">
                                {{
                                  util_paginate(index, var_default_search_payload.page, var_default_search_payload.itemsPerPage)
                                }}
                              </td>
                              <td class="text-center">
                                <b-badge
                                    variant="secondary"
                                    class="p-1"
                                    v-if="item.applicationStatus=='CREATED' || item.applicationStatus=='RECEIVED'"
                                >
                                  {{ $t('submodules.commission.doc_status.doc_created') }}
                                </b-badge>
                                <b-badge
                                    variant="warning"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='BEING_SEEN'"
                                >
                                  {{ $t('submodules.commission.doc_status.doc_seen') }}
                                </b-badge>
                                <b-badge
                                    variant="info"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='SEEN'"
                                >
                                  {{ $t('submodules.commission.doc_status.seen') }}
                                </b-badge>
                                <b-badge
                                    variant="primary"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='SENT'"
                                >
                                  {{ $t('submodules.reports.report_sended') }}
                                </b-badge>
                                <b-badge
                                    variant="primary"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='CANCELLED'"
                                >
                                  {{ $t('docs_r.CANCELED') }}
                                </b-badge>
                                <b-badge
                                    variant="warning"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='COMMISSION_BEING_SEEN'"
                                >
                                  {{ $t('submodules.commission.doc_status.commission_being_seen') }}
                                </b-badge>
                                <b-badge
                                    variant="info"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='COMMISSION_SEEN'"
                                >
                                  {{ $t('submodules.commission.doc_status.commission_seen') }}
                                </b-badge>
                                <b-badge
                                    variant="primary"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='COMMISSION_SENT'"
                                >
                                  {{ $t('submodules.commission.doc_status.commission_sent') }}
                                </b-badge>
                                <b-badge
                                    variant="success"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='COMMISSION_SIGNED'"
                                >
                                  {{ $t('submodules.commission.doc_status.commission_signed') }}
                                </b-badge>
                                <b-badge
                                    variant="danger"
                                    class="p-1"
                                    v-else-if="item.applicationStatus=='COMMISSION_CANCELLED'"
                                >
                                  {{ $t('submodules.commission.doc_status.commission_canceled') }}
                                </b-badge>
                              </td>
                              <td class="text-left">
                                <p
                                    class="mb-0 d-flex align-items-center"
                                    style="flex-basis: 0; flex-grow: 1; gap: .3rem;"
                                >
                                  <span v-if="item.type == 'LEGAL'"> {{ item.senderFullName }} </span>
                                  <span v-else-if="item.type == 'FROM_DXA'"> {{ item.senderFullName }} </span>
                                  <span v-else-if="item.type== 'PHYSICAL'"> {{ item.applicantSecondName }} {{
                                      item.applicantFirstName
                                    }} {{ item.applicantMiddleName }} </span>
                                  <span v-else-if="item.type == 'BY_DIRECTOR'"> {{ item.senderFullName }} </span>
                                </p>
                              </td>
                              <td class="text-center">
                                <b-badge
                                    v-if="item.type == 'LEGAL'"
                                    variant="primary"
                                    class="p-1"
                                >
                                  {{ $t("submodules.doc.sendDoc_from_legal") }}
                                </b-badge>
                                <b-badge
                                    v-else-if="item.type == 'PHYSICAL'"
                                    variant="success"
                                    class="p-1"
                                >
                                  {{ $t("submodules.doc.sendDoc_from_physical") }}
                                </b-badge>
                                <b-badge
                                    v-else-if="item.type == 'BY_DIRECTOR'"
                                    variant="secondary"
                                    class="p-1"
                                >
                                  {{ $t("submodules.commission.by_director.title") }}
                                </b-badge>
                                <b-badge
                                    v-else-if="item.type == 'FROM_DXA'"
                                    variant="info"
                                    class="p-1"
                                >
                                  DXA
                                </b-badge>
                              </td>
                            </tr>
                            </tbody>
                          </table>
                        </b-overlay>
                      </div>
                      <div
                          class="row"
                          v-if="totalAppsByStatus > 0"
                      >
                        <div class="col-lg-12">
                          <b-pagination
                              v-model="var_default_search_payload.page"
                              :total-rows="totalAppsByStatus"
                              :per-page="var_default_search_payload.itemsPerPage"
                              aria-controls="my-table"
                              class="justify-content-end"
                          ></b-pagination>
                        </div>
                      </div>
                    </b-tab>
                    <!-- DXA APPLICATIONS TAB -->
                    <b-tab

                        v-if="$can('view', 'application-monitor-dxa')"
                        :title="$t('submodules.dxa.tabs_dxa')"
                        @click="activeTableDXAApplication"
                    >
                      <b-row class="pl-3 pr-3" style="min-height: 30px">
                        <b-col
                            cols="12"
                            class="pt-2"
                        >
                          <b-button-group>
                            <b-button @click="activeTableDXAApplicationFOR_SALE"
                                      :variant="activeDXATab == 'FOR_SALE'? 'primary' : 'outline-primary'">
                              <span class="text-center">{{ $t('submodules.dxa.dxa_application_1') }}</span>
                            </b-button>
                            <b-button
                                @click="activeTableDXAApplicationFOR_ADD"
                                :variant="activeDXATab == 'FOR_ADD'? 'primary' : 'outline-primary'">
                              <span class="text-center">{{ $t('submodules.dxa.dxa_application_2') }}</span>
                            </b-button>
                          </b-button-group>
                        </b-col>
                      </b-row>

                      <div class="card card-body">
                        <div class="table-responsive">
                          <b-overlay
                              :opacity="0.1"
                              :show="loading"
                              rounded="sm"
                          >
                            <table class="
                                    table
                                    table-centered
                                    table-striped
                                    table-nowrap
                                    table-hover
                                  ">
                              <thead class="thead-light">
                              <tr>
                                <th
                                    scope="col"
                                    class="text-center"
                                    style="width: 70px"
                                >
                                  №
                                </th>
                                <th
                                    class="text-center"
                                    scope="col"
                                >
                                  {{ $t("docName") }}
                                </th>

                                <th class="text-center" scope="col">
                                  {{ $t("submodules.dxa.dxa_application_number") }}
                                </th>

                                <th class="text-center" scope="col">
                                  {{ $t("submodules.commission.docCreatedDate") }}
                                </th>
                                <th
                                    class="text-center"
                                    scope="col"
                                >
                                  {{ $t("submodules.commission.income_date") }}
                                </th>
                                <th
                                    class="text-center"
                                    scope="col"
                                >
                                  {{ $t("profile.inn") }}
                                </th>

                                <th
                                    class="text-center"
                                    scope="col"
                                >
                                  {{ $t("submodules.doc.sender") }}
                                </th>
                                <th
                                    class="text-center"
                                    scope="col"
                                >
                                  {{ $t('submodules.commission.document_status.title') }}
                                </th>

                                <th
                                    class="text-center"
                                    scope="col"
                                >
                                  {{ $t('actions.view') }}
                                </th>

                                <!-- <th class="text-center" scope="col">
            {{ $t("document.type") }}
            </th> -->

                                <!--                      <th-->
                                <!--                          scope="col"-->
                                <!--                          class="text-center"-->
                                <!--                      >-->
                                <!--                        {{ $t("puropseOfSending") }}-->
                                <!--                      </th>-->

                                <!-- <th
            style="width: 10%"
            scope="col"
            class="text-center"
            >
            {{ $t("actions.title") }}
            </th> -->
                              </tr>
                              </thead>
                              <tbody>
                              <tr
                                  class="text-center"
                                  v-if="list.length == 0"
                              >
                                <td
                                    colspan="9"
                                    :style="loading ? 'height:50px' : ''"
                                    style="vertical-align: middle"
                                >
                                  <h5>
                                    {{ $t("messages.data_not_found") }}
                                  </h5>
                                </td>
                              </tr>
                              <tr @click.prevent="selectSendTypeInTr('VIEW', item)"
                                  class="p_cursor"
                                  v-for="(item, index) in list"
                                  :key="index + 'CREATE_DOC'"
                                  :class="
                                        selectedTrItem.id == item.id
                                          ? 'bg-soft-primary text-primary'
                                          : item.status == 'CANCELED'
                                          ? 'bg-soft-danger text-danger'
                                          : item.status == 'SIGNED'
                                          ? 'bg-soft-success text-dark'
                                          : 'bg-white  text-dark font-weight-bold '
                                      "
                              >
                                <td class="text-center" @click.prevent="clickTrItem(item)">
                                  <strong>
                                    {{ paginate(index, limit, page - 1) }}</strong>
                                </td>
                                <!-- <td
            class="text-center"
            :class="!item.isRead ? 'font-weight-bold' : ''"
            >
            {{ item.regNumber }}
            </td> -->
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  {{ item.applicant_name }}
                                </td>
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  {{ item.applicationDXARegNumber }}
                                </td>
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  <p class="pre m-0">{{ item.applicant_created_at }}</p>
                                </td>
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  <p class="pre m-0">{{ item.received_date }}</p>
                                </td>
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  <p class="pre m-0">{{ item.applicant_tin }}</p>
                                </td>
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  <b-badge variant="success" class="pre m-0" v-if="item.type =='FROM_DXA'">DXA
                                  </b-badge>
                                </td>
                                <td
                                    class="text-center"
                                    :class="(index % 2==1) ? 'font-weight-bold' : ''"
                                >
                                  <b-badge
                                      variant="secondary"
                                      class="p-1"
                                      v-if="item.applicationStatus=='CREATED' "
                                  >
                                    {{ $t('submodules.commission.doc_status.doc_created') }}
                                  </b-badge>
                                  <b-badge
                                      variant="secondary"
                                      class="p-1"
                                      v-if=" item.applicationStatus=='RECEIVED'"
                                  >
                                    {{ $t('messages.accepted_message') }}
                                  </b-badge>
                                  <b-badge
                                      variant="warning"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='BEING_SEEN'"
                                  >
                                    {{ $t('submodules.commission.doc_status.doc_seen') }}
                                  </b-badge>
                                  <b-badge
                                      variant="info"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='SEEN'"
                                  >
                                    {{ $t('submodules.commission.doc_status.seen') }}
                                  </b-badge>
                                  <b-badge
                                      variant="primary"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='SENT'"
                                  >
                                    {{ $t('submodules.reports.report_sended') }}
                                  </b-badge>
                                  <b-badge
                                      variant="primary"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='CANCELLED'"
                                  >
                                    {{ $t('docs_r.CANCELED') }}
                                  </b-badge>
                                  <b-badge
                                      variant="warning"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='COMMISSION_BEING_SEEN'"
                                  >
                                    {{ $t('submodules.commission.doc_status.commission_being_seen') }}
                                  </b-badge>
                                  <b-badge
                                      variant="info"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='COMMISSION_SEEN'"
                                  >
                                    {{ $t('submodules.commission.doc_status.commission_seen') }}
                                  </b-badge>
                                  <b-badge
                                      variant="primary"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='COMMISSION_SENT'"
                                  >
                                    {{ $t('submodules.commission.doc_status.commission_sent') }}
                                  </b-badge>
                                  <b-badge
                                      variant="success"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='COMMISSION_SIGNED'"
                                  >
                                    {{ $t('submodules.commission.doc_status.commission_signed') }}
                                  </b-badge>
                                  <b-badge
                                      variant="danger"
                                      class="p-1"
                                      v-else-if="item.applicationStatus=='COMMISSION_CANCELLED'"
                                  >
                                    {{ $t('submodules.commission.doc_status.commission_canceled') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='DESCENDED'">
                                    {{ $t('submodules.commission.monitor') }}
                                  </b-badge>
                                  <b-badge variant="warning" class="pre m-0"
                                           v-else-if="item.applicationStatus=='NOT_BELONG'">
                                    {{ $t('submodules.commission.letter_not_belong') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='EXTENDED'">
                                    {{ $t('messages.extended_message') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='REJECTED'">
                                    {{ $t('messages.rejected_message') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='ACCEPTED'">
                                    {{ $t('messages.accepted_message') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='NOT_COMPLETED'">
                                    {{ $t('submodules.dxa.not_complete') }}
                                  </b-badge>
                                  <b-badge variant="warning" class="pre m-0"
                                           v-else-if="item.applicationStatus=='FOR_NOT_BELONG_DXA'">
                                    {{ $t('messages.for_not_belong_dxa') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='FOR_EXTENDED_DXA'">
                                    {{ $t('messages.for_extended_dxa') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='FOR_REJECTED_DXA'">
                                    {{ $t('messages.for_rejected_dxa') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='FOR_ACCEPTED_DXA'">
                                    {{ $t('messages.for_accepted_dxa') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='FOR_NOT_COMPLETED_DXA'">
                                    {{ $t('messages.for_not_completed_dxa') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='RETURN_FOR_COMPLETE'">
                                    {{ $t('messages.return_for_complete') }}
                                  </b-badge>
                                  <b-badge variant="primary" class="pre m-0"
                                           v-else-if="item.applicationStatus=='RETURN_FROM_REGION'">
                                    {{ $t('messages.return_from_region') }}
                                  </b-badge>
                                  <b-badge variant="warning" class="pre m-0"
                                           v-else-if="item.applicationStatus=='SEND_FOR_TAKE_VISA'">
                                    {{ $t('submodules.dxa.send_for_visa') }}
                                  </b-badge>
                                  <b-badge variant="success" class="pre m-0"
                                           v-else-if="item.applicationStatus=='VISA_APPROVED'">
                                    {{ $t('submodules.dxa.VISA_APPROVED') }}
                                  </b-badge>
                                </td>
                                <td class="text-center">
                                  <!--                                    <img-->

                                  <!--                                        :src="require('@/assets/doc/img_1.png')"-->
                                  <!--                                        alt="DOC"-->
                                  <!--                                        height="35"-->
                                  <!--                                    />-->
                                  <i @click.prevent="selectSendTypeInTr('VIEW', item)" style="color: #0b83e8"
                                     class="fa fa-eye fa-2x"></i>
                                </td>

                                <!--                      <td-->
                                <!--                          :class="!item.isRead ? 'font-weight-bold' : ''"-->
                                <!--                          class="text-center p-0"-->
                                <!--                      >-->
                                <!--                        {{-->
                                <!--                          item.action == "SIGNATURE"-->
                                <!--                              ? $t("forSignature")-->
                                <!--                              : item.action == "AGREEMENT"-->
                                <!--                                  ? $t("forAgreement")-->
                                <!--                                  : item.action == "REVIEW"-->
                                <!--                                      ? $t("forReview")-->
                                <!--                                      : ""-->
                                <!--                        }}-->
                                <!--                        <i-->
                                <!--                            v-if="item.action == 'SIGNATURE' && item.signed"-->
                                <!--                            class="-->
                                <!--                                mdi mdi-check-all-->
                                <!--                                font-size-22-->
                                <!--                                p-0-->
                                <!--                                ml-2-->
                                <!--                                text-success-->
                                <!--                              "-->
                                <!--                        ></i>-->

                                <!--                        <i-->
                                <!--                            v-if="item.action == 'AGREEMENT' && item.isAgreed"-->
                                <!--                            class="-->
                                <!--                                mdi mdi-handshake-->
                                <!--                                font-size-22-->
                                <!--                                ml-2-->
                                <!--                                text-success-->
                                <!--                              "-->
                                <!--                        ></i>-->

                                <!--                        <i-->
                                <!--                            v-if="item.action == 'REVIEW' && item.isViewed"-->
                                <!--                            class="-->
                                <!--                                mdi mdi-file-eye-->
                                <!--                                font-size-18 font-size-16-->
                                <!--                                ml-2-->
                                <!--                                text-success-->
                                <!--                              "-->
                                <!--                        ></i>-->
                                <!--                      </td>-->
                              </tr>
                              </tbody>
                            </table>
                          </b-overlay>
                        </div>
                        <div
                            class="row"
                            v-if="total > 0"
                        >
                          <div class="col-lg-12">
                            <b-pagination
                                size="sm"
                                class="m-0"
                                :total-rows="total"
                                :per-page="limit"
                                v-model="page"
                            />
                          </div>
                        </div>
                      </div>
                    </b-tab>
                  </b-tabs>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div v-if="!isTabDxa && activeTab" class="col-5">
          <div class="row">
            <!-- DONUT CHART COLUMN -->
            <div class="col-12">
              <div class="card">
                <div class="card-body p-3">
                  <!-- SKELETON-LOADER -->
                  <template v-if="loadingChartData">
                    <b-skeleton class="card-title mb-2" animation="wave" width="35%"></b-skeleton>
                    <div class="row">
                      <div class="col-5 mt-2">
                        <b-skeleton animation="wave" width="55%"></b-skeleton>
                        <b-skeleton animation="wave" width="75%"></b-skeleton>
                        <b-skeleton animation="wave" width="85%"></b-skeleton>
                        <b-skeleton animation="wave" width="65%"></b-skeleton>
                        <b-skeleton animation="wave" width="90%"></b-skeleton>
                        <b-skeleton animation="wave" width="75%"></b-skeleton>
                        <b-skeleton animation="wave" width="55%"></b-skeleton>
                      </div>
                      <div class="col-7">
                        <b-skeleton-img no-aspect height="230px"></b-skeleton-img>
                      </div>
                    </div>
                  </template>
                  <!-- Donut Chart -->
                  <template v-else>
                    <h4 class="card-title mb-2">{{ $t('column.current_statistics') }}</h4>
                    <apexchart
                        class="apex-charts"
                        height="225"
                        type="donut"
                        dir="ltr"
                        :series="donutChart.series"
                        :options="donutChart.chartOptions"
                    ></apexchart>
                  </template>
                </div>
              </div>
            </div>

            <div class="col-12">
              <div
                  class="card card-body card-tabs p-2"
                  style="min-height: 35em"
              >
                <b-tabs
                    content-class="mt-3"
                    :no-fade="true"
                    v-model="currentAppDetailsTabIndex"
                    fill
                >
                  <b-tab :title="$t('submodules.doc.tab_doc')">
                    <b-overlay
                        :opacity="0.1"
                        :show="loadingById"
                        rounded="sm"
                    >
                      <!-- FROM_DXA -->
                      <table
                          v-if="selectedAppByStatus"
                          v-show="selectedAppByStatus.type == 'FROM_DXA'"
                          class="table m-0 "
                      >
                        <tr>
                          <td class="text-left">
                            <b> {{ $t('column.business_entity') }}</b> <br>
                          </td>
                          <td class="text-right">
                                                  <span
                                                      style="font-size: 12px"
                                                      class="text-right"
                                                  >
                                                      {{ selectedApplicationItem.applicant_name }}
                                                  </span>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.create_entered_date_legal') }}</b> <br>
                          </td>
                          <td class="text-right">
                                                  <span
                                                      style="font-size: 12px"
                                                      class="text-right"
                                                  >
                                                      {{ selectedApplicationItem.applicant_created_at }}
                                                  </span>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b> {{ $t('column.inn') }}</b> <br>
                          </td>
                          <td class="text-right">
                                                  <span
                                                      style="font-size: 12px"
                                                      class="text-right"
                                                  >
                                                      {{ selectedApplicationItem.applicant_tin }}
                                                  </span>
                          </td>
                        </tr>
                      </table>

                      <!-- LEGAL -->
                      <table
                          v-if="selectedApplicationItem"
                          v-show="selectedApplicationItem.type == 'LEGAL'"
                          class="table m-0 "
                      >
                        <tr>
                          <td class="text-left">
                            <b> {{ $t('column.business_entity') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.senderFullName }}</span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('column.address') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.senderAddress }}</span>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.entered_number_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.numberOfOutgoingDocument }}</span>
                          </td>

                          <td class="text-right">
                            <b> {{ $t('submodules.doc.entered_date_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.dateOfOutgoingDocument }}</span>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.create_entered_number_legal') }}</b><br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.numberOfIncomingDocument }}</span>
                          </td>

                          <td class="text-right">
                            <b> {{ $t('submodules.doc.create_entered_date_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.dateOfIncomingDocument }}</span>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.entered_number_physical') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.numberOfOutgoingDocument
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.entered_date_physical') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.dateOfOutgoingDocument
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.create_entered_number_physical') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.numberOfIncomingDocument
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.create_entered_date_physical') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.dateOfIncomingDocument
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.summary') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.summary
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.to_whom') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.employeeFullName
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.other_contragent') }}
                            </b> <br>
                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.nameOfOrganizationWasSent
                              }}
                                                  </span>
                          </td>

                          <td class="text-right ">
                            <b> {{ $t('submodules.doc.completionTime') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.completionTime
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                      </table>

                      <!-- PHYSICAL -->
                      <table
                          v-if="selectedApplicationItem"
                          v-show="selectedApplicationItem.type == 'PHYSICAL'"
                          class="table m-0 "
                      >
                        <tr class="cool-link">
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.fio') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.applicantSecondName }}
                                                      {{ selectedApplicationItem.applicantFirstName }}
                                                      {{ selectedApplicationItem.applicantMiddleName }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b>
                              {{ $t('submodules.doc.address') }}
                            </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.address }}</span>
                          </td>
                        </tr>
                        <tr class="cool-link">
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.commission.confirmation_document.title') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.confirmationDocumentNameRu,
                                  nameLt: selectedApplicationItem.confirmationDocumentNameLt,
                                  nameUz: selectedApplicationItem.confirmationDocumentNameUz,
                                })
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.method_of_reception') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.receptionMethodNameRu,
                                  nameLt: selectedApplicationItem.receptionMethodNameLt,
                                  nameUz: selectedApplicationItem.receptionMethodNameUz,
                                })
                              }}
                                                  </span>

                            <br>
                          </td>
                        </tr>
                        <tr class="cool-link">
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.commission.appeal_type.title') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.appealTypeNameRu,
                                  nameLt: selectedApplicationItem.appealTypeNameRu,
                                  nameUz: selectedApplicationItem.appealTypeNameRu,
                                })
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.commission.document_status.title') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.documentStatusNameLt,
                                  nameLt: selectedApplicationItem.documentStatusNameLt,
                                  nameUz: selectedApplicationItem.documentStatusNameLt,
                                })
                              }}
                                                  </span>

                            <br>
                          </td>
                        </tr>

                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.entered_number_physical') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.numberOfOutgoingDocument
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.entered_date_physical') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.dateOfOutgoingDocument
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.create_entered_number_physical') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.numberOfIncomingDocument
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.create_entered_date_physical') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.dateOfIncomingDocument
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.summary') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.summary
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.to_whom') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.employeeFullName
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.other_contragent') }}
                            </b> <br>
                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.nameOfOrganizationWasSent
                              }}
                                                  </span>
                          </td>

                          <td class="text-right ">
                            <b> {{ $t('submodules.doc.completionTime') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.completionTime
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                      </table>

                      <!-- BY_DIRECTOR -->
                      <table
                          v-if="selectedApplicationItem"
                          v-show="selectedApplicationItem.type == 'BY_DIRECTOR'"
                          class="table m-0 "
                      >
                        <tr
                            class="cool-link"
                            v-show="!selectedApplicationItem.isLegal"
                        >
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.fio') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                {{ selectedApplicationItem.applicantSecondName }}
                                {{ selectedApplicationItem.applicantFirstName }}
                                {{ selectedApplicationItem.applicantMiddleName }}
                            </span>
                          </td>
                          <td class="text-right">
                            <b>
                              {{ $t('submodules.doc.address') }}
                            </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >{{ selectedApplicationItem.address }}</span>
                          </td>
                        </tr>
                        <tr
                            class="cool-link"
                            v-show="!selectedApplicationItem.isLegal"
                        >
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.commission.confirmation_document.title') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.confirmationDocumentNameRu,
                                  nameLt: selectedApplicationItem.confirmationDocumentNameLt,
                                  nameUz: selectedApplicationItem.confirmationDocumentNameUz,
                                })
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.method_of_reception') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.receptionMethodNameRu,
                                  nameLt: selectedApplicationItem.receptionMethodNameLt,
                                  nameUz: selectedApplicationItem.receptionMethodNameUz,
                                })
                              }}
                                                  </span>

                            <br>
                          </td>
                        </tr>
                        <tr
                            class="cool-link"
                            v-show="!selectedApplicationItem.isLegal"
                        >
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.commission.appeal_type.title') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.appealTypeNameRu,
                                  nameLt: selectedApplicationItem.appealTypeNameRu,
                                  nameUz: selectedApplicationItem.appealTypeNameRu,
                                })
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.commission.document_status.title') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                getName({
                                  nameRu: selectedApplicationItem.documentStatusNameLt,
                                  nameLt: selectedApplicationItem.documentStatusNameLt,
                                  nameUz: selectedApplicationItem.documentStatusNameLt,
                                })
                              }}
                                                  </span>

                            <br>
                          </td>
                        </tr>

                        <tr v-show="selectedApplicationItem.isLegal">
                          <td class="text-left">
                            <b> {{ $t('column.business_entity') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.senderFullName }}
                                                  </span>
                          </td>

                          <td class="text-right">
                            <b> {{ $t('column.address') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.senderAddress }}
                                                  </span>
                          </td>
                        </tr>
                        <tr v-show="selectedApplicationItem.isLegal">
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.entered_number_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.numberOfOutgoingDocument }}
                                                  </span>
                          </td>

                          <td class="text-right">
                            <b> {{ $t('submodules.doc.entered_date_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.dateOfOutgoingDocument }}
                                                  </span>
                          </td>
                        </tr>
                        <tr v-show="selectedApplicationItem.isLegal">
                          <td class="text-left">
                            <b> {{ $t('submodules.doc.create_entered_number_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.numberOfIncomingDocument }}
                                                  </span>
                          </td>

                          <td class="text-right">
                            <b> {{ $t('submodules.doc.create_entered_date_legal') }}</b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{ selectedApplicationItem.dateOfIncomingDocument }}
                                                  </span>
                          </td>
                        </tr>

                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.entered_number_physical') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.numberOfOutgoingDocument
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.entered_date_physical') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.dateOfOutgoingDocument
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.create_entered_number_physical') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.numberOfIncomingDocument
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.create_entered_date_physical') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.dateOfIncomingDocument
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.summary') }}
                            </b> <br>

                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.summary
                              }}
                                                  </span>
                          </td>
                          <td class="text-right">
                            <b> {{ $t('submodules.doc.to_whom') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.employeeFullName
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                        <tr>
                          <td class="text-left">
                            <b>
                              {{ $t('submodules.doc.other_contragent') }}
                            </b> <br>
                            <span
                                style="font-size: 11px"
                                class="text-left text-muted"
                            >
                                                      {{
                                selectedApplicationItem.nameOfOrganizationWasSent
                              }}
                                                  </span>
                          </td>

                          <td class="text-right ">
                            <b> {{ $t('submodules.doc.completionTime') }} </b> <br>
                            <span
                                style="font-size: 12px"
                                class="text-left"
                            >
                                                      {{
                                selectedApplicationItem.completionTime
                              }}
                                                  </span>
                            <br>
                          </td>
                        </tr>
                      </table>

                      <div
                          class="wrapper"
                          v-if="selectedApplicationItem.allFiles"
                      >
                        <span CLASS="fromcenter">{{ $t('submodules.doc.application_file') }}</span>
                      </div>
                      <div
                          class="card card-body card-tabs mt-1"
                          style="min-height: 10em; width: 100%"
                          v-if="1 || selectedApplicationItem.allFiles && selectedApplicationItem.allFiles.length"
                      >
                        <tr
                            class="mt-3"
                            v-for="(item, index) in selectedApplicationItem.allFiles"
                            :key="index + 'FILE'"
                        >
                          <div class=" d-flex align-items-center bg-light p-2 justify-content-between">
                            <div class="d-flex align-items-center">
                              <a @click="viewIlova(item.url)"
                                 :download="getExt(item.url) == 'PDF' || getExt(item.url) == 'pdf' ? false : true"
                                 :href="getExt(item.url) == 'PDF' || getExt(item.url) == 'pdf' ? `#` : `${baseUrl}/${item.url}`"
                              >
                                <BaseFileViewer
                                    class="my-card-hovered"
                                    :uploadPath="item.name"
                                />
                              </a>
                              <span class="ml-2">{{ item.name }}</span>
                            </div>
                          </div>
                        </tr>
                      </div>
                      <div
                          class="card card-body card-tabs mt-1 text-center"
                          style="min-height: 2em; width: 100%"
                          v-else-if="selectedApplicationItem.allFiles"
                      >
                        {{ $t('messages.data_not_found') }}
                      </div>

                      <!-- PROJECT FILES -->
                      <div
                          class="card card-body card-tabs mt-1"
                          style="min-height: 10em; width: 100%"
                          v-if="selectedApplicationItem.applicationStatus != 'BEING_SEEN' && selectedApplicationItem.applicationStatus != 'CREATED' && selectedApplicationItem.letterFiles && selectedApplicationItem.letterFiles.length"
                      >
                        <tr
                            class="mt-1"
                            v-for="(item, index) in selectedApplicationItem.letterFiles"
                            :key="index + 'FILE'"
                        >
                          <div class="
                                                              d-flex
                                                              align-items-center
                                                              bg-light
                                                              p-2
                                                              justify-content-between
                                                            ">
                            <div class="d-flex align-items-center">
                              <a
                                  @click="viewIlova(item.url)"
                                  :download="
                                                                  getExt(item.url) == 'PDF' ||
                                                                  getExt(item.url) == 'pdf'
                                                                    ? false
                                                                    : true
                                                                "
                                  :href="
                                                                  getExt(item.url) == 'PDF' ||
                                                                  getExt(item.url) == 'pdf'
                                                                    ? `#`
                                                                    : `${baseUrl}/${item.url}`
                                                                "
                              >
                                <BaseFileViewer
                                    class="my-card-hovered"
                                    :uploadPath="item.url"
                                />
                              </a>
                              <span class="ml-2">
                                                          {{ item.fileName }}
                                                      </span>
                            </div>

                          </div>
                        </tr>
                      </div>

                      <!-- COMMISSION FILES -->
                      <div
                          class="wrapper"
                          v-if="selectedApplicationItem.commissionFiles && (selectedApplicationItem.applicationStatus == 'COMMISSION_SEEN' || selectedApplicationItem.applicationStatus == 'COMMISSION_SENT' || selectedApplicationItem.applicationStatus == 'COMMISSION_SIGNED' || selectedApplicationItem.applicationStatus == 'COMMISSION_CANCELLED')"
                      >
                        <span CLASS="fromcenter">{{ $t('commission_attached_files') }}</span>
                      </div>
                      <div
                          class="card card-body card-tabs mt-1"
                          style="min-height: 10em; width: 100%"
                          v-if="selectedApplicationItem.commissionFiles && selectedApplicationItem.commissionFiles.length"
                      >
                        <tr
                            class="mt-1"
                            v-for="(item, index) in selectedApplicationItem.commissionFiles"
                            :key="index + 'FILE'"
                        >
                          <div class="d-flex align-items-center bg-light p-2 justify-content-between">
                            <div class="d-flex align-items-center">
                              <a @click="viewIlova(item.url)"
                                 :download="getExt(item.url) == 'PDF' || getExt(item.url) == 'pdf' ? false : true"
                                 :href=" getExt(item.url) == 'PDF' || getExt(item.url) == 'pdf' ? `#` : `${baseUrl}/${item.url}`"
                              >
                                <BaseFileViewer
                                    class="my-card-hovered"
                                    :uploadPath="item.url"
                                />
                              </a>
                              <span class="ml-2">{{ item.fileName }}</span>
                            </div>
                          </div>
                        </tr>
                      </div>

                      <div
                          class="text-center card mt-3"
                          v-if="!selectedAppByStatus.id"
                      >
                        <h5
                            style="opacity: 0.3"
                            class="p-3"
                        >
                          {{ $t("submodules.doc.selected_doc") }}
                        </h5>
                      </div>

                    </b-overlay>
                  </b-tab>
                  <b-tab
                      :title="$t('submodules.doc.tab_doc_tree')"
                      lazy
                  >
                    <b-overlay
                        :opacity="0.1"
                        :show="loadingById"
                        rounded="sm"
                    >
                      <div
                          class="text-center card mt-3"
                          v-if="!selectedApplicationItem"
                      >
                        <h5
                            style="opacity: 0.3"
                            class="p-3"
                        >
                          {{ $t("submodules.doc.selected_doc") }}
                        </h5>
                      </div>
                      <document-tree
                          v-else
                          ref="documentTreeRef"
                          :doc-id="selectedApplicationItem.id"
                          @toggleLoading="toggleLoading"
                      ></document-tree>
                    </b-overlay>
                  </b-tab>
                  <b-tab
                      :title="$t('submodules.doc.tab_doc_history')"
                      lazy
                  >
                    <b-overlay
                        :opacity="0.1"
                        :show="loadingById"
                        rounded="sm"
                    >
                      <div
                          class="text-center card mt-3"
                          v-if="!selectedApplicationItem"
                      >
                        <h5
                            style="opacity: 0.3"
                            class="p-3"
                        >
                          {{ $t("submodules.doc.selected_doc") }}
                        </h5>
                      </div>
                      <document-history
                          v-else
                          ref="documentHistoryRef"
                          :doc-id="selectedApplicationItem.id"
                          @toggleLoading="toggleLoading"
                      ></document-history>
                    </b-overlay>
                  </b-tab>
                </b-tabs>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <b-sidebar
      width="85%"
      class="sidebar-part"
      shadow
      sidebar-class="p-0"
      right
      :no-header="true"
      v-model="isSidebar"
  >

    <DXAApplicationAllInfo
        ref="isSidebar_ref"
        @close="closeSidebar"
        @acceptApplication="selectSendType"
        :applicationId="selectedTrItem.id"
        :applicationStatus="selectedTrItem.applicationStatus"
    />

  </b-sidebar>
  <b-sidebar
      width="60%"
      class="sidebar-part"
      shadow
      :no-header="true"

      sidebar-class="p-0"
      right
      v-model="isSidebarRegion"
  >

    <Regions
        @save="save"
        @close="closeRegionSidebar"
    />

  </b-sidebar>
</div>
<!-- </Layout> -->
"},null]}