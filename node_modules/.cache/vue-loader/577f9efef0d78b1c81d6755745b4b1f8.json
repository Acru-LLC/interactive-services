{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\shared\\views\\components\\CreateFormGeoRegionStreets.vue?vue&type=style&index=0&id=092867b2&scoped=true&lang=css&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\shared\\views\\components\\CreateFormGeoRegionStreets.vue","mtime":1674799498087},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1667355356565},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouY29sLWZvcm0tbGFiZWwgew0KICBwYWRkaW5nLXRvcDogMDsNCn0NCg0KdWwgew0KICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7DQp9DQo="},{"version":3,"sources":["CreateFormGeoRegionStreets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkXA;AACA;AACA;;AAEA;AACA;AACA","file":"CreateFormGeoRegionStreets.vue","sourceRoot":"src/shared/views/components","sourcesContent":["<template>\r\n  <ValidationObserver\r\n      ref=\"observer\"\r\n      v-slot=\"{}\"\r\n  >\r\n    <b-row class=\"mb-3\">\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseMultiselectWithValidation\r\n            rules=\"required\"\r\n            class=\"required\"\r\n            v-model=\"editingItem.regionId\"\r\n            @select=\"regionSelected\"\r\n            :options=\"regions.map(e => e.id)\"\r\n            :label=\"$t('column.region')\"\r\n            :custom-label=\"customLabelRegion\"\r\n            :placeholder=\"$t('column.region')\"\r\n            open-direction=\"bottom\"\r\n            :max-height=\"600\"\r\n            :show-labels=\"false\"\r\n            :disabled=\"isDisabled()\"\r\n        />\r\n      </b-col>\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseMultiselectWithValidation\r\n            rules=\"required\"\r\n            class=\"required\"\r\n            v-model=\"editingItem.districtId\"\r\n            @select=\"districtSelected\"\r\n            :options=\"districts.map(e => e.id)\"\r\n            :label=\"$t('column.district')\"\r\n            :custom-label=\"customLabelDistrict\"\r\n            :placeholder=\"$t('column.district')\"\r\n            open-direction=\"bottom\"\r\n            :max-height=\"600\"\r\n            :show-labels=\"false\"\r\n            :disabled=\"isDisabled()\"\r\n        />\r\n      </b-col>\r\n    </b-row>\r\n    <b-row class=\"mb-3\">\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            rules=\"required\"\r\n            class=\"required\"\r\n            v-model=\"editingItem.nameUz\"\r\n            :label=\"$t('column.name_uz')\"\r\n            :placeholder=\"$t('column.name_uz')\"\r\n        />\r\n      </b-col>\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseMultiselectWithValidation\r\n            rules=\"required\"\r\n            class=\"required\"\r\n            v-model=\"editingItem.quarterId\"\r\n            :has-next-page=\"hasNextPageQuarters\"\r\n            @reachedEndOfList=\"quarterReachedEndOfList\"\r\n            @search-change=\"debounceSearchQuarters\"\r\n            :internal-search=\"false\"\r\n            :options=\"quarters.map(e => e.id)\"\r\n            :label=\"$t('column.quarter')\"\r\n            :custom-label=\"customLabelQuarter\"\r\n            :placeholder=\"$t('column.quarter')\"\r\n            open-direction=\"bottom\"\r\n            :max-height=\"600\"\r\n            :show-labels=\"false\"\r\n            :disabled=\"isDisabled()\"\r\n        />\r\n      </b-col>\r\n    </b-row>\r\n\r\n    <b-row class=\"mb-3\">\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            not-required\r\n            v-model=\"editingItem.nameLt\"\r\n            :label=\"$t('column.name_lt')\"\r\n            :placeholder=\"$t('column.name_lt')\"\r\n        />\r\n\r\n      </b-col>\r\n      <b-col\r\n          sm=\"12\"\r\n          md=\"6\"\r\n      >\r\n        <BaseInputWithValidation\r\n            not-required\r\n            v-model=\"editingItem.nameRu\"\r\n            :label=\"$t('column.name_ru')\"\r\n            :placeholder=\"$t('column.name_ru')\"\r\n        />\r\n      </b-col>\r\n    </b-row>\r\n  </ValidationObserver>\r\n</template>\r\n<script>\r\nconst MAIN_API_URL = 'directory/street-names'\r\n/*\r\n* YOU MUST SEND {{ MAIN_API_URL }} TO CRUD_SERVICE */\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport helperService from \"@/shared/services/helper.service\"\r\n\r\nexport default {\r\n  name: \"CreateFormGeoRegionStreets\",\r\n  props: {\r\n    customIsModeCreate: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    additionalParams: {\r\n      type: Object,\r\n      default: () => {\r\n      },\r\n    }\r\n\r\n  },\r\n  /*\r\n  * COMPONENTS */\r\n  components: {},\r\n  /*\r\n  * DATA */\r\n  data() {\r\n    return {\r\n      editingItem: {},\r\n      regions: [],\r\n      districts: [],\r\n      quarters: [],\r\n      hasNextPageQuarters: false,\r\n      debounce: null\r\n    }\r\n  },\r\n  /*\r\n  * COMPUTED */\r\n  computed: {\r\n    isModeCreate() {\r\n      return this.customIsModeCreate ? this.customIsModeCreate : this.$route.name === 'CreateGeoRegionStreet'\r\n    },\r\n    computedObserver() {\r\n      return this.$refs.observer\r\n    }\r\n  },\r\n  /*\r\n  * METHODS */\r\n  methods: {\r\n    quarterReachedEndOfList(e) {\r\n      if (e) {\r\n        this.fetchQuarters(this.editingItem.districtId)\r\n      }\r\n    },\r\n    customLabelQuarter(opt) {\r\n      let selected = this.quarters.find(e => e.id == opt);\r\n      if (selected) {\r\n        return `${\r\n            this.getName({\r\n              nameRu: selected.nameRu,\r\n              nameLt: selected.nameLt,\r\n              nameUz: selected.nameUz,\r\n            })\r\n        }`\r\n      }\r\n      return ``;\r\n    },\r\n    isDisabled() {\r\n      return this.additionalParams ? this.disabled = true : this.disabled = false\r\n    },\r\n    customLabelDistrict(opt) {\r\n      let selected = this.districts.find(e => e.id == opt);\r\n      if (selected) {\r\n        return `${\r\n            this.getName({\r\n              nameRu: selected.nameRu,\r\n              nameLt: selected.nameLt,\r\n              nameUz: selected.nameUz,\r\n            })\r\n        }`\r\n      }\r\n      return ``;\r\n    },\r\n    customLabelRegion(opt) {\r\n      let selected = this.regions.find(e => e.id == opt);\r\n      if (selected) {\r\n        return `${\r\n            this.getName({\r\n              nameRu: selected.nameRu,\r\n              nameLt: selected.nameLt,\r\n              nameUz: selected.nameUz,\r\n            })\r\n        }`\r\n      }\r\n      return ``;\r\n    },\r\n    async regionSelected($event, dontResetDistrict = false) {\r\n      if (!dontResetDistrict) {\r\n        this.editingItem.districtId = null\r\n      }\r\n      // GET DISTRICTS\r\n      if ($event)\r\n        await helperService.getGeoLocationsByParentId($event)\r\n            .then(res => {\r\n              this.districts = res.data\r\n              if (dontResetDistrict)\r\n                this.districtSelected(this.editingItem.districtId, true)\r\n            })\r\n            .catch(e => {\r\n              console.log(e)\r\n            })\r\n    },\r\n    async districtSelected($event, dontResetQuarter = false) {\r\n      if (!dontResetQuarter) {\r\n        this.editingItem.quarterId = null\r\n      }\r\n      // GET QUARTERS\r\n      // if ($event)\r\n      // this.fetchQuarters($event)\r\n    },\r\n    async debounceSearchQuarters(searchText) {\r\n      clearTimeout(this.debounce);\r\n      this.debounce = setTimeout(async () => {\r\n        await this.fetchQuartersWithKeyword(searchText);\r\n      }, 1000);\r\n    },\r\n    fetchQuartersWithKeyword(keyword) {\r\n      this.quarters = []\r\n      this.var_default_search_payload.page = 1\r\n      this.var_default_search_payload.keyword = keyword ? keyword : ''\r\n      this.fetchQuarters(this.editingItem.districtId)\r\n    },\r\n    async fetchQuarters(districtId) {\r\n      if (districtId) {\r\n        await crudAndListsService.searchListWithKeyword('directory/quarter-names', this.var_default_search_payload, `get-by-districtId/${districtId}`)\r\n            .then(res => {\r\n              this.quarters.push(...res.data.list)\r\n              this.hasNextPageQuarters = res.data.total / this.var_default_search_payload.itemsPerPage > this.var_default_search_payload.page\r\n              this.var_default_search_payload.page += 1\r\n            })\r\n            .catch(e => {\r\n              console.log(e)\r\n              this.quarters = []\r\n            })\r\n      } else {\r\n        this.quarters = []\r\n      }\r\n    },\r\n    treeClosed(veeName) {\r\n      this.computedObserver.refs[veeName].validate();\r\n    },\r\n    normalizer(node) {\r\n      if (!node.children || node.children.length === 0) {\r\n        delete node.children\r\n        return {\r\n          id: node.id,\r\n          label: this.getName({\r\n            nameRu: node.nameRu,\r\n            nameLt: node.nameLt,\r\n            nameUz: node.nameUz,\r\n          }),\r\n        }\r\n      }\r\n      return {\r\n        id: node.id,\r\n        label: this.getName({\r\n          nameRu: node.nameRu,\r\n          nameLt: node.nameLt,\r\n          nameUz: node.nameUz,\r\n        }),\r\n        children: node.children && node.children.length > 0 ? node.children : [],\r\n      }\r\n    },\r\n    save() {\r\n      this.computedObserver.validate().then(valid => {\r\n        if (valid) {\r\n          if (this.editingItem.id) {\r\n            crudAndListsService.update(MAIN_API_URL, this.editingItem).then(res => {\r\n              this.computedObserver.reset()\r\n              this.editingItem = Object.assign({}, {});\r\n              this.$router.go(-1)\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n          } else {\r\n            crudAndListsService.create(MAIN_API_URL, this.editingItem).then(res => {\r\n              this.computedObserver.reset()\r\n              this.editingItem = Object.assign({}, {});\r\n              this.$router.go(-1)\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n          }\r\n        } else {\r\n          this.$toast(this.$t('messages.fill_required_fields'), {type: 'error'});\r\n        }\r\n      });\r\n    }\r\n  },\r\n  /*\r\n  * CREATED */\r\n  async created() {\r\n    if (this.isModeCreate) {\r\n      await crudAndListsService.getEmpty(MAIN_API_URL)\r\n          .then(res => {\r\n            this.editingItem = res.data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    } else {\r\n      await crudAndListsService.getById(MAIN_API_URL, this.$route.params.id, false)\r\n          .then(res => {\r\n            this.editingItem = res.data\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n          })\r\n    }\r\n    // GET REGIONS\r\n    await helperService.fetchRegions()\r\n        .then(res => {\r\n          this.regions = res.data\r\n          this.regionSelected(this.editingItem.regionId, true)\r\n        })\r\n        .catch(e => {\r\n          console.log(e)\r\n        })\r\n\r\n    this.fetchQuarters(this.editingItem.districtId)\r\n\r\n    //GET ADDITIONAL PARAMS\r\n    if (this.additionalParams) {\r\n      this.editingItem.regionId = this.additionalParams.regionId\r\n      if (this.additionalParams.regionId) {\r\n        this.regionSelected(this.additionalParams.regionId)\r\n      }\r\n      this.editingItem.districtId = this.additionalParams.districtId\r\n      if (this.additionalParams.districtId) {\r\n        this.fetchQuarters(this.additionalParams.districtId)\r\n      }\r\n      this.editingItem.quarterId = this.additionalParams.quarterId\r\n    }\r\n\r\n  },\r\n  /*\r\n  WATCH */\r\n  watch: {\r\n    'editingItem.districtId': {\r\n      handler(newVal, oldVal) {\r\n        if (newVal != oldVal) {\r\n          this.quarters = []\r\n          this.var_default_search_payload.page = 1\r\n          if (newVal) {\r\n            this.fetchQuarters(newVal)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.col-form-label {\r\n  padding-top: 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n}\r\n</style>"]}]}