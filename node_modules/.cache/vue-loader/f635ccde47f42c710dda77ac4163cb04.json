{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\projects\\signature.vue?vue&type=template&id=4b51ba04&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\projects\\signature.vue","mtime":1674799497694},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1667355356566},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDxkaXY+CiAgICAgIDxkaXYKICAgICAgICAgIGlkPSJteUhlYWRlciIKICAgICAgICAgIGNsYXNzPSJjYXJkIGNhcmQtYm9keSBzdGlja3lIZWFkIgogICAgICA+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiA1OCUiPgogICAgICAgICAgICA8IS0tIDxiLWJ1dHRvbgogIHZhcmlhbnQ9InByaW1hcnkiCiAgY2xhc3M9ImJ0bi1jdXN0b20gbXItMiIKPgogIDxpIGNsYXNzPSJmYSBmYS1hcnJvdy1sZWZ0Ij48L2k+CjwvYi1idXR0b24+IC0tPgogICAgICAgICAgICA8aDUKICAgICAgICAgICAgICAgIGNsYXNzPSJmbG9hdC1yaWdodCBtLTAiCiAgICAgICAgICAgICAgICB2LWlmPSJudW1QYWdlcyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIHt7IGN1cnJlbnRQYWdlIH19IC8ge3sgbnVtUGFnZXMgfX0KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6IDQzJSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsb2F0LXJpZ2h0IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxiLWJ1dHRvbi1ncm91cD4KICAgICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmbG9hdC1yaWdodCIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNpZ25EYXRhIgogICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxiLW92ZXJsYXkKICAgICAgICAgICAgICAgICAgICAgIDpvcGFjaXR5PSIwLjEiCiAgICAgICAgICAgICAgICAgICAgICA6c2hvdz0ibG9hZGVyUXJDb2RlIgogICAgICAgICAgICAgICAgICAgICAgcm91bmRlZD0ic20iCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcXJjb2RlIG1yLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICB7eyAkdCgiYWN0aW9ucy5xcmNvZGUiKSB9fQogICAgICAgICAgICAgICAgICA8L2Itb3ZlcmxheT4KICAgICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmxvYXQtcmlnaHQgbXItMiIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNhdmUiCiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0ic3VjY2VzcyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXNhdmUiPjwvaT4KICAgICAgICAgICAgICAgICAge3sgJHQoImFjdGlvbnMuc2F2ZSIpIH19CiAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgIDwvYi1idXR0b24tZ3JvdXA+CgogICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgICBjbGFzcz0iZmxvYXQtcmlnaHQgbXItMiIKICAgICAgICAgICAgICAgICAgOnRvPSJ7bmFtZTogJ0xldHRlckluY29tZSd9IgogICAgICAgICAgICAgICAgICB2YXJpYW50PSJwcmltYXJ5IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1hcnJvdy1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICA8IS0tIHt7ICR0KCJhY3Rpb25zLmJhY2siKSB9fSAtLT4KICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgICAgPGItcm93PgogICAgICAgICAgPCEtLSA8Yi1jb2w+PC9iLWNvbD4gLS0+CiAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgPGItb3ZlcmxheQogICAgICAgICAgICAgICAgICB2YXJpYW50PSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgOm9wYWNpdHk9IjEiCiAgICAgICAgICAgICAgICAgIDpzaG93PSJsb2FkZXJQZGYiCiAgICAgICAgICAgICAgICAgIHJvdW5kZWQ9ImxnIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBpZD0icGRmSWQiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyNzBtbSAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDIxMG1tOwogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8VnVlRHJhZ1Jlc2l6ZQogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InotaW5kZXg6IDMiCiAgICAgICAgICAgICAgICAgICAgICA6aXNBY3RpdmU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWdVcmwgJiYgcXJDb2RlUGFnZSA9PSBjdXJyZW50UGFnZSIKICAgICAgICAgICAgICAgICAgICAgIDp3PSIxMTAiCiAgICAgICAgICAgICAgICAgICAgICA6aD0iMTEwIgogICAgICAgICAgICAgICAgICAgICAgOng9IngiCiAgICAgICAgICAgICAgICAgICAgICA6eT0ieSIKICAgICAgICAgICAgICAgICAgICAgIHYtb246cmVzaXppbmc9InJlc2l6ZSIKICAgICAgICAgICAgICAgICAgICAgIHYtb246ZHJhZ2dpbmc9InJlc2l6ZSIKICAgICAgICAgICAgICAgICAgICAgIDpwYXJlbnQ9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICA6aXNSZXNpemFibGU9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgOnBhcmVudExpbWl0YXRpb249InRydWUiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZWVudGVyPSJtb3VzZUVudGVyIgogICAgICAgICAgICAgICAgICAgICAgICBAbW91c2Vtb3ZlPSJtb3VzZW1vdmUiCiAgICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZWxlYXZlPSJtb3VzZUxlYXZlIgogICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJgJHsKICAgICAgICAgICAgICAgICAgICAgICAgaW1nVXJsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgZGF0YTppbWFnZS9wbmc7YmFzZTY0LCAke2ltZ1VybH1gCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiByZXF1aXJlKCdAL2Fzc2V0cy9pbWcucG5nJykKICAgICAgICAgICAgICAgICAgICAgIH1gIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvVnVlRHJhZ1Jlc2l6ZT4KCiAgICAgICAgICAgICAgICAgIDxwZGYKICAgICAgICAgICAgICAgICAgICAgIEBudW0tcGFnZXM9Im51bVBhZ2VzID0gJGV2ZW50IgogICAgICAgICAgICAgICAgICAgICAgdi1pZj0ic3JjIgogICAgICAgICAgICAgICAgICAgICAgcmVmPSJteVBkZkNvbXBvbmVudCIKICAgICAgICAgICAgICAgICAgICAgIDpwYWdlPSJjdXJyZW50UGFnZSIKICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InNyYyIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYi1vdmVybGF5PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICA8IS0tIDxiLWNvbD48L2ItY29sPiAtLT4KICAgICAgICA8L2Itcm93PgoKICAgICAgICA8Yi1yb3c+CiAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggbXQtNCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggbXQtNCIKICAgICAgICAgICAgICAgICAgc3R5bGU9Im92ZXJmbG93OiBhdXRvOyBtYXgtd2lkdGg6IDkwJSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1sLTMgbWItNCIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0icGFnZSBpbiBudW1QYWdlcyIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJwYWdlICsgJ3BhZ2UnIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPT0gcGFnZSA/ICdteS1jYXJkLWhvdmVyZWQtcGRmLWFjdGl2ZScgOiAnJwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJzZXRDdXJyZW50UGFnZShwYWdlKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS1jYXJkLWhvdmVyZWQtcGRmIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6IDIwMHB4OyFpbXBvcnRhbnQ7cG9zaXRpb246cmVsYXRpdmUiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwb3NpdGlvbjogYWJzb2x1dGU7IHotaW5kZXg6IDk5OSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWdVcmwgJiYgcXJDb2RlUGFnZSA9PSBwYWdlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogYCR7eSAvIDUuMX1weGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogYCR7eCAvIDUuMDh9cHhgLAogICAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWdVcmwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aGVpZ2h0PSIyMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp3aWR0aD0iMjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJgJHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZ1VybAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGBkYXRhOmltYWdlL3BuZztiYXNlNjQsICR7aW1nVXJsfWAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiByZXF1aXJlKCdAL2Fzc2V0cy9pbWcucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICB9YCIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgIDxwZGYKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJzcmMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0ic3JjIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpwYWdlPSJwYWdlIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2ItY29sPgogICAgICAgIDwvYi1yb3c+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPCEtLSBDT01NSVNTSU9OUyBNT0RBTCAtLT4KICAgIDxiLW1vZGFsCiAgICAgICAgc2Nyb2xsYWJsZQogICAgICAgIHYtbW9kZWw9ImNvbW1pc3Npb25zTW9kYWwiCiAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgOnRpdGxlPSJgJHskdCgnc3VibW9kdWxlcy5jb21taXNzaW9uLnRpdGxlJyl9YCIKICAgID4KICAgICAgPEJhc2VNdWx0aXNlbGVjdFdpdGhWYWxpZGF0aW9uCiAgICAgICAgICBydWxlcz0icmVxdWlyZWQiCiAgICAgICAgICBjbGFzcz0icmVxdWlyZWQiCiAgICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uVHlwZUlkIgogICAgICAgICAgOm9wdGlvbnM9ImNvbW1pc3Npb25UeXBlcy5tYXAoZSA9PiBlLmlkKSIKICAgICAgICAgIDpsYWJlbD0iJHQoJ3N1Ym1vZHVsZXMuY29tbWlzc2lvbi5zcGVjaWFsX2NvbW1pc3Npb25fdHlwZS50aXRsZScpIgogICAgICAgICAgbGFiZWwtb24tdG9wCiAgICAgICAgICBwbGFjZWhvbGRlcj0iIgogICAgICAgICAgOmN1c3RvbS1sYWJlbD0iY3VzdG9tTGFiZWxDb21taXNzaW9uVHlwZXMiCiAgICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYm90dG9tIgogICAgICAgICAgOm1heC1oZWlnaHQ9IjYwMCIKICAgICAgICAgIDpzaG93LWxhYmVscz0iZmFsc2UiCiAgICAgID48L0Jhc2VNdWx0aXNlbGVjdFdpdGhWYWxpZGF0aW9uPgoKICAgICAgPGItZm9ybS10ZXh0YXJlYQogICAgICAgICAgY2xhc3M9Im10LTMiCiAgICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uQ29tbWVudCIKICAgICAgICAgIDpwbGFjZWhvbGRlcj0iJHQoJ3N1Ym1vZHVsZXMuZG9jLnN1bW1hcnknKSIKICAgICAgICAgIHJvd3M9IjUiCiAgICAgID48L2ItZm9ybS10ZXh0YXJlYT4KCiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPgogICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICB2YXJpYW50PSJzdWNjZXNzIgogICAgICAgICAgICBAY2xpY2s9Im9wZW5TaWduYXR1cmVNb2RhbEZvckNvbW1pc3Npb24iCiAgICAgICAgPgogICAgICAgICAgPGItb3ZlcmxheQogICAgICAgICAgICAgIDpvcGFjaXR5PSIwLjEiCiAgICAgICAgICAgICAgOnNob3c9ImNvbW1pc3Npb25Nb2RhbExvYWRlciIKICAgICAgICAgICAgICByb3VuZGVkPSJzbSIKICAgICAgICAgID4KICAgICAgICAgICAge3sgJHQoImFjdGlvbnMuY29udGludWUiKSB9fQogICAgICAgICAgPC9iLW92ZXJsYXk+CiAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgPC90ZW1wbGF0ZT4KICAgIDwvYi1tb2RhbD4KCiAgICA8IS0tIENPTU1JU1NJT05TIE1PREFMIEZPUiBDb21tZW50LS0+CiAgICA8Yi1tb2RhbAogICAgICAgIHNjcm9sbGFibGUKICAgICAgICB2LW1vZGVsPSJjb21taXNzaW9uc01vZGFsRm9yQ29tbWVudCIKICAgICAgICBzaXplPSJtZCIKICAgICAgICA6dGl0bGU9ImAkeyR0KCdzdWJtb2R1bGVzLmNvbW1pc3Npb24udGl0bGUnKX1gIgogICAgPgogICAgICA8Yi1mb3JtLXRleHRhcmVhCiAgICAgICAgICBjbGFzcz0ibXQtMyIKICAgICAgICAgIHYtbW9kZWw9ImNvbW1lbnRGb3JDb21taXNzaW9uIgogICAgICAgICAgOnBsYWNlaG9sZGVyPSIkdCgnc3VibW9kdWxlcy5kb2Muc3VtbWFyeScpIgogICAgICAgICAgcm93cz0iNSIKICAgICAgPjwvYi1mb3JtLXRleHRhcmVhPgoKICAgICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI+CiAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgIHZhcmlhbnQ9InN1Y2Nlc3MiCiAgICAgICAgICAgIEBjbGljaz0ib3BlblNpZ25hdHVyZU1vZGFsRm9yQ29tbWlzc2lvbkZvckNvbW1lbnQiCiAgICAgICAgPgogICAgICAgICAgPGItb3ZlcmxheQogICAgICAgICAgICAgIDpvcGFjaXR5PSIwLjEiCiAgICAgICAgICAgICAgOnNob3c9ImNvbW1pc3Npb25Nb2RhbExvYWRlciIKICAgICAgICAgICAgICByb3VuZGVkPSJzbSIKICAgICAgICAgID4KICAgICAgICAgICAge3sgJHQoImFjdGlvbnMuY29udGludWUiKSB9fQogICAgICAgICAgPC9iLW92ZXJsYXk+CiAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgPC90ZW1wbGF0ZT4KICAgIDwvYi1tb2RhbD4KCiAgICA8Yi1tb2RhbAogICAgICAgIHNjcm9sbGFibGUKICAgICAgICB2LW1vZGVsPSJzaWduYXR1cmVNb2RhbCIKICAgICAgICBoaWRlLWZvb3RlcgogICAgICAgIHNpemU9ImxnIgogICAgICAgIDp0aXRsZT0iYCR7JHQoJ3N1Ym1vZHVsZXMucmVwb3J0cy5tYWtlX3NpZ24nKX1gIgogICAgPgogICAgICA8Yi1vdmVybGF5CiAgICAgICAgICA6b3BhY2l0eT0iMC4xIgogICAgICAgICAgOnNob3c9ImxvYWRlclNpZ24iCiAgICAgICAgICByb3VuZGVkPSJzbSIKICAgICAgPgogICAgICAgIDxTaWduS2V5cwogICAgICAgICAgICBAc2lnbj0ic2lnblN1Y2Nlc3MiCiAgICAgICAgICAgIDpkYXRhVG9TaWduPSJjdXJyZW50RG9jIgogICAgICAgIC8+CiAgICAgIDwvYi1vdmVybGF5PgogICAgPC9iLW1vZGFsPgogIDwvZGl2Pgo="},null]}