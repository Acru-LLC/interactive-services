{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\report\\organizitional\\components\\editReportDynamicModal.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\report\\organizitional\\components\\editReportDynamicModal.vue","mtime":1674799497805},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1667355376309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1667355356565},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1667355363746},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1667355361315},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1667355356562}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLyogQ2hyb21lLCBTYWZhcmksIEVkZ2UsIE9wZXJhICovDQppbnB1dDo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiwNCmlucHV0Ojotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHsNCiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOw0KICBtYXJnaW46IDA7DQp9DQoNCi8qIEZpcmVmb3ggKi8NCmlucHV0W3R5cGU9Im51bWJlciJdIHsNCiAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7DQp9DQoNCi5yb3RhdGVfdGV4dCB7DQogIGhlaWdodDogMTAwJTsNCiAgd29yZC1icmVhazogbm9ybWFsOw0KICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsOw0KICAtbXMtd3JpdGluZy1tb2RlOiB2ZXJ0aWNhbC1scjsNCiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMTgwZGVnKTsNCiAgLW1vei10cmFuc2Zvcm06IHJvdGF0ZSgtMTgwZGVnKTsNCiAgLW8tdHJhbnNmb3JtOiByb3RhdGUoLTE4MGRlZyk7DQogIHRyYW5zZm9ybTogcm90YXRlKC0xODBkZWcpOw0KICBwYWRkaW5nLWJvdHRvbTogMjBweCAhaW1wb3J0YW50Ow0KICBwYWRkaW5nLXRvcDogMjBweCAhaW1wb3J0YW50Ow0KfQ0KDQoubm9fZW50ZXJfdmFsdWUgew0KICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDsNCiAgbWluLXdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7DQp9DQoNCi5ncm93IHsNCiAgZm9udC1zaXplOiAxLjNlbTsNCiAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQouZ3Jvdzpob3ZlciwNCi5ncm93OmZvY3VzLA0KLmdyb3c6YWN0aXZlIHsNCiAgdHJhbnNpdGlvbjogYWxsIC4ycyBlYXNlLWluLW91dDsNCiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMyk7DQogIHRyYW5zZm9ybTogc2NhbGUoMS4zKTsNCn0NCg=="},{"version":3,"sources":["editReportDynamicModal.vue"],"names":[],"mappingso/DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"editReportDynamicModal.vue","sourceRoot":"src/modules/report/organizitional/components","sourcesContent":["<script>\r\nimport Service from \"@/modules/report/reportService\";\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\"\r\nimport Checkbox from \"vue-material-checkbox\";\r\n\r\nconst OKED_API_URL = 'reestr/info-oked'\r\nexport default {\r\n  props: {\r\n    isGenerated: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  components: { Checkbox },\r\n  data() {\r\n    return {\r\n      lastReportData: [],\r\n      lastReportDataRows: [],\r\n      lastReportFormulas: [],\r\n      debounce: null,\r\n      // OKED VARIABLES\r\n      okeds: [],\r\n      hasNextPageOked: false,\r\n      isLoadingOked: false,\r\n      okedSearchPayload: {},\r\n      // ----------------\r\n      f1Ids: [],\r\n      f2Ids: [],\r\n      fRowId: null,\r\n      tableId: null,\r\n      tableInfo: {},\r\n      reportId: null,\r\n      // getName: getName,\r\n      selectedColumns: [],\r\n      selectedRows: [],\r\n\r\n      firstColumns: [],\r\n      secondColumns: [],\r\n      thirdColumns: [],\r\n\r\n      thirdTrIdData: [],\r\n      currentRowId: null,\r\n      invalidEntries: 0,\r\n      currentItemData: [],\r\n      showData: [],\r\n      loader: false,\r\n      showResult: false,\r\n      report: {},\r\n      table: {},\r\n      formulas: [],\r\n      currentPosition: {\r\n        rowIndex: null,\r\n        columnIndex: null,\r\n        rowId: null,\r\n        columnId: null,\r\n      },\r\n      docTableFormulasList: {},\r\n      docTableFormulasListenColumnId: {},\r\n      trColumnIdOnDocColumnIdMap: {},\r\n    };\r\n  },\r\n  watch: {\r\n    thirdTrIdData: function (newThirdTrIdData) {\r\n      if (typeof newThirdTrIdData === 'object' && newThirdTrIdData.length > 0) {\r\n        let length = newThirdTrIdData.length;\r\n        for (let i = 0; i < length; i++) {\r\n          this.trColumnIdOnDocColumnIdMap[newThirdTrIdData[i].columnId] = i\r\n        }\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    getColumnData(i) {\r\n      let found = this.showData.find((e) => e.columnId == i.columnId)\r\n      if (found) {\r\n        return found.columnData\r\n      } else {\r\n        return \"\"\r\n      }\r\n    },\r\n    // DYNAMIC_REFERENCES METHODS\r\n    getRandomInt() {\r\n      let number = Math.floor(Math.random() * 10000000);\r\n      let bool = true\r\n      this.selectedRows.find(el => {\r\n        if (el.id == number) {\r\n          bool = false\r\n        } else if (el.id == number) {\r\n          bool = false\r\n        }\r\n        return bool\r\n      })\r\n      if (bool) {\r\n        return number;\r\n      } else {\r\n        this.getRandomInt()\r\n      }\r\n\r\n    },\r\n    async addNewRow() {\r\n      await this.selectedRows.push({ id: this.getRandomInt() })\r\n      await this.setDocumentColumnValues(this.lastReportData, this.lastReportFormulas)\r\n    },\r\n    async closeReport() {\r\n      this.$emit(\"closedReportLoader\");\r\n      this.cnf().then(async (rs) => {\r\n        if (rs.value) {\r\n          this.$emit('save', true)\r\n        }\r\n      });\r\n    },\r\n    stopFormingRows() {\r\n      Service.stopFormingTheReport(this.reportId)\r\n          .then(async (rs) => {\r\n            this.$set(this.tableInfo, 'hasDynamicRows', false)\r\n            // await this.deleteSuccess();\r\n          })\r\n          .catch((err) => {\r\n            // this.catchErr(err);\r\n          });\r\n    },\r\n    async deleteRow(index, data) {\r\n      let findElement = this.lastReportDataRows.findIndex(el => el.id == data.id)\r\n      if (findElement > -1) {\r\n        this.cnf().then(async (rs) => {\r\n          if (rs.value) {\r\n            await Service.deleteRowId(data.id, this.reportId)\r\n                .then(async (rs) => {\r\n                  // await this.deleteSuccess();\r\n                  this.selectedRows.splice(index, 1)\r\n                  await this.$forceUpdate()\r\n                  await this.resetIndex()\r\n                  await this.setDocumentColumnValues(this.lastReportData.filter(e => e.rowId != data.id), this.lastReportFormulas)\r\n                })\r\n                .catch((err) => {\r\n                  // this.catchErr(err);\r\n                })\r\n                .finally(async () => {\r\n                  await this.getById(this.tableId, this.reportId, this.tableInfo)\r\n                })\r\n            ;\r\n          }\r\n        });\r\n      } else {\r\n        this.cnf().then(async (rs) => {\r\n          if (rs.value) {\r\n            let newThirdTrIdData = []\r\n            this.thirdTrIdData = this.thirdTrIdData.map((e) => {\r\n              e.value = e.value.filter(d => {\r\n                if (d && d.rowId != data.id) {\r\n                  if (d.typeCode === \"BOOLEAN\") {\r\n                    d.valueBoolean = d.value\r\n                    d.valueString = null\r\n                    d.valueBigDecimal = null\r\n                    d.valueDate = null\r\n                    d.selectValueNameUz = null\r\n                  } else if (d.typeCode === \"STRING\") {\r\n                    d.valueString = d.value\r\n                    d.valueBigDecimal = null\r\n                    d.valueDate = null\r\n                    d.valueBoolean = null\r\n                    d.selectValueNameUz = null\r\n                  } else if (d.typeCode === \"BIGDECIMAL\") {\r\n                    d.valueBigDecimal = d.value\r\n                    d.valueString = null\r\n                    d.valueDate = null\r\n                    d.valueBoolean = null\r\n                    d.selectValueNameUz = null\r\n                  } else if (d.typeCode === \"DATE\") {\r\n                    d.valueDate = d.value\r\n                    d.valueString = null\r\n                    d.valueBigDecimal = null\r\n                    d.valueBoolean = null\r\n                    d.selectValueNameUz = null\r\n                  } else if (d.typeCode === \"YEAR\") {\r\n                    d.valueDate = null\r\n                    d.valueString = d.value\r\n                    d.valueBigDecimal = null\r\n                    d.valueBoolean = null\r\n                    d.selectValueNameUz = null\r\n                  } else if (d.typeCode === \"SELECT\") {\r\n                    d.valueString = null\r\n                    d.valueBigDecimal = null\r\n                    d.valueDate = null\r\n                    d.valueBoolean = null\r\n                  }\r\n                  newThirdTrIdData.push(d)\r\n                  return d\r\n                }\r\n              })\r\n              return e\r\n            })\r\n            this.selectedRows.splice(index, 1)\r\n            await this.$forceUpdate()\r\n            await this.resetIndex()\r\n            newThirdTrIdData.forEach(e => this.lastReportData.push(e))\r\n            await this.setDocumentColumnValues(this.lastReportData, this.lastReportFormulas)\r\n          }\r\n        });\r\n\r\n\r\n      }\r\n    },\r\n\r\n    dynamicRefsReachedEndOfList(e) {\r\n      if (e) {\r\n        this.fetchDynamicRefs()\r\n      }\r\n    },\r\n    async debounceSearchDynamicRefs(searchText) {\r\n      clearTimeout(this.debounce);\r\n      this.debounce = setTimeout(async () => {\r\n        await this.fetchDynamicRefsWithKeyword(searchText);\r\n      }, 1000);\r\n    },\r\n    fetchDynamicRefsWithKeyword(keyword) {\r\n      this.okeds = []\r\n      this.okedSearchPayload.page = 1\r\n      this.okedSearchPayload.keyword = keyword ? keyword : ''\r\n      this.fetchDynamicRefs()\r\n    },\r\n    async fetchDynamicRefs() {\r\n      this.isLoadingOked = true\r\n      await crudAndListsService.searchListWithKeyword(OKED_API_URL, this.okedSearchPayload)\r\n          .then(res => {\r\n            this.okeds.push(...res.data.list)\r\n            this.hasNextPageOked = res.data.total / this.okedSearchPayload.itemsPerPage > this.okedSearchPayload.page\r\n            this.okedSearchPayload.page += 1\r\n            if (!this.isModeCreate && this.editingItem.okedId) {\r\n              let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n              if (!foundItm && this.editingItem.infoOkedDto) {\r\n                this.okeds.push(this.editingItem.infoOkedDto)\r\n              }\r\n            }\r\n          })\r\n          .catch(e => {\r\n            console.log(e)\r\n            this.okeds = []\r\n          })\r\n          .finally(() => {\r\n            this.isLoadingOked = false\r\n          })\r\n    },\r\n    customLabelDynamicRef(opt) {\r\n      let selected = this.okeds.find(e => e.id == opt.id);\r\n      if (selected) {\r\n        return `${selected.code} - ${\r\n            selected.nameUz ?\r\n                this.getName({\r\n                  nameRu: selected.nameRu,\r\n                  nameLt: selected.nameLt,\r\n                  nameUz: selected.nameUz,\r\n                })\r\n                :\r\n                selected.name\r\n        }`\r\n      }\r\n      return ``;\r\n    },\r\n    // --------------------------\r\n    clearAll() {\r\n      this.selectedColumns = [];\r\n      this.selectedRows = [];\r\n      this.firstColumns = [];\r\n      this.secondColumns = [];\r\n      this.thirdColumns = [];\r\n      this.thirdTrIdData = [];\r\n      this.formulas = [];\r\n      this.table = [];\r\n      this.f1Ids = [];\r\n      this.f2Ids = [];\r\n    },\r\n    keydownEvt(evt, rowId, value, rowIndex, columnIndex, columnId, typeCode) {\r\n      this.keyUpEventsDisable(evt);\r\n      if (columnId != null) {\r\n        if (evt.keyCode == 40 && rowId != null) {\r\n          evt.preventDefault();\r\n          // down\r\n          if (rowIndex < this.selectedRows.length - 1) {\r\n            let currentColumn = this.thirdTrIdData[columnIndex];\r\n            let downRowColumn = this.selectedRows[rowIndex + 1];\r\n            let downInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: downRowColumn.id,\r\n                  columnId: currentColumn.columnId,\r\n                })\r\n            );\r\n            if (downInput) {\r\n              downInput.focus();\r\n            }\r\n          }\r\n        } else if (evt.keyCode == 38 && rowId != null) {\r\n          evt.preventDefault();\r\n          if (rowIndex != 0) {\r\n            let currentColumn = this.thirdTrIdData[columnIndex];\r\n            let upRowColumn = this.selectedRows[rowIndex - 1];\r\n            let upInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: upRowColumn.id,\r\n                  columnId: currentColumn.columnId,\r\n                })\r\n            );\r\n            if (upInput) {\r\n              upInput.focus();\r\n            }\r\n          }\r\n          //up\r\n        } else if (evt.keyCode == 37) {\r\n          evt.preventDefault();\r\n          //left\r\n          if (columnIndex != 0) {\r\n            let prevColumn = this.thirdTrIdData[columnIndex - 1];\r\n\r\n            let currentRow = this.selectedRows[rowIndex];\r\n            let prevInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: currentRow.id,\r\n                  columnId: prevColumn.columnId,\r\n                })\r\n            );\r\n            if (prevInput) {\r\n              if (prevInput.disabled) {\r\n                let count = this.thirdTrIdData.length - (columnIndex - 1);\r\n                for (let i = 0; i < count; i++) {\r\n                  let prevColumn2 = this.thirdTrIdData[columnIndex - 1 - i];\r\n                  if (prevColumn2) {\r\n                    let input = document.getElementById(\r\n                        JSON.stringify({\r\n                          rowId: currentRow.id,\r\n                          columnId: prevColumn2.columnId,\r\n                        })\r\n                    );\r\n                    if (input && input.disabled) {\r\n                      continue;\r\n                    } else {\r\n                      if (input) {\r\n                        input.focus();\r\n                      }\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                prevInput.focus();\r\n              }\r\n            }\r\n          }\r\n        } else if (evt.keyCode == 39) {\r\n          //right\r\n          evt.preventDefault();\r\n          if (this.thirdTrIdData.length - 1 > columnIndex) {\r\n            let nextColumn = this.thirdTrIdData[columnIndex + 1];\r\n            let currentRow = this.selectedRows[rowIndex];\r\n            let nextInput = document.getElementById(\r\n                JSON.stringify({\r\n                  rowId: currentRow.id,\r\n                  columnId: nextColumn.columnId,\r\n                })\r\n            );\r\n            if (nextInput) {\r\n              if (nextInput.disabled) {\r\n                let forCount = this.thirdTrIdData.length - (columnIndex + 1);\r\n                for (let i = 0; i < forCount; i++) {\r\n                  let nextColumn2 = this.thirdTrIdData[columnIndex + 1 + i];\r\n\r\n                  let input = document.getElementById(\r\n                      JSON.stringify({\r\n                        rowId: currentRow.id,\r\n                        columnId: nextColumn2.columnId,\r\n                      })\r\n                  );\r\n                  if (input.disabled) {\r\n                    continue;\r\n                  } else {\r\n                    if (input) {\r\n                      input.focus();\r\n                    }\r\n                    break;\r\n                  }\r\n                }\r\n              } else {\r\n                nextInput.focus();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async resetIndex() {\r\n      await this.$set(this.currentPosition, \"rowIndex\", null);\r\n      await this.$set(this.currentPosition, \"columnIndex\", null);\r\n      await this.$set(this.currentPosition, \"rowId\", null);\r\n      await this.$set(this.currentPosition, \"columnId\", null);\r\n      // await document.addEventListener(\"keydown\", this.keyUpEvents);\r\n    },\r\n    setError(f1, f2, frowId) {\r\n      this.f1Ids = f1;\r\n      this.f2Ids = f2;\r\n      this.fRowId = frowId;\r\n    },\r\n    keyUpEventsDisable(e) {\r\n      if (this.currentPosition.columnId != null) {\r\n        if (e.which === 38 || e.which === 40) {\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    },\r\n    keyUpEvents(evt) {\r\n      this.keyUpEventsDisable(evt);\r\n      // if (this.currentPosition.columnId != null) {\r\n      //   if (evt.keyCode == 40 && this.currentPosition.rowId != null) {\r\n      //     evt.preventDefault();\r\n      //     // down\r\n      //     if (this.currentPosition.rowIndex < this.selectedRows.length - 1) {\r\n      //       let currentColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex];\r\n      //       let downRowColumn =\r\n      //         this.selectedRows[this.currentPosition.rowIndex + 1];\r\n      //       let downInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: downRowColumn.id,\r\n      //           columnId: currentColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (downInput) {\r\n      //         downInput.focus();\r\n      //       }\r\n      //     }\r\n      //   } else if (evt.keyCode == 38 && this.currentPosition.rowId != null) {\r\n      //     evt.preventDefault();\r\n      //     if (this.currentPosition.rowIndex != 0) {\r\n      //       let currentColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex];\r\n      //       let upRowColumn =\r\n      //         this.selectedRows[this.currentPosition.rowIndex - 1];\r\n      //       let upInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: upRowColumn.id,\r\n      //           columnId: currentColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (upInput) {\r\n      //         upInput.focus();\r\n      //       }\r\n      //     }\r\n      //     //up\r\n      //   } else if (evt.keyCode == 37) {\r\n      //     evt.preventDefault();\r\n      //     //left\r\n      //     if (this.currentPosition.columnIndex != 0) {\r\n      //       let prevColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex - 1];\r\n      //       let currentRow = this.selectedRows[this.currentPosition.rowIndex];\r\n      //       let prevInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: currentRow.id,\r\n      //           columnId: prevColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (prevInput) {\r\n      //         if (prevInput.disabled) {\r\n      //           let count =\r\n      //             this.thirdTrIdData.length -\r\n      //             (this.currentPosition.columnIndex - 1);\r\n      //           for (let i = 0; i < count; i++) {\r\n      //             let prevColumn2 =\r\n      //               this.thirdTrIdData[\r\n      //                 this.currentPosition.columnIndex - 1 - i\r\n      //               ];\r\n      //             let input = document.getElementById(\r\n      //               JSON.stringify({\r\n      //                 rowId: currentRow.id,\r\n      //                 columnId: prevColumn2.columnId,\r\n      //               })\r\n      //             );\r\n      //             if (input && input.disabled) {\r\n      //               continue;\r\n      //             } else {\r\n      //               if (input) {\r\n      //                 input.focus();\r\n      //               }\r\n      //               break;\r\n      //             }\r\n      //           }\r\n      //         } else {\r\n      //           prevInput.focus();\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   } else if (evt.keyCode == 39) {\r\n      //     //right\r\n      //     evt.preventDefault();\r\n      //     if (\r\n      //       this.thirdTrIdData.length - 1 >\r\n      //       this.currentPosition.columnIndex\r\n      //     ) {\r\n      //       let nextColumn =\r\n      //         this.thirdTrIdData[this.currentPosition.columnIndex + 1];\r\n      //       let currentRow = this.selectedRows[this.currentPosition.rowIndex];\r\n      //       let nextInput = document.getElementById(\r\n      //         JSON.stringify({\r\n      //           rowId: currentRow.id,\r\n      //           columnId: nextColumn.columnId,\r\n      //         })\r\n      //       );\r\n      //       if (nextInput) {\r\n      //         if (nextInput.disabled) {\r\n      //           let forCount =\r\n      //             this.thirdTrIdData.length -\r\n      //             (this.currentPosition.columnIndex + 1);\r\n      //           for (let i = 0; i < forCount; i++) {\r\n      //             let nextColumn2 =\r\n      //               this.thirdTrIdData[\r\n      //                 this.currentPosition.columnIndex + 1 + i\r\n      //               ];\r\n\r\n      //             let input = document.getElementById(\r\n      //               JSON.stringify({\r\n      //                 rowId: currentRow.id,\r\n      //                 columnId: nextColumn2.columnId,\r\n      //               })\r\n      //             );\r\n      //             if (input.disabled) {\r\n      //               continue;\r\n      //             } else {\r\n      //               if (input) {\r\n      //                 input.focus();\r\n      //               }\r\n      //               break;\r\n      //             }\r\n      //           }\r\n      //         } else {\r\n      //           nextInput.focus();\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   }\r\n      // }\r\n    }\r\n    ,\r\n\r\n    focusVal(rowId, value, rowIndex, columnIndex, columnId, typeCode) {\r\n      this.$set(this.currentPosition, \"rowIndex\", parseFloat(rowIndex));\r\n      this.$set(this.currentPosition, \"columnIndex\", parseFloat(columnIndex));\r\n      this.$set(this.currentPosition, \"rowId\", parseFloat(rowId));\r\n      this.$set(this.currentPosition, \"columnId\", parseFloat(columnId));\r\n    },\r\n    getFormulas_2() {\r\n      return new Promise((res, rej) => {\r\n        if (this.tableId) {\r\n          Service.formulasByTableId_2(this.tableId)\r\n              .then(({ data }) => {\r\n                this.formulas = data;\r\n                res(data);\r\n              })\r\n              .catch((e) => rej(e));\r\n        } else {\r\n          rej();\r\n        }\r\n      });\r\n    },\r\n    getDataById(id) {\r\n      return new Promise((res, rej) => {\r\n        Service.getReportById(id)\r\n            .then(({ data }) => {\r\n              res(data);\r\n            })\r\n            .catch((e) => rej(e));\r\n      });\r\n    },\r\n    editValue(rowIndex, index) {\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'notEditable', false)\r\n      this.$forceUpdate();\r\n    },\r\n    resetValue(rowIndex, index) {\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueId', this.thirdTrIdData[index].value[rowIndex].originalSelectValueId)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueNameUz', this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueNameLt', this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'selectValueNameRu', this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu)\r\n      this.$set(this.thirdTrIdData[index].value[rowIndex], 'notEditable', true)\r\n      this.$forceUpdate();\r\n    },\r\n    setValue(rowId, value, rowIndex, index, id, typeCode, notEditable = false, initialLoadCall = false) {\r\n      // value.rowId = rowId\r\n      // value.typeCode = typeCode\r\n      //\r\n      // value.notEditable = notEditable\r\n      // value.selectValueNameLt = value.nameLt\r\n      // value.selectValueNameRu = value.nameRu\r\n      // value.selectValueNameUz = value.nameUz\r\n      //\r\n      /* this.thirdTrIdData[index].value[rowIndex] = {\r\n        rowId: rowId ? rowId : null,\r\n        value: typeCode == 'SELECT' ? '' : value,\r\n        selectValueNameUz: value ? value.nameUz : null,\r\n        selectValueNameLt: value ? value.nameLt : null,\r\n        selectValueNameRu: value ? value.nameRu : null,\r\n        originalSelectValueNameUz: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz : '',\r\n        originalSelectValueNameLt: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt : '',\r\n        originalSelectValueNameRu: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu : '',\r\n        typeCode: typeCode,\r\n        columnId: id,\r\n        notEditable: notEditable\r\n      }; */\r\n      if (initialLoadCall && typeCode === 'SELECT') {\r\n        let rowIndex = this.selectedRows.findIndex(el => el.id == rowId)\r\n        if (!this.thirdTrIdData[index].value[rowIndex].rowId) {\r\n          this.thirdTrIdData[index].value[rowIndex] = {\r\n            rowId: rowId,\r\n            value: typeCode === 'SELECT' ? '' : value,\r\n            selectValueId: value ? value.id : null,\r\n            selectValueNameUz: value ? (value.nameUz ? value.nameUz : value.name) : null,\r\n            selectValueNameLt: value ? value.nameLt : null,\r\n            selectValueNameRu: value ? value.nameRu : null,\r\n            originalSelectValueNameUz: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz : '',\r\n            originalSelectValueNameLt: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt : '',\r\n            originalSelectValueNameRu: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu : '',\r\n            typeCode: typeCode,\r\n            columnId: id,\r\n            notEditable: notEditable,\r\n          }\r\n          this.thirdTrIdData[index].value[rowIndex].originalselectValueId = value.id\r\n          this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz = value.nameUz\r\n          this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt = value.nameLt\r\n          this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu = value.nameRu\r\n        }\r\n      } else {\r\n        if (typeCode === 'SELECT') {\r\n          value.rowId = rowId\r\n          value.columnId = id\r\n          value.typeCode = typeCode\r\n          value.notEditable = notEditable\r\n          value.selectValueId = value.id\r\n          value.selectValueNameLt = value.nameLt\r\n          value.selectValueNameRu = value.nameRu\r\n          value.selectValueNameUz = value.nameUz ? value.nameUz : value.name\r\n        }\r\n\r\n        this.thirdTrIdData[index].value[rowIndex] = {\r\n          rowId: rowId,\r\n          value: typeCode === 'SELECT' ? '' : value,\r\n          selectValueId: value ? value.id : null,\r\n          selectValueNameUz: value ? value.nameUz : null,\r\n          selectValueNameLt: value ? value.nameLt : null,\r\n          selectValueNameRu: value ? value.nameRu : null,\r\n          originalSelectValueNameUz: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameUz : '',\r\n          originalSelectValueNameLt: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameLt : '',\r\n          originalSelectValueNameRu: this.thirdTrIdData[index].value[rowIndex] ? this.thirdTrIdData[index].value[rowIndex].originalSelectValueNameRu : '',\r\n          typeCode: typeCode,\r\n          columnId: id,\r\n          notEditable: notEditable,\r\n        };\r\n      }\r\n\r\n      document.getElementsByClassName(\"no_enter_value\").forEach((input) => {\r\n        if (JSON.parse(input.id).rowId) {\r\n          this.formulas.forEach((e) => {\r\n            let index_f2 = JSON.parse(e.f2).findIndex((d) => d == parseFloat(id));\r\n            let index_f1 = JSON.parse(e.f1).findIndex((d) => d == parseFloat(JSON.parse(input.id).columnId));\r\n            if (\r\n                index_f2 > -1 &&\r\n                index_f1 > -1 &&\r\n                parseFloat(JSON.parse(input.id).rowId) === parseFloat(rowId)\r\n            ) {\r\n\r\n              let allVal = 0;\r\n              document.getElementsByClassName(\"input_val\").forEach((vInput) => {\r\n                let e_index_f2 = JSON.parse(e.f2).findIndex(\r\n                    (d) => d == parseFloat(JSON.parse(vInput.id).columnId)\r\n                );\r\n\r\n                if (\r\n                    e_index_f2 > -1 &&\r\n                    parseFloat(JSON.parse(vInput.id).rowId) === parseFloat(rowId)\r\n                ) {\r\n                  if (this._empty(vInput.value)) {\r\n                  } else {\r\n                    if (typeof parseFloat(vInput.value) == \"number\") {\r\n                      allVal += parseFloat(vInput.value);\r\n                    } else {\r\n                      allVal += 0;\r\n                    }\r\n                  }\r\n\r\n                  this.$set(input, \"value\", parseFloat(allVal));\r\n                  let foundIndex = this.thirdTrIdData.findIndex(\r\n                      (e) => e.columnId == JSON.parse(input.id).columnId\r\n                  );\r\n                  this.thirdTrIdData[foundIndex].value[rowIndex] = {\r\n                    rowId: rowId ? rowId : null,\r\n                    value: allVal,\r\n                    typeCode: typeCode,\r\n                    columnId: JSON.parse(input.id).columnId,\r\n                  };\r\n                  this.$forceUpdate();\r\n                }\r\n              });\r\n            }\r\n          });\r\n        } else {\r\n          this.formulas.forEach((e) => {\r\n            let index_f2 = JSON.parse(e.f2).findIndex(\r\n                (d) => d == parseFloat(id)\r\n            );\r\n            let index_f1 = JSON.parse(e.f1).findIndex(\r\n                (d) => d == parseFloat(JSON.parse(input.id).columnId)\r\n            );\r\n            if (index_f2 > -1 && index_f1 > -1) {\r\n              let allVal = 0;\r\n              document.getElementsByClassName(\"input_val\").forEach((vInput) => {\r\n                let e_index_f2 = JSON.parse(e.f2).findIndex(\r\n                    (d) => d == parseFloat(JSON.parse(vInput.id).columnId)\r\n                );\r\n                if (e_index_f2 > -1) {\r\n                  if (this._empty(vInput.value)) {\r\n                  } else {\r\n                    if (typeof parseFloat(vInput.value) == \"number\") {\r\n                      allVal += parseFloat(vInput.value);\r\n                    } else {\r\n                      allVal += 0;\r\n                    }\r\n                  }\r\n                }\r\n                this.$set(input, \"value\", parseFloat(allVal));\r\n                let foundIndex = this.thirdTrIdData.findIndex(\r\n                    (e) => e.columnId == JSON.parse(input.id).columnId\r\n                );\r\n                this.thirdTrIdData[foundIndex].value[0] = {\r\n                  rowId: null,\r\n                  value: allVal,\r\n                  typeCode: typeCode,\r\n                  columnId: JSON.parse(input.id).columnId,\r\n                };\r\n                this.$forceUpdate();\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      this.$forceUpdate();\r\n\r\n    },\r\n    async setDocumentColumnValues(data, formulas) {\r\n      this.showData = []\r\n      this.currentItemData = data\r\n      if (data && data.length) {\r\n        data.forEach((e) => {\r\n          if (e.valueString || e.valueBigDecimal) {\r\n            if (e.typeCode === \"YEAR\") {\r\n              document.getElementsByClassName(\"custom-datepicker mx-datepicker dynamic-year\").forEach((field, idx) => {\r\n                if (JSON.parse(field.id).rowId) {\r\n                  if (\r\n                      parseFloat(JSON.parse(field.id).columnId) === parseFloat(e.columnId) &&\r\n                      parseFloat(JSON.parse(field.id).rowId) === parseFloat(e.rowId)\r\n                  ) {\r\n                    let rowIndex = this.selectedRows.findIndex(el => el.id == JSON.parse(field.id).rowId)\r\n                    let colIndex = this.thirdTrIdData.findIndex(item => item.columnId === e.columnId)\r\n                    this.setValue(e.rowId, e.value, rowIndex, colIndex, e.columnId, 'DATE')\r\n                  }\r\n                }\r\n              })\r\n            } else {\r\n              if (e.typeCode === 'BIGDECIMAL') {\r\n                let foundColumnId = this.showData.findIndex((d) => d.columnId === e.columnId)\r\n                if (foundColumnId > -1) {\r\n                  this.showData.map(f => {\r\n                    if (f.columnId == e.columnId) {\r\n                      f.columnData = (+f.columnData) + (+e.value)\r\n                    }\r\n                  })\r\n                } else {\r\n                  this.showData.push({\r\n                    columnId: e.columnId,\r\n                    columnData: (e.value)\r\n                  })\r\n                }\r\n              }\r\n\r\n              document\r\n                  .getElementsByClassName(\"input_val\").forEach((input) => {\r\n                formulas.forEach((element) => {\r\n                  let index_V = JSON.parse(element.f1).findIndex((e) => e == JSON.parse(input.id).columnId);\r\n                  if (index_V > -1) {\r\n                    this.$set(input, \"disabled\", true);\r\n                    this.$set(input.style, \"border\", \"none\");\r\n                    input.classList.add(\"no_enter_value\");\r\n                    input.style.fontWeight = \"bold\";\r\n                  }\r\n                });\r\n\r\n                if (JSON.parse(input.id).rowId) {\r\n                  if (\r\n                      parseFloat(JSON.parse(input.id).columnId) === parseFloat(e.columnId) &&\r\n                      parseFloat(JSON.parse(input.id).rowId) === parseFloat(e.rowId)\r\n                  ) {\r\n                    this.$set(input, \"value\", e.value);\r\n                  }\r\n                } else {\r\n                  if (\r\n                      parseFloat(JSON.parse(input.id).columnId) === parseFloat(e.columnId)\r\n                  ) {\r\n                    this.$set(input, \"value\", e.value);\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          } else if (e.valueDate) {\r\n            document.getElementsByClassName(\"custom-datepicker mx-datepicker dynamic-datepicker\").forEach((field, idx) => {\r\n              if (JSON.parse(field.id).rowId) {\r\n                if (\r\n                    parseFloat(JSON.parse(field.id).columnId) === parseFloat(e.columnId) &&\r\n                    parseFloat(JSON.parse(field.id).rowId) === parseFloat(e.rowId)\r\n                ) {\r\n                  let rowIndex = this.selectedRows.findIndex(el => el.id == JSON.parse(field.id).rowId)\r\n                  let colIndex = this.thirdTrIdData.findIndex(item => item.columnId === e.columnId)\r\n                  this.setValue(e.rowId, e.value, rowIndex, colIndex, e.columnId, 'DATE')\r\n                }\r\n              }\r\n            })\r\n          } else if (e.valueBoolean !== null) {\r\n            document.getElementsByClassName(\"checkbox_field\").forEach((field, idx) => {\r\n              let checkboxInput = field.classList.contains('active') ? field.children[0].children[1].children[0] : field.children[0].children[0].children[0]\r\n              if (checkboxInput.id && JSON.parse(checkboxInput.id) && JSON.parse(checkboxInput.id).rowId) {\r\n                if (\r\n                    parseFloat(JSON.parse(checkboxInput.id).columnId) === parseFloat(e.columnId) &&\r\n                    parseFloat(JSON.parse(checkboxInput.id).rowId) === parseFloat(e.rowId)\r\n                ) {\r\n                  let rowIndex = this.selectedRows.findIndex(el => el.id == JSON.parse(checkboxInput.id).rowId)\r\n                  let colIndex = this.thirdTrIdData.findIndex(item => item.columnId == e.columnId)\r\n                  this.setValue(e.rowId, JSON.parse(e.value), rowIndex, colIndex, e.columnId, 'BOOLEAN')\r\n                }\r\n              }\r\n            })\r\n          } else if (e.selectValueNameUz) {\r\n            document.getElementsByClassName(\"select_field\").forEach((field, idx) => {\r\n              if (JSON.parse(field.id).rowId) {\r\n                if (\r\n                    parseFloat(JSON.parse(field.id).columnId) === parseFloat(e.columnId) &&\r\n                    parseFloat(JSON.parse(field.id).rowId) === parseFloat(e.rowId)\r\n                ) {\r\n                  let rowIndex = this.selectedRows.findIndex(el => el.id == JSON.parse(field.id).rowId)\r\n                  let colIndex = this.thirdTrIdData.findIndex(item => item.columnId == e.columnId)\r\n                  this.setValue(\r\n                      e.rowId,\r\n                      {\r\n                        nameUz: e.selectValueNameUz,\r\n                        nameLt: e.selectValueNameLt,\r\n                        nameRu: e.selectValueNameRu,\r\n                        id: e.selectValueId\r\n                      }, rowIndex, colIndex, e.columnId, 'SELECT', true, true)\r\n                }\r\n              }\r\n            })\r\n          }\r\n        });\r\n      } else {\r\n        document\r\n            .getElementsByClassName(\"input_val\")\r\n            .forEach((input) => {\r\n              formulas.forEach((element) => {\r\n                let index_V = JSON.parse(element.f1).findIndex(\r\n                    (e) => e == JSON.parse(input.id).columnId\r\n                );\r\n                if (index_V > -1) {\r\n                  this.$set(input, \"disabled\", true);\r\n                  this.$set(input.style, \"border\", \"none\");\r\n                  input.classList.add(\"no_enter_value\");\r\n                  input.style.fontWeight = \"bold\";\r\n                }\r\n              });\r\n            });\r\n      }\r\n      for (const docTableFormulaTargetId in this.docTableFormulasList) {\r\n        let disabledElements = document.querySelectorAll('input[data-column-id=\"' + docTableFormulaTargetId + '\"]');\r\n        disabledElements.forEach((element) => {\r\n          element.classList.add(\"no_enter_value\");\r\n          element.disabled = true;\r\n        });\r\n      }\r\n    },\r\n    async getById(id, reportId, info) {\r\n      this.clearAll();\r\n      this.tableId = id;\r\n      this.reportId = reportId;\r\n      this.tableInfo = info;\r\n      this.loader = true;\r\n      await Service.reportGetById(reportId).then(({ data }) => {\r\n        this.report = data;\r\n        this.$emit('setReportGenerated', this.report.generated);\r\n      });\r\n      await Service.getByIdTableWithReportId(id, reportId)\r\n        .then(async (rs) => {\r\n          if (rs.data) {\r\n            await this.setColumns(rs.data.columns, rs.data.rows.length);\r\n            this.setRow(rs.data.rows);\r\n            this.table = rs.data.table;\r\n            setTimeout(() => {\r\n              Promise.all([\r\n                this.getDataById(reportId),\r\n                this.getFormulas_2(),\r\n              ]).then(([data, formulas]) => {\r\n                    this.lastReportData = data\r\n                    this.lastReportFormulas = formulas\r\n                    this.setDocumentColumnValues(data, formulas)\r\n                    this.loader = false;\r\n                  });\r\n            },500);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          this.loader = false;\r\n        });\r\n      await Service.getDocTableFormulasList(id).then(({ data }) => {\r\n        this.docTableFormulasList = {};\r\n        let length = data.length;\r\n        let currentTargetColumnId = null;\r\n        for (let i = 0; i < length; i++) {\r\n          if (this.docTableFormulasList[data[i].targetColumnId] === undefined) {\r\n            currentTargetColumnId = data[i].targetColumnId;\r\n            this.docTableFormulasList[data[i].targetColumnId] = {\r\n              eval: \"\",\r\n              list: [],\r\n              listenColumns: [],\r\n              targetColumnId: data[i].targetColumnId\r\n            };\r\n          }\r\n          this.docTableFormulasList[data[i].targetColumnId].list.push(data[i]);\r\n          if (data[i].docColumnId) {\r\n            if (data[i].docColumnId && this.docTableFormulasList[data[i].targetColumnId].listenColumns.indexOf(data[i].docColumnId) === -1) {\r\n              this.docTableFormulasList[data[i].targetColumnId].listenColumns.push(data[i].docColumnId)\r\n            }\r\n            if (this.docTableFormulasListenColumnId[data[i].docColumnId] === undefined) {\r\n              this.docTableFormulasListenColumnId[data[i].docColumnId] = [data[i].targetColumnId];\r\n            } else {\r\n              if (this.docTableFormulasListenColumnId[data[i].docColumnId].indexOf(data[i].targetColumnId) === -1) {\r\n                this.docTableFormulasListenColumnId[data[i].docColumnId].push(data[i].targetColumnId);\r\n              }\r\n            }\r\n          }\r\n          if (data[i].type === \"ARGUMENTS\") {\r\n            this.docTableFormulasList[data[i].targetColumnId].eval += \"{\" + data[i].docColumnId + \"}\";\r\n          } else {\r\n            this.docTableFormulasList[data[i].targetColumnId].eval += data[i].code;\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    async setColumns(v, rowsCount) {\r\n      this.selectedColumns = v;\r\n      this.firstColumns = [];\r\n      this.secondColumns = [];\r\n      this.thirdColumns = [];\r\n      v.forEach((el1) => {\r\n        this.firstColumns.push(el1);\r\n        el1.children.forEach((el2) => {\r\n          this.secondColumns.push(el2);\r\n          el2.children.forEach((el3) => {\r\n            this.thirdColumns.push({ ...el3, fId: el1.id });\r\n          });\r\n        });\r\n      });\r\n      setTimeout(async () => {\r\n        let firstTrTh = document.getElementsByClassName(\"firstTrTh\");\r\n        let secondTrTh = document.getElementsByClassName(\"secondTrTh\");\r\n        let thirdTrTh = document.getElementsByClassName(\"thirdTrTh\");\r\n        let counter2 = 0,\r\n            counter3 = 0;\r\n        await firstTrTh.forEach(async (th) => {\r\n          if (th.colSpan > 1) {\r\n            for (let index2 = 0; index2 < th.colSpan; index2++) {\r\n              if (secondTrTh[counter2] && secondTrTh[counter2].colSpan > 1) {\r\n                for (\r\n                    let index3 = 0;\r\n                    index3 < secondTrTh[counter2].colSpan;\r\n                    index3++\r\n                ) {\r\n                  let array = thirdTrTh[counter3].id.split(\",\");\r\n                  let tmp = {\r\n                    columnId: array[0],\r\n                    typeCode: array[1],\r\n                    refCode: array[2],\r\n                    referenceUrl: array[3],\r\n                    referenceAppendUrl: array[4],\r\n                    referenceCode: array[5],\r\n                    referenceNameUz: array[6],\r\n                    referenceNameLt: array[7],\r\n                    referenceNameRu: array[8],\r\n                    searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                    hasNextPage: false,\r\n                    options: [],\r\n                    rowId: [],\r\n                    value: [],\r\n                  };\r\n                  // GET DYNAMIC REFRENCE OPTIONS\r\n                  if (tmp.typeCode == 'SELECT') {\r\n                    for (let i = 0; i < rowsCount; i++) {\r\n                      tmp.value.push({ selectedItem: null })\r\n                    }\r\n                    crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                        .then(res => {\r\n                          if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                            tmp.options.push(...res.data)\r\n                          } else {\r\n                            tmp.options.push(...res.data.list)\r\n                          }\r\n                          tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                          tmp.searchPayload.page += 1\r\n                          /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                              let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                              if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                  this.okeds.push(this.editingItem.infoOkedDto)\r\n                              }\r\n                          } */\r\n                        })\r\n                        .catch(e => {\r\n                          console.log(e)\r\n                          // this.okeds = []\r\n                        })\r\n                        .finally(() => {\r\n                          // this.isLoadingOked = false\r\n                        })\r\n                  }\r\n                  this.thirdTrIdData.push(tmp);\r\n                  counter3++;\r\n                }\r\n                counter2++;\r\n              } else {\r\n                if (\r\n                    secondTrTh[counter2] &&\r\n                    secondTrTh[counter2].classList.contains(\"thirdTrId\")\r\n                ) {\r\n                  let array = secondTrTh[counter2].id.split(\",\");\r\n                  let tmp = {\r\n                    columnId: array[0],\r\n                    typeCode: array[1],\r\n                    refCode: array[2],\r\n                    referenceUrl: array[3],\r\n                    referenceAppendUrl: array[4],\r\n                    referenceCode: array[5],\r\n                    referenceNameUz: array[6],\r\n                    referenceNameLt: array[7],\r\n                    referenceNameRu: array[8],\r\n                    searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                    hasNextPage: false,\r\n                    options: [],\r\n                    rowId: [],\r\n                    value: [],\r\n                  };\r\n                  // GET DYNAMIC REFRENCE OPTIONS\r\n                  if (tmp.typeCode == 'SELECT') {\r\n                    for (let i = 0; i < rowsCount; i++) {\r\n                      tmp.value.push({ selectedItem: null })\r\n                    }\r\n                    crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                        .then(res => {\r\n                          if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                            tmp.options.push(...res.data)\r\n                          } else {\r\n                            tmp.options.push(...res.data.list)\r\n                          }\r\n                          tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                          tmp.searchPayload.page += 1\r\n                          /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                              let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                              if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                  this.okeds.push(this.editingItem.infoOkedDto)\r\n                              }\r\n                          } */\r\n                        })\r\n                        .catch(e => {\r\n                          console.log(e)\r\n                          // this.okeds = []\r\n                        })\r\n                        .finally(() => {\r\n                          // this.isLoadingOked = false\r\n                        })\r\n                  }\r\n                  this.thirdTrIdData.push(tmp);\r\n                  counter2++;\r\n                } else {\r\n                  if (secondTrTh[counter2]) {\r\n                    for (\r\n                        let index3 = 0;\r\n                        index3 < secondTrTh[counter2].colSpan;\r\n                        index3++\r\n                    ) {\r\n                      let array = thirdTrTh[counter3].id.split(\",\");\r\n                      let tmp = {\r\n                        columnId: array[0],\r\n                        typeCode: array[1],\r\n                        refCode: array[2],\r\n                        referenceUrl: array[3],\r\n                        referenceAppendUrl: array[4],\r\n                        referenceCode: array[5],\r\n                        referenceNameUz: array[6],\r\n                        referenceNameLt: array[7],\r\n                        referenceNameRu: array[8],\r\n                        searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                        hasNextPage: false,\r\n                        options: [],\r\n                        rowId: [],\r\n                        value: [],\r\n                      };\r\n                      // GET DYNAMIC REFRENCE OPTIONS\r\n                      if (tmp.typeCode == 'SELECT') {\r\n                        for (let i = 0; i < rowsCount; i++) {\r\n                          tmp.value.push({ selectedItem: null })\r\n                        }\r\n                        crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                            .then(res => {\r\n                              if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                                tmp.options.push(...res.data)\r\n                              } else {\r\n                                tmp.options.push(...res.data.list)\r\n                              }\r\n                              tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                              tmp.searchPayload.page += 1\r\n                              /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                  let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                  if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                      this.okeds.push(this.editingItem.infoOkedDto)\r\n                                  }\r\n                              } */\r\n                            })\r\n                            .catch(e => {\r\n                              console.log(e)\r\n                              // this.okeds = []\r\n                            })\r\n                            .finally(() => {\r\n                              // this.isLoadingOked = false\r\n                            })\r\n                      }\r\n                      this.thirdTrIdData.push(tmp);\r\n                      counter3++;\r\n                    }\r\n\r\n                    counter2++;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            if (th.classList.contains(\"thirdTrId\")) {\r\n              let array = th.id.split(\",\");\r\n              let tmp = {\r\n                columnId: array[0],\r\n                typeCode: array[1],\r\n                refCode: array[2],\r\n                referenceUrl: array[3],\r\n                referenceAppendUrl: array[4],\r\n                referenceCode: array[5],\r\n                referenceNameUz: array[6],\r\n                referenceNameLt: array[7],\r\n                referenceNameRu: array[8],\r\n                searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                hasNextPage: false,\r\n                options: [],\r\n                rowId: [],\r\n                value: [],\r\n              };\r\n              // GET DYNAMIC REFRENCE OPTIONS\r\n              if (tmp.typeCode == 'SELECT') {\r\n                for (let i = 0; i < rowsCount; i++) {\r\n                  tmp.value.push({ selectedItem: null })\r\n                }\r\n                crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                    .then(res => {\r\n                      if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                        tmp.options.push(...res.data)\r\n                      } else {\r\n                        tmp.options.push(...res.data.list)\r\n                      }\r\n                      tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                      tmp.searchPayload.page += 1\r\n                      /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                          let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                          if (!foundItm && this.editingItem.infoOkedDto) {\r\n                              this.okeds.push(this.editingItem.infoOkedDto)\r\n                          }\r\n                      } */\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e)\r\n                      // this.okeds = []\r\n                    })\r\n                    .finally(() => {\r\n                      // this.isLoadingOked = false\r\n                    })\r\n              }\r\n              this.thirdTrIdData.push(tmp);\r\n            } else {\r\n              for (let index2 = 0; index2 < th.colSpan; index2++) {\r\n                if (secondTrTh[counter2].colSpan > 1) {\r\n                  for (\r\n                      let index3 = 0;\r\n                      index3 < secondTrTh[counter2].colSpan;\r\n                      index3++\r\n                  ) {\r\n                    let array = thirdTrTh[counter3].id.split(\",\");\r\n                    let tmp = {\r\n                      columnId: array[0],\r\n                      typeCode: array[1],\r\n                      refCode: array[2],\r\n                      referenceUrl: array[3],\r\n                      referenceAppendUrl: array[4],\r\n                      referenceCode: array[5],\r\n                      referenceNameUz: array[6],\r\n                      referenceNameLt: array[7],\r\n                      referenceNameRu: array[8],\r\n                      searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                      hasNextPage: false,\r\n                      options: [],\r\n                      rowId: [],\r\n                      value: [],\r\n                    };\r\n                    // GET DYNAMIC REFRENCE OPTIONS\r\n                    if (tmp.typeCode == 'SELECT') {\r\n                      for (let i = 0; i < rowsCount; i++) {\r\n                        tmp.value.push({ selectedItem: null })\r\n                      }\r\n                      crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                          .then(res => {\r\n                            if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                              tmp.options.push(...res.data)\r\n                            } else {\r\n                              tmp.options.push(...res.data.list)\r\n                            }\r\n                            tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                            tmp.searchPayload.page += 1\r\n                            /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                    this.okeds.push(this.editingItem.infoOkedDto)\r\n                                }\r\n                            } */\r\n                          })\r\n                          .catch(e => {\r\n                            console.log(e)\r\n                            // this.okeds = []\r\n                          })\r\n                          .finally(() => {\r\n                            // this.isLoadingOked = false\r\n                          })\r\n                    }\r\n                    this.thirdTrIdData.push(tmp);\r\n                    counter3++;\r\n                  }\r\n                  counter2++;\r\n                } else {\r\n                  if (\r\n                      secondTrTh[counter2] &&\r\n                      secondTrTh[counter2].classList.contains(\"thirdTrId\")\r\n                  ) {\r\n                    let array = secondTrTh[counter2].id.split(\",\");\r\n                    let tmp = {\r\n                      columnId: array[0],\r\n                      typeCode: array[1],\r\n                      refCode: array[2],\r\n                      referenceUrl: array[3],\r\n                      referenceAppendUrl: array[4],\r\n                      referenceCode: array[5],\r\n                      referenceNameUz: array[6],\r\n                      referenceNameLt: array[7],\r\n                      referenceNameRu: array[8],\r\n                      searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                      hasNextPage: false,\r\n                      options: [],\r\n                      rowId: [],\r\n                      value: [],\r\n                    };\r\n                    // GET DYNAMIC REFRENCE OPTIONS\r\n                    if (tmp.typeCode == 'SELECT') {\r\n                      for (let i = 0; i < rowsCount; i++) {\r\n                        tmp.value.push({ selectedItem: null })\r\n                      }\r\n                      crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                          .then(res => {\r\n                            if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                              tmp.options.push(...res.data)\r\n                            } else {\r\n                              tmp.options.push(...res.data.list)\r\n                            }\r\n                            tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                            tmp.searchPayload.page += 1\r\n                            /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                    this.okeds.push(this.editingItem.infoOkedDto)\r\n                                }\r\n                            } */\r\n                          })\r\n                          .catch(e => {\r\n                            console.log(e)\r\n                            // this.okeds = []\r\n                          })\r\n                          .finally(() => {\r\n                            // this.isLoadingOked = false\r\n                          })\r\n                    }\r\n                    this.thirdTrIdData.push(tmp);\r\n                    counter2++;\r\n                  } else {\r\n                    if (secondTrTh[counter2]) {\r\n                      for (\r\n                          let index3 = 0;\r\n                          index3 < secondTrTh[counter2].colSpan;\r\n                          index3++\r\n                      ) {\r\n                        let array = thirdTrTh[counter3].id.split(\",\");\r\n                        let tmp = {\r\n                          columnId: array[0],\r\n                          typeCode: array[1],\r\n                          refCode: array[2],\r\n                          referenceUrl: array[3],\r\n                          referenceAppendUrl: array[4],\r\n                          referenceCode: array[5],\r\n                          referenceNameUz: array[6],\r\n                          referenceNameLt: array[7],\r\n                          referenceNameRu: array[8],\r\n                          searchPayload: Object.assign({}, this.var_default_search_payload),\r\n                          hasNextPage: false,\r\n                          options: [],\r\n                          rowId: [],\r\n                          value: [],\r\n                        };\r\n                        // GET DYNAMIC REFRENCE OPTIONS\r\n                        if (tmp.typeCode == 'SELECT') {\r\n                          for (let i = 0; i < rowsCount; i++) {\r\n                            tmp.value.push({ selectedItem: null })\r\n                          }\r\n                          crudAndListsService.searchListWithKeyword(tmp.referenceUrl, tmp.searchPayload, tmp.referenceAppendUrl)\r\n                              .then(res => {\r\n                                if (\"DepartmentForDocument\" === tmp.refCode) {\r\n                                  tmp.options.push(...res.data)\r\n                                } else {\r\n                                  tmp.options.push(...res.data.list)\r\n                                }\r\n                                tmp.hasNextPage = res.data.total / tmp.searchPayload.itemsPerPage > tmp.searchPayload.page\r\n                                tmp.searchPayload.page += 1\r\n                                /* if (!this.isModeCreate && this.editingItem.okedId) {\r\n                                    let foundItm = this.okeds.find(el => el.id == this.editingItem.okedId)\r\n                                    if (!foundItm && this.editingItem.infoOkedDto) {\r\n                                        this.okeds.push(this.editingItem.infoOkedDto)\r\n                                    }\r\n                                } */\r\n                              })\r\n                              .catch(e => {\r\n                                console.log(e)\r\n                                // this.okeds = []\r\n                              })\r\n                              .finally(() => {\r\n                                // this.isLoadingOked = false\r\n                              })\r\n                        }\r\n                        this.thirdTrIdData.push(tmp);\r\n                        counter3++;\r\n                      }\r\n                      counter2++;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }, 300);\r\n    },\r\n    setRow(v) {\r\n      this.selectedRows = v;\r\n      this.lastReportDataRows = JSON.parse(JSON.stringify(v));\r\n      if (this.selectedRows.length == 0 && !this.isGenerated) {\r\n        this.selectedRows = [{ id: this.getRandomInt() }];\r\n      }\r\n    },\r\n    rowspanFirst(el) {\r\n      return el.children.length > 0\r\n          ? 1\r\n          : el.children.length > 0 && this.thirdColumns.length > 0\r\n              ? 3\r\n              : 3;\r\n    },\r\n    colspanFirst(el) {\r\n      let found = this.thirdColumns.filter((i) => i.fId === el.id);\r\n      let totalNotChild = el.children.filter((d) => d.children.length == 0);\r\n      return el.children.length > 0 && found.length == 0\r\n          ? el.children.length\r\n          : el.children.length > 0 && found.length > 0\r\n              ? totalNotChild.length + found.length\r\n              : 1;\r\n    },\r\n    rowspanSecond(el) {\r\n      return el.children.length == 0 && this.thirdColumns.length == 0\r\n          ? 1\r\n          : el.children.length == 0 && this.thirdColumns.length > 0\r\n              ? 2\r\n              : 1;\r\n    },\r\n    colspanSecond(el) {\r\n      return el.children.length > 0 ? el.children.length : 1;\r\n    },\r\n    rowspanFirstClass(el) {\r\n      return el.children.length > 0\r\n          ? \"\"\r\n          : el.children.length > 0 && this.thirdColumns.length > 0\r\n              ? \"thirdTrId\"\r\n              : \"thirdTrId\";\r\n    },\r\n    rowspanSecondClass(el) {\r\n      return el.children.length == 0 && this.thirdColumns.length == 0\r\n          ? \"thirdTrId\"\r\n          : el.children.length == 0 && this.thirdColumns.length > 0\r\n              ? \"thirdTrId\"\r\n              : \"\";\r\n    },\r\n    normalizer(node) {\r\n      if (!node.children || node.children.length === 0) {\r\n        delete node.children\r\n        return {\r\n          id: node.id,\r\n          label: this.getName({\r\n            nameRu: node.nameRu,\r\n            nameLt: node.nameLt,\r\n            nameUz: node.nameUz,\r\n          }),\r\n        }\r\n      }\r\n      return {\r\n        id: node.id,\r\n        label: this.getName({\r\n          nameRu: node.nameRu,\r\n          nameLt: node.nameLt,\r\n          nameUz: node.nameUz,\r\n        }),\r\n        children: node.children && node.children.length > 0 ? node.children : [],\r\n      }\r\n    },\r\n    calculateDocFormulas(rowId, value, rowIndex, columnIndex, columnId, typeCode) {\r\n      // rowIndex is `selectedRows` index\r\n\r\n      if (this.docTableFormulasListenColumnId[columnId] === undefined) {\r\n        return false;\r\n      }\r\n      let targets = this.docTableFormulasListenColumnId[columnId];\r\n      for (const targetIndex in targets) {\r\n        const docTableFormula = this.docTableFormulasList[targets[targetIndex]];\r\n        let evalString = docTableFormula.eval;\r\n        for (const listenColumn of docTableFormula.listenColumns) {\r\n          let thirdIndex = this.trColumnIdOnDocColumnIdMap[listenColumn];\r\n          let val = parseFloat(this.thirdTrIdData[thirdIndex]?.value[rowIndex]?.value ?? 0);\r\n          if (!val) {\r\n            this.report\r\n          }\r\n          val = isNaN(val) ? 0 : val;\r\n          evalString = evalString.replace(\"{\" + listenColumn + \"}\", val);\r\n        }\r\n        let val = eval(evalString);\r\n\r\n        // todo optimize qilish kerak. v-model bilan qilish kerak\r\n        this.$set(document.getElementById(JSON.stringify({\r\n          \"rowId\": rowId,\r\n          \"columnId\": docTableFormula.targetColumnId.toString()\r\n        })), \"value\", val);\r\n\r\n        this.setValue(rowId, val, rowIndex, this.trColumnIdOnDocColumnIdMap[docTableFormula.targetColumnId], docTableFormula.targetColumnId, typeCode);\r\n      }\r\n    },\r\n    treeClosed(veeName) {\r\n      this.computedObserver.refs[veeName].validate();\r\n    },\r\n    selectCustomLabel({ nameUz, nameLt, nameRu, name, fullName }) {\r\n      if (nameUz) {\r\n        return this.getName({ nameUz: nameUz, nameLt: nameLt, nameRu: nameRu });\r\n      }\r\n      if (fullName) {\r\n        return fullName;\r\n      }\r\n      return name;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div>\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <h5 class=\"text-center mb-1\">\r\n            <strong>\r\n              {{ getName({ nameLt: table.nameLt, nameUz: table.nameUz, nameRu: table.nameRu }) }}\r\n\r\n            </strong>\r\n          </h5>\r\n          <p class=\"text-center m-0\">\r\n            {{ getName({ nameLt: table.titleLt, nameUz: table.titleUz, nameRu: table.titleRu }) }}\r\n\r\n          </p>\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <div class=\"d-flex justify-content-between align-items-end pl-3 pr-3\">\r\n            <div>\r\n              <strong>\r\n                {{\r\n                  getName({\r\n                    nameLt: report.nameLt,\r\n                    nameRu: report.nameRu,\r\n                    nameUz: report.nameUz\r\n                  })\r\n                }}\r\n              </strong><br>\r\n              <span>\r\n                {{\r\n                  report.reportDate\r\n                }}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <strong>\r\n                {{\r\n                  getName({\r\n                    nameLt: table.conditionLt,\r\n                    nameRu: table.conditionRu,\r\n                  })\r\n                }}\r\n              </strong>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <b-overlay :opacity=\"0.1\" :show=\"loader\" rounded=\"sm\">\r\n            <div class=\"bg-white pl-3 pr-3 pt-1\" style=\"min-height: 60vh; overflow: auto;\">\r\n              <div class=\"pb-5\">\r\n\r\n                <table class=\"table thead-table table-centered table-custom-bordered\">\r\n                  <thead>\r\n                  <tr class=\"tr-text-center\">\r\n                    <th\r\n                        :id=\"[el.id, el.typeCode, el.refCode, el.referenceUrl, el.referenceAppendUrl, el.referenceCode, el.referenceNameUz, el.referenceNameLt, el.referenceNameRu]\"\r\n                        :class=\"rowspanFirstClass(el, index)\"\r\n                        class=\"firstTrTh\"\r\n                        style=\"min-width: 70px\"\r\n                        :rowspan=\"rowspanFirst(el)\"\r\n                        :colspan=\"colspanFirst(el)\"\r\n                        v-for=\"(el, index) in firstColumns\"\r\n                        :key=\"index + 'first'\"\r\n                    >\r\n                      <div\r\n                          style=\"\r\n                        max-height: 200px;\r\n                          display: inline-block;\r\n                        \"\r\n                      >\r\n                        <div\r\n\r\n                            :class=\"\r\n                        (el.isVertical == 1 )\r\n                        ? 'rotate_text'\r\n                        : ''\r\n                        \"\r\n                        >\r\n                          {{ getName({ nameLt: el.nameLt, nameUz: el.nameUz, nameRu: el.nameRu }) }}\r\n                        </div>\r\n                      </div>\r\n                    </th>\r\n                    <th\r\n                        v-show=\"tableInfo.hasDynamicRows &&  !tableInfo.isGenerated && !loader\"\r\n                        :rowspan=\"thirdColumns.length > 0 ? 3 : secondColumns.length > 0 ? 2 : 1\"\r\n                    >\r\n                      <div\r\n                          style=\"\r\n                        max-height: 200px;\r\n                          display: inline-block;\r\n                        \"\r\n                      >\r\n                        <div>\r\n                          {{ $t('column.actions') }}\r\n                        </div>\r\n                      </div>\r\n\r\n                    </th>\r\n                  </tr>\r\n                  <tr class=\"tr-text-center\">\r\n                    <th\r\n                        style=\"min-width: 70px\"\r\n                        :id=\"[el.id, el.typeCode, el.refCode, el.referenceUrl, el.referenceAppendUrl, el.referenceCode, el.referenceNameUz, el.referenceNameLt, el.referenceNameRu]\"\r\n                        :class=\"rowspanSecondClass(el)\"\r\n                        class=\"secondTrTh\"\r\n                        :rowspan=\"rowspanSecond(el)\"\r\n                        :colspan=\"colspanSecond(el)\"\r\n                        v-for=\"(el, index) in secondColumns\"\r\n                        :key=\"index + 'second'\"\r\n                    >\r\n                      <div\r\n                          style=\"\r\n                          max-height: 200px;\r\n                          position: relative;\r\n                          display: inline-block;\r\n                          cursor: pointer;\"\r\n                      >\r\n                        <div\r\n\r\n                            :class=\"(el.isVertical == 1 )  ? 'rotate_text' : ''\"\r\n                        >\r\n                          {{\r\n                            getName({ nameLt: el.nameLt, nameRu: el.nameRu, nameUz: el.nameUz })\r\n                          }}\r\n                        </div>\r\n                      </div>\r\n                    </th>\r\n                  </tr>\r\n\r\n                  <tr class=\"tr-text-center\">\r\n                    <th\r\n                        style=\"min-width: 70px\"\r\n                        :id=\"[el.id, el.typeCode, el.refCode, el.referenceUrl, el.referenceAppendUrl, el.referenceCode, el.referenceNameUz, el.referenceNameLt, el.referenceNameRu]\"\r\n                        class=\"thirdTrId thirdTrTh\"\r\n                        :colspan=\"el.children.length > 0 ? el.children.length : 1\"\r\n                        v-for=\"(el, index) in thirdColumns\"\r\n                        :key=\"index + 'third'\"\r\n                    >\r\n                      <div\r\n                          style=\"\r\n                            max-height: 200px;\r\n                            position: relative;\r\n                            display: inline-block;\r\n                            cursor: pointer;\r\n                          \"\r\n                      >\r\n                        <div :class=\"(el.isVertical == 1 )  ? 'rotate_text' : ''\">\r\n                          {{\r\n                            getName({ nameLt: el.nameLt, nameRu: el.nameRu, nameUz: el.nameUz })\r\n                          }}\r\n                        </div>\r\n                      </div>\r\n                    </th>\r\n                  </tr>\r\n\r\n                  <tr class=\"tr-text-center\">\r\n                    <td\r\n                        v-for=\"(item, index) of (tableInfo.hasDynamicRows &&  !tableInfo.isGenerated) ? thirdTrIdData.length  + 1 :  thirdTrIdData.length \"\r\n                        :key=\"index + 'I-1'\"\r\n                    >\r\n                      <strong v-if=\"selectedRows.length > 1\">\r\n                        {{\r\n                          selectedRows.length > 1 && index == 0 ? \"\" : index\r\n                        }}\r\n                      </strong\r\n                      >\r\n\r\n                      <strong v-else>\r\n                        {{ index + 1 }}\r\n                      </strong>\r\n                    </td>\r\n                  </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  <tr\r\n                      v-if=\"isGenerated && !selectedRows.length && !loader\"\r\n                  >\r\n                    <td class=\"text-center\" colspan=\"4000\">\r\n                      <h5 class=\"m-3 p-0\">\r\n                        {{ $t('messages.data_not_found') }}\r\n                      </h5>\r\n                    </td>\r\n                  </tr>\r\n                  <tr v-for=\"(data, index1) in selectedRows\" :key=\"index1 + 'MM'\">\r\n                    <td\r\n                        :class=\"[\r\n                          f1Ids &&\r\n                          f1Ids.indexOf(i.columnId) > -1 &&\r\n                          selectedRows.length > 1 &&\r\n                          fRowId == data.id\r\n                            ? 'bg-success'\r\n                            : f1Ids &&\r\n                              f1Ids.indexOf(i.columnId) > -1 &&\r\n                              selectedRows.length <= 1\r\n                            ? 'bg-success'\r\n                            : '',\r\n                          f2Ids &&\r\n                          f2Ids.indexOf(i.columnId) > -1 &&\r\n                          selectedRows.length > 1 &&\r\n                          fRowId == data.id\r\n                            ? 'bg-primary'\r\n                            : f2Ids &&\r\n                              f2Ids.indexOf(i.columnId) > -1 &&\r\n                              selectedRows.length <= 1\r\n                            ? 'bg-primary'\r\n                            : '',\r\n                        ]\"\r\n                        v-for=\"(i, index) in thirdTrIdData\"\r\n                        :key=\"index + 'td'\"\r\n                        class=\"text-center p\"\r\n                    >\r\n                      <p\r\n                          class=\"m-0 p-2\" v-if=\"i.typeCode == 'SEQUENCE'\">\r\n                        {{ index1 + 1 }}\r\n                      </p>\r\n                      <div\r\n                          v-else-if=\"i.typeCode === 'SELECT' && thirdTrIdData[index].value[index1] && thirdTrIdData[index].value[index1].notEditable\"\r\n                          :v-b-tooltip=\"tableInfo.isGenerated ? '' :{ variant: 'info' }\"\r\n                          class=\"cursor-pointer\"\r\n                          @click=\"tableInfo.isGenerated ? '' : editValue(index1, index)\"\r\n                          :title=\"tableInfo.isGenerated ? '' :  $t('actions.click_to_edit')\"\r\n                      >\r\n                        {{\r\n                          getName({\r\n                            nameUz: thirdTrIdData[index].value[index1].selectValueNameUz,\r\n                            nameLt: thirdTrIdData[index].value[index1].selectValueNameLt,\r\n                            nameRu: thirdTrIdData[index].value[index1].selectValueNameRu\r\n                          })\r\n                        }}\r\n                      </div>\r\n                      <!-- FOR SELECT -->\r\n                      <div v-else-if=\"i.typeCode === 'SELECT'\" style=\"min-width: 300px;\">\r\n\r\n                        <BaseTreeselectWithValidation\r\n                            not-required\r\n                            ref=\"parentDepVeeName\"\r\n                            name=\"parentDepVeeName\"\r\n                            class=\"select_field\"\r\n                            v-if=\"thirdTrIdData[index].value[index1] && i.refCode === 'DepartmentForDocument'\"\r\n                            v-model=\"thirdTrIdData[index].value[index1].selectedItem\"\r\n                            form-label=\"__none\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId})\"\r\n                            :options=\"i.options\"\r\n                            :show-count=\"true\"\r\n                            :normalizer=\"normalizer\"\r\n                            :placeholder=\"$t('column.parent_department')\"\r\n                            :custom-label=\"selectCustomLabel\"\r\n                            :default-expand-level=\"1\"\r\n                            @select=\"setValue(data.id,$event,index1,index,i.columnId,i.typeCode,i.notEditable)\"\r\n                            @search-change=\"debounceSearchDynamicRefs\"\r\n                        >\r\n                          <div slot=\"value-label\">-{{ thirdTrIdData[index].value[index1].selectValueNameUz }}</div>\r\n                        </BaseTreeselectWithValidation>\r\n                        <BaseTreeselectWithValidation\r\n                            not-required\r\n                            ref=\"parentDepVeeName\"\r\n                            name=\"parentDepVeeName\"\r\n                            class=\"select_field\"\r\n                            v-if=\"!thirdTrIdData[index].value[index1] && i.refCode === 'DepartmentForDocument'\"\r\n                            v-model=\"thirdTrIdData[index].value[index1]\"\r\n                            form-label=\"__none\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId})\"\r\n                            :options=\"i.options\"\r\n                            :show-count=\"true\"\r\n                            :normalizer=\"normalizer\"\r\n                            :placeholder=\"$t('column.parent_department')\"\r\n                            :default-expand-level=\"1\"\r\n                            :custom-label=\"({nameUz, nameLt, nameRu, name})  => nameUz ? getName({nameUz: nameUz, nameLt: nameLt, nameRu: nameRu}) : name\"\r\n                            @select=\"setValue(data.id,$event,index1,index,i.columnId,i.typeCode,i.notEditable)\"\r\n                            @search-change=\"debounceSearchDynamicRefs\"\r\n                        >\r\n                        </BaseTreeselectWithValidation>\r\n                        <BaseMultiselectWithValidation\r\n                            v-if=\"thirdTrIdData[index].value[index1] && i.refCode !== 'DepartmentForDocument'\"\r\n                            not-required\r\n                            only-form-element\r\n                            v-model=\"thirdTrIdData[index].value[index1].selectedItem\"\r\n                            class=\"select_field\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId})\"\r\n                            :custom-label=\"selectCustomLabel\"\r\n                            label=\"name\"\r\n                            @select=\"setValue(data.id,$event,index1,index,i.columnId,i.typeCode,i.notEditable)\"\r\n                            :options=\"i.options\"\r\n                            :placeholder=\"getName({nameUz: i.referenceNameUz, nameLt: i.referenceNameLt, nameRu: i.referenceNameRu})\"\r\n                            open-direction=\"bottom\"\r\n                            :max-height=\"600\"\r\n                            :show-labels=\"false\"\r\n                            :has-next-page=\"i.hasNextPage\"\r\n                            @reachedEndOfList=\"dynamicRefsReachedEndOfList\"\r\n                            @search-change=\"debounceSearchDynamicRefs\"\r\n                            :searchable=\"true\"\r\n                            preserve-search\r\n                            :clear-on-select=\"false\"\r\n                            :loading=\"i.isLoading\"\r\n                            :internal-search=\"false\"\r\n                            :with-create-addition=\"(thirdTrIdData[index].value[index1] && thirdTrIdData[index].value[index1].originalSelectValueNameUz) ? true : false\"\r\n                        >\r\n                          <template v-slot:append-slot>\r\n                            <b-btn\r\n                                v-if=\"thirdTrIdData[index].value[index1] && thirdTrIdData[index].value[index1].originalSelectValueNameUz\"\r\n                                variant=\"link\"\r\n                                class=\"text-decoration-none p-0 text-danger\"\r\n                                style=\"font-size: 1.2rem;\"\r\n                            >\r\n                              <i\r\n                                  @click=\"resetValue(index1, index)\"\r\n                                  class=\"mdi mdi-refresh\"\r\n                              ></i>\r\n                            </b-btn>\r\n                          </template>\r\n                        </BaseMultiselectWithValidation>\r\n                        <BaseMultiselectWithValidation\r\n                            v-else-if=\"!thirdTrIdData[index].value[index1] && i.refCode !== 'DepartmentForDocument'\"\r\n                            not-required\r\n                            only-form-element\r\n                            class=\"select_field\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId})\"\r\n                            v-model=\"thirdTrIdData[index].value[index1]\"\r\n                            :custom-label=\"selectCustomLabel\"\r\n                            label=\"name\"\r\n                            @select=\"setValue(data.id,$event,index1,index,i.columnId,i.typeCode,i.notEditable)\"\r\n                            :options=\"i.options\"\r\n                            :placeholder=\"getName({nameUz: i.referenceNameUz, nameLt: i.referenceNameLt, nameRu: i.referenceNameRu})\"\r\n                            open-direction=\"bottom\"\r\n                            :max-height=\"600\"\r\n                            :show-labels=\"false\"\r\n                            :has-next-page=\"i.hasNextPage\"\r\n                            @reachedEndOfList=\"dynamicRefsReachedEndOfList\"\r\n                            @search-change=\"debounceSearchDynamicRefs\"\r\n                            :searchable=\"true\"\r\n                            preserve-search\r\n                            :clear-on-select=\"false\"\r\n                            :loading=\"i.isLoading\"\r\n                            :internal-search=\"false\"\r\n                        />\r\n                      </div>\r\n                      <!-- FOR DATE -->\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'DATE' && thirdTrIdData[index].value[index1]\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          placeholder=\"\"\r\n                          v-model=\"thirdTrIdData[index].value[index1].value\"\r\n                          class=\"datepicker_field\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          @input=\"(e) => setValue( data.id, e, index1, index, i.columnId, i.typeCode ) \"\r\n                          lang=\"ru\"\r\n                      />\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'DATE'\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          class=\"datepicker_field\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          placeholder=\"\"\r\n                          @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                          lang=\"ru\"\r\n                      />\r\n\r\n                      <!-- FOR YEAR -->\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'YEAR' && thirdTrIdData[index].value[index1]\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          placeholder=\"\"\r\n                          v-model=\"thirdTrIdData[index].value[index1].value\"\r\n                          class=\"datepicker_field dynamic-year\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          @input=\"(e) => setValue( data.id, e, index1, index, i.columnId, i.typeCode ) \"\r\n                          type=\"year\"\r\n                          format=\"YYYY\"\r\n                      />\r\n                      <BaseDatePickerWithValidation\r\n                          v-else-if=\"i.typeCode === 'YEAR'\"\r\n                          not-required\r\n                          only-form-element\r\n                          custom-styles=\"min-width: 140px;\"\r\n                          class=\"datepicker_field dynamic-year\"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          placeholder=\"\"\r\n                          @input=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                          type=\"year\"\r\n                          format=\"YYYY\"\r\n                      />\r\n\r\n                      <!-- FOR STRING -->\r\n                      <div v-else-if=\"i.typeCode === 'STRING'\" style=\"min-width: 300px;\">\r\n                        <b-form-input\r\n                            @keydown=\" (evt) => keydownEvt( evt, data.id, evt.target.value, index1, index, i.columnId, i.typeCode ) \"\r\n                            @keyup=\"(event) => calculateDocFormulas(data.id, event.target.value, index1, index, i.columnId, i.typeCode)\"\r\n                            :class=\"\r\n                              currentPosition.rowId &&\r\n                              currentPosition.columnId &&\r\n                              i.columnId == currentPosition.columnId &&\r\n                              data.id == currentPosition.rowId\r\n                                ? 'borderInput'\r\n                                : currentPosition.columnId &&\r\n                                  !currentPosition.rowId &&\r\n                                  i.columnId == currentPosition.columnId\r\n                                ? 'borderInput'\r\n                                : ''\r\n                            \"\r\n                            @focus=\" (e) => focusVal( data.id, e, index1, index, i.columnId, i.typeCode ) \"\r\n                            :style=\" report.status && report.status !== 'CREATED' ? 'border: none !important' : ''\"\r\n                            :disabled=\"report.status && report.status !== 'CREATED'\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                            @input=\"(e) => setValue( data.id, e, index1, index, i.columnId, i.typeCode)\"\r\n                            class=\"text-center input_val p-0\"\r\n                        >\r\n                        </b-form-input>\r\n                      </div>\r\n                      <!-- FOR BOOLEAN -->\r\n                      <Checkbox\r\n                          v-else-if=\"i.typeCode === 'BOOLEAN' && thirdTrIdData[index].value[index1]\"\r\n                          v-model=\"thirdTrIdData[index].value[index1].value\"\r\n                          :font-size=\"0\"\r\n                          :disabled=\"\r\n                            report.status && report.status !== 'CREATED'\r\n                          \"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          class=\"justify-content-center checkbox_field\"\r\n                          @change=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                      />\r\n                      <Checkbox\r\n                          v-else-if=\"i.typeCode === 'BOOLEAN'\"\r\n                          :font-size=\"0\"\r\n                          :disabled=\"\r\n                            report.status && report.status !== 'CREATED'\r\n                          \"\r\n                          :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                          class=\"justify-content-center checkbox_field\"\r\n                          @change=\"(e) =>setValue(data.id,e,index1,index,i.columnId,i.typeCode)\"\r\n                      />\r\n                      <!-- FOR INTEGER -->\r\n                      <div v-else>\r\n                        <b-form-input\r\n                            @keydown=\"(evt) => keydownEvt(evt,data.id,evt.target.value,index1,index,i.columnId,i.typeCode) \"\r\n                            @keyup=\"(event) => calculateDocFormulas(data.id, event.target.value, index1, index, i.columnId, i.typeCode)\"\r\n                            :class=\"\r\n                              currentPosition.rowId &&\r\n                              currentPosition.columnId &&\r\n                              i.columnId == currentPosition.columnId &&\r\n                              data.id == currentPosition.rowId\r\n                                ? 'borderInput'\r\n                                : currentPosition.columnId &&\r\n                                  !currentPosition.rowId &&\r\n                                  i.columnId == currentPosition.columnId\r\n                                ? 'borderInput'\r\n                                : ''\r\n                            \"\r\n                            :data-column-id=\"i.columnId\"\r\n                            @focus=\"(e) => focusVal(data.id, e, index1, index, i.columnId, i.typeCode)\"\r\n                            :style=\"report.status && report.status !== 'CREATED' ? 'border: none !important' : ''\"\r\n                            :disabled=\"report.status && report.status !== 'CREATED'\"\r\n                            :id=\"JSON.stringify({rowId: data.id,columnId: i.columnId,})\"\r\n                            @input=\"(e) => setValue(data.id, e, index1, index, i.columnId, i.typeCode)\"\r\n                            type=\"number\"\r\n                            class=\"text-center input_val p-0\"\r\n                        >\r\n                        </b-form-input>\r\n                      </div>\r\n                    </td>\r\n                    <td style=\"width: 30px\" v-show=\"tableInfo.hasDynamicRows &&  !tableInfo.isGenerated\">\r\n                      <div style=\"display: block; text-align: center\" class=\"mt-1\">\r\n                        <i v-if=\"selectedRows.length > 1\" @click=\"deleteRow(index1, data)\" style=\"color: red\"\r\n                           class=\"mdi mdi-trash-can delete grow \"></i>\r\n                        <i v-if=\"selectedRows.length-1 === index1\" @click=\"addNewRow\" style=\"color: #0059ff\"\r\n                           class=\"mdi mdi-plus-circle grow \"> </i>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                  </tbody>\r\n                  <tfoot>\r\n                  <tr class=\"mt-5\" v-show=\"showResult\"\r\n                  >\r\n                    <td v-for=\"(i, index) in thirdTrIdData\"\r\n                        :key=\"index + 'td'\"\r\n                        class=\"text-center p\"\r\n                    >\r\n                      <p v-if=\"index === 0\">Jami</p>\r\n                      <div v-else-if=\"i.typeCode === 'BIGDECIMAL'\">\r\n                        {{ getColumnData(i) }}\r\n                      </div>\r\n                      <div v-else>---</div>\r\n                    </td>\r\n                    <td></td>\r\n                  </tr>\r\n                  </tfoot>\r\n                </table>\r\n              </div>\r\n              <div v-show=\"tableInfo.hasDynamicRows &&  !tableInfo.isGenerated\">\r\n                <!-- <b-button variant=\"primary\" class=\"mr-1\" @click=\"showResult = !showResult \">\r\n                  {{ $t( 'submodules.reports.report_result_see' ) }}\r\n                </b-button> -->\r\n                <b-button closed variant=\"warning\" class=\"ml-1\" @click=\"closeReport\">\r\n                  {{ $t('submodules.reports.stop_forming_report') }}\r\n                </b-button>\r\n              </div>\r\n            </div>\r\n          </b-overlay>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--    <pre>-->\r\n    <!--         {{selectedRows}}-->\r\n    <!--    </pre>-->\r\n\r\n    <!--    <div>-->\r\n    <!--      <b-button variant=\"success\">Jami</b-button>-->\r\n    <!--    </div>-->\r\n  </div>\r\n</template>\r\n<style lang=\"scss\">\r\n.borderInput {\r\n  border: 2px solid green !important;\r\n}\r\n\r\nth {\r\n  /* &#SELECT {\r\n    width: 20%;\r\n  } */\r\n  &[id*=\"SELECT\"] {\r\n    width: 150px;\r\n  }\r\n}\r\n\r\n.check {\r\n  margin-top: 5px;\r\n\r\n  .m-chckbox--container {\r\n    margin: 0px !important;\r\n    width: 22px !important;\r\n  }\r\n\r\n  label {\r\n    margin: 0;\r\n    display: none;\r\n  }\r\n}\r\n\r\n.vue-treeselect__list-item {\r\n  padding-left: 15px !important;\r\n}\r\n\r\n.vue-treeselect__list-item.vue-treeselect__indent-level-0 {\r\n  padding-left: 0px !important;\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n/* Chrome, Safari, Edge, Opera */\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n/* Firefox */\r\ninput[type=\"number\"] {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n.rotate_text {\r\n  height: 100%;\r\n  word-break: normal;\r\n  writing-mode: vertical-rl;\r\n  -ms-writing-mode: vertical-lr;\r\n  -webkit-transform: rotate(-180deg);\r\n  -moz-transform: rotate(-180deg);\r\n  -o-transform: rotate(-180deg);\r\n  transform: rotate(-180deg);\r\n  padding-bottom: 20px !important;\r\n  padding-top: 20px !important;\r\n}\r\n\r\n.no_enter_value {\r\n  padding: 0px !important;\r\n  min-width: auto !important;\r\n}\r\n\r\n.grow {\r\n  font-size: 1.3em;\r\n  cursor: pointer;\r\n}\r\n\r\n.grow:hover,\r\n.grow:focus,\r\n.grow:active {\r\n  transition: all .2s ease-in-out;\r\n  -webkit-transform: scale(1.3);\r\n  transform: scale(1.3);\r\n}\r\n</style>\r\n"]}]}