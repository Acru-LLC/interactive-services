{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\projects\\file-controller.vue?vue&type=template&id=2fbd2c59&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\projects\\file-controller.vue","mtime":1675059788376},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1675061970779},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImNhcmQiPgogIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUgbWItNCI+e3sgJHQoImRvY3VtZW50cyIpIH19PC9oND4KICAgIDxzaW1wbGViYXIKICAgICAgICA6c3R5bGU9Iihwcm9qZWN0LmlzQWRtaW4gJiYgcHJvamVjdC5zdGF0dXMgIT09ICdGSU5JU0hFRCcgJiYgY2FuQ3JlYXRlRG9jKSA/ICdoZWlnaHQ6IDI1MHB4JyA6ICdoZWlnaHQ6IDM2MHB4JyIKICAgICAgICBpZD0iZG9jLWxpc3QiCiAgICAgICAgcmVmPSJkb2NzUmVmIgogICAgPgogICAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIG1iLTAiPgogICAgICAgIDx0YWJsZSBzdHlsZT0idGFibGUtbGF5b3V0OiBmaXhlZDsgd2lkdGg6IDEwMCUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1jZW50ZXJlZCB0YWJsZS1ob3ZlciIgPgogICAgICAgICAgPHRib2R5PgogICAgICAgICAgPHRyIHYtZm9yPSIoZG9jLCBpbmRleCkgaW4gZG9jcyIgOmtleT0iaW5kZXgiID4KICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDogMzJweCI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJ2aWV3RmlsZShkb2MubGV0dGVyLnVybCkiCiAgICAgICAgICAgICAgICAgIDpkb3dubG9hZD0iZ2V0RXh0KGRvYy5sZXR0ZXIudXJsKSA9PT0gJ3BkZicgPyBmYWxzZSA6IGRvYy5sZXR0ZXIudXJsIgogICAgICAgICAgICAgICAgICA6aHJlZj0iZ2V0RXh0KGRvYy5sZXR0ZXIudXJsKSA9PT0gJ3BkZicgPyBgI2AgOiBgJHtiYXNlVXJsfS8ke2RvYy5sZXR0ZXIudXJsfWAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPEZpbGVWaWV3IGNsYXNzPSJteS1jYXJkLWhvdmVyZWQiIDp1cGxvYWRQYXRoPSJkb2MubGV0dGVyLnVybCIvPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDogNjAlIj4KICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNCBtLTAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1kYXJrIG0tMCBwcmUiPnt7IGRvYy5sZXR0ZXIuZmlsZU5hbWUgfX08L2Rpdj4KICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgIDxzbWFsbD4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtci0xIHRleHQtbXV0ZWQiPnt7ICR0KCJjb2x1bW4uY3JlYXRlZF9kYXRlIikgfX06PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtZGFyayI+e3sgZG9jLmxldHRlci5jcmVhdGVkIH19PC9zcGFuPgogICAgICAgICAgICAgIDwvc21hbGw+CiAgICAgICAgICAgICAgPHNtYWxsCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJkLWJsb2NrIHRleHQtbXV0ZWQiCiAgICAgICAgICAgICAgICAgIHYtaWY9IgogICAgICAgICAgICAgICAgICAgICFfZW1wdHkoZG9jLmxldHRlci5lbXBsb3llZUxhc3ROYW1lKSAmJgogICAgICAgICAgICAgICAgICAgICFfZW1wdHkoZG9jLmxldHRlci5lbXBsb3llZUZpcnN0TmFtZSkgJiYKICAgICAgICAgICAgICAgICAgICAhX2VtcHR5KGRvYy5sZXR0ZXIuZW1wbG95ZWVQYXJlbnROYW1lKQogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1yLTEiPnt7ICR0KCJieUNyZWF0ZWQiKSB9fTo8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1kYXJrIj4KICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICBgJHtkb2MubGV0dGVyLmVtcGxveWVlTGFzdE5hbWV9ICR7ZG9jLmxldHRlci5lbXBsb3llZUZpcnN0TmFtZX0gJHtkb2MubGV0dGVyLmVtcGxveWVlUGFyZW50TmFtZX1gCiAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9zbWFsbD4KICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDogNDVweCI+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgIHYtaWY9InByb2plY3Quc3RhdHVzICE9PSAnRklOSVNIRUQnICYmIChkb2MubGV0dGVyLmZpbGVUeXBlICYmIGRvYy5sZXR0ZXIuZmlsZVR5cGUudG9Mb3dlckNhc2UoKSAhPT0gJ3BkZicpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgIDp0bz0ieyBuYW1lOiAnT2ZmaWNlLURPQ1VNRU5ULWNvbW1pc3Npb24nLCBxdWVyeTogeyBpZDogZG9jLmxldHRlci5pZCwgcGFnZTogJ0dFVCcgfSwgfSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1kYXJrIgogICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtZWRpdCBoMyBtLTAiPjwvaT4KICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICAgIHYtaWY9ImRvYy5sZXR0ZXIud2lsbEJlU2lnbmVkICYmIGRvYy5sZXR0ZXIuaXNUaGlzRW1wbG95ZWVTaWduZWQgPT09IGZhbHNlICYmIFsnTEVUVEVSX0lOVk9LRSddLmluZGV4T2YoZG9jLmxldHRlci5sZXR0ZXJUeXBlKSA9PT0gLTEiCiAgICAgICAgICAgICAgICAgIHYtYi10b29sdGlwLmhvdmVyCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciBjdXJzb3ItcG9pbnRlciBwLTEiCiAgICAgICAgICAgICAgICAgIHRpdGxlPSJJbXpvbGFzaCB1Y2h1biIKICAgICAgICAgICAgICAgICAgdmFyaWFudD0ibGlnaHQiCiAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICBAY2xpY2s9IiRyb3V0ZXIucHVzaChgL3Byb2plY3RzL3NpZ24vJHtkb2MubGV0dGVyLmlkfWApIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZmlsZS1zaWduYXR1cmUgbS0yIj48L2k+CiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIHYtaWY9ImRvYy5sZXR0ZXIuc3RhdHVzICE9PSAnVE9fSU5WT0tFX1NJR05FRCcgJiYgcHJvamVjdC5pc0FkbWluICYmIGRvYy5sZXR0ZXIubGV0dGVyVHlwZSA9PT0gJ0xFVFRFUl9JTlZPS0UnIgogICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1jZW50ZXIgY3Vyc29yLXBvaW50ZXIiCiAgICAgICAgICAgICAgICAgIEBjbGljaz0iJHJvdXRlci5wdXNoKGAvcHJvamVjdHMvaW52b2tlLWxldHRlci1zaWduLyR7cHJvamVjdC5pZH0vJHtkb2MubGV0dGVyLmlkfWApIgogICAgICAgICAgICAgICAgICB2LWItdG9vbHRpcC5ob3Zlci5yaWdodD0iJ0ltem9sYXNoIHVjaHVuJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNpZ25hdHVyZSBoMyBtLTAiPjwvaT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgICAgdi1pZj0iZG9jLnNpZ25hdG9yeS5sZW5ndGgiCiAgICAgICAgICAgICAgICAgIHYtYi10b29sdGlwLmhvdmVyPSIkdCgnbWVzc2FnZXMudmlld19zaWduYXRvcmllcycpIgogICAgICAgICAgICAgICAgICA6aWQ9ImBkb2Mtc2lnbmF0b3J5LSR7aW5kZXh9YCIKICAgICAgICAgICAgICAgICAgdmFyaWFudD0ibGlnaHQiCiAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICBjbGFzcz0iY3Vyc29yLXBvaW50ZSBwLTEiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1leWUgbS0yIj48L2k+CiAgICAgICAgICAgICAgICA8Yi1wb3BvdmVyCiAgICAgICAgICAgICAgICAgICAgOnRhcmdldD0iYGRvYy1zaWduYXRvcnktJHtpbmRleH1gIgogICAgICAgICAgICAgICAgICAgIHRyaWdnZXJzPSJob3ZlciBmb2N1cyIKICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0iKHNpZ25hdG9yeUVtcGxveWVlLCBzaWduYXRvcnlJbmRleCkgaW4gZG9jLnNpZ25hdG9yeSIgOmtleT0ic2lnbmF0b3J5SW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHNpZ25hdG9yeUluZGV4ICsgMSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgc2lnbmF0b3J5RW1wbG95ZWUuZW1wbG95ZWVMYXN0TmFtZSB9fSB7eyBzaWduYXRvcnlFbXBsb3llZS5lbXBsb3llZUZpcnN0TmFtZSB9fQogICAgICAgICAgICAgICAgICAgICAgICB7eyBzaWduYXRvcnlFbXBsb3llZS5lbXBsb3llZU1pZGRsZU5hbWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJzaWduYXRvcnlFbXBsb3llZS5zaWduYXRvcnlEYXRlICE9PSBudWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj57eyAkdCgnbWVzc2FnZXMuc2lnbmF0b3J5X3RpbWUnKSArICc6JyB9fTwvZGl2Pnt7IHNpZ25hdG9yeUVtcGxveWVlLnNpZ25hdG9yeURhdGUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIHAtMiB0ZXh0LXdoaXRlIiA6Y2xhc3M9InNpZ25hdG9yeUVtcGxveWVlLmlzU2lnbmVkID8gJ2ZhLWNoZWNrIGJnLXN1Y2Nlc3MnIDogJ2ZhLXRpbWVzIGJnLWRhbmdlciciLz4KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgPC9iLXBvcG92ZXI+CiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPC90ZD4KICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgPC9zaW1wbGViYXI+CiAgPC9kaXY+CiAgPGItbW9kYWwKICAgICAgc2Nyb2xsYWJsZQogICAgICB2LW1vZGVsPSJ2aWV3RmlsZU1vZGFsIgogICAgICBzaXplPSJ4bCIKICAgICAgOnRpdGxlPSIkdCgnYWN0aW9ucy52aWV3JykiCiAgPgogICAgPGRpdiBzdHlsZT0iaGVpZ2h0OiA3MDBweCIgdi1pZj0iZmlsZVVwbG9hZFBhdGgiID4KICAgICAgPGVtYmVkCiAgICAgICAgICB3aWR0aD0iMTAwJSIKICAgICAgICAgIGhlaWdodD0iODAwIgogICAgICAgICAgOnNyYz0iYCR7YmFzZVVybH0vJHtmaWxlVXBsb2FkUGF0aH1gIgogICAgICAgICAgdHlwZT0iYXBwbGljYXRpb24vcGRmIgogICAgICAvPgogICAgPC9kaXY+CiAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWZvb3Rlcj4KICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9InNlY29uZGFyeSIgQGNsaWNrPSJ2aWV3RmlsZU1vZGFsID0gZmFsc2UiID57eyAkdCgiYWN0aW9ucy5jbG9zZSIpIH19PC9iLWJ1dHRvbj4KICAgIDwvdGVtcGxhdGU+CiAgPC9iLW1vZGFsPgogIDxiLW1vZGFsIHYtbW9kZWw9Im1vZGFsLmlzRG9jQ29udHJvbE1vZGFsIiBzaXplPSJtZCIgOnRpdGxlPSJgJHskdCgnZG9jdW1lbnRzJyl9YCIgPgogICAgPERvY3NXaXRoSWNvbnMgcmVmPSJkb2NzV2l0aEljb25zUmVmIiA6YXBwbGljYXRpb25UeXBlPSJwcm9qZWN0LmFwcGxpY2F0aW9uVHlwZSIgOnByb2plY3RTdGF0dXM9InByb2plY3Quc3RhdHVzIiA6bW9kYWw9Im1vZGFsIiAvPgoKICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPgogICAgICA8Yi1vdmVybGF5IDpvcGFjaXR5PSIwLjEiIDpzaG93PSJsb2FkZXJEb2MiIHJvdW5kZWQ9InNtIiBzaXplPSJzbSIgPgogICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIiBAY2xpY2s9InNhdmVEb2NzIiA+e3sgJHQoImFjdGlvbnMuc2F2ZSIpIH19IDwvYi1idXR0b24+CiAgICAgIDwvYi1vdmVybGF5PgogICAgPC90ZW1wbGF0ZT4KICA8L2ItbW9kYWw+CiAgPGRpdgogICAgICBjbGFzcz0icC0zIgogICAgICBzdHlsZT0ibWluLWhlaWdodDogOTVweCIKICAgICAgdi1pZj0iKHByb2plY3QuaXNBZG1pbiAmJiBbJ0ZJTklTSEVEJywgJ1JFVklFV19GSU5JU0hFRCddLmluZGV4T2YocHJvamVjdC5zdGF0dXMpICA9PT0gLTEgJiYgcHJvamVjdC5zdGF0dXMgIT09ICdSRVZJRVdfRklOSVNIRUQnKQogICAgICAgICB8fCAocHJvamVjdC5hcHBsaWNhdGlvblR5cGUgPT09ICdGUk9NX0RYQScgJiYgcHJvamVjdC5zdGF0dXMgIT09ICdSRVZJRVdfRklOSVNIRUQnKQogICAgICAgICB8fCAocHJvamVjdC5wcm9qZWN0VHlwZSA9PT0gJ0NPTU1JU1NJT04nICYmIHByb2plY3Quc3RhdHVzID09PSAnRklOSVNIRUQnICYmIHByb2plY3QuYXBwbGljYXRpb25EdG8uYXBwbGljYXRpb25TdGF0dXMgPT09ICdDT01NSVNTSU9OX1NFRU4nKSIKICA+CiAgICA8Zm9ybT4KICAgICAgPGRpdiB2LWlmPSJwcm9qZWN0LmFwcGxpY2F0aW9uVHlwZSA9PT0gJ0ZST01fRFhBJyI+CiAgICAgICAgPGRpdiB2LWlmPSJjYW5DcmVhdGVEb2MgJiYgcHJvamVjdC5wcm9qZWN0VHlwZSA9PT0gJ0NPTU1JU1NJT04nIj4KICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJjbGlja1VwbG9hZCIgdmFyaWFudD0icHJpbWFyeSIgYmxvY2sKICAgICAgICAgICAgICB2LWlmPSIoWydDT01NSVNTSU9OX1JFVklTSU9OJ10uaW5kZXhPZihwcm9qZWN0LnN0YXR1cykgIT09IC0xKSIKICAgICAgICAgID4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZmlsZS1kb2N1bWVudC1vdXRsaW5lIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+CiAgICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLmNyZWF0ZV9uZXdfZG9jdW1lbnQiKSB9fQogICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IHYtZWxzZS1pZj0iY2FuQ3JlYXRlRG9jICYmIHByb2plY3QucHJvamVjdFR5cGUgPT09ICdCRUZPUkVfQ09NTUlTU0lPTiciPgogICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9ImNsaWNrVXBsb2FkIiB2YXJpYW50PSJwcmltYXJ5IiBibG9jawogICAgICAgICAgICAgIHYtaWY9IihbJ1JFVklTSU9OX0FGVEVSX0NPTU1JU1NJT04nLCAnQ1JFQVRFRCddLmluZGV4T2YocHJvamVjdC5zdGF0dXMpICE9PSAtMSkiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWZpbGUtZG9jdW1lbnQtb3V0bGluZSBkLWJsb2NrIGZvbnQtc2l6ZS0xNiI+PC9pPgogICAgICAgICAgICB7eyAkdCgiYWN0aW9ucy5jcmVhdGVfbmV3X2RvY3VtZW50IikgfX0KICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiB2LWVsc2UtaWY9ImNhbkNyZWF0ZURvYyI+CiAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD0iY2xpY2tVcGxvYWQiIHZhcmlhbnQ9InByaW1hcnkiIGJsb2NrCiAgICAgICAgICAgICAgdi1pZj0iKFsnRk9SX1BST0NFU1MnLCAnRk9SX0NPTU1JU1NJT04nXS5pbmRleE9mKHByb2plY3QucmV0dXJuVHlwZSkgIT09IC0xKSIKICAgICAgICAgID4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZmlsZS1kb2N1bWVudC1vdXRsaW5lIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+CiAgICAgICAgICAgIHt7ICR0KCJhY3Rpb25zLmNyZWF0ZV9uZXdfZG9jdW1lbnQiKSB9fQogICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgdi1lbHNlLWlmPSJwcm9qZWN0LmFwcGxpY2F0aW9uVHlwZSA9PT0gJ0lOTkVSJyI+CiAgICAgICAgPGRpdiB2LWlmPSJpc0NvbW1pc3Npb24iPgogICAgICAgICAgPGItYnV0dG9uLWdyb3VwIGNsYXNzPSJidG4tYmxvY2siPgogICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJoYW5kbGVVcGxvYWRUb1JldHVybignTEVUVEVSX0ZJTklTSCcpOyIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgICB2LWlmPSJbJ0ZPUl9GSU5JU0hfV09SSyddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEgJiYgcHJvamVjdC5hcHBsaWNhdGlvbkR0by5hcHBsaWNhdGlvblN0YXR1cyA9PT0gJ0NPTU1JU1NJT05fU0VFTiciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1maWxlLWRvY3VtZW50LW91dGxpbmUgZC1ibG9jayBmb250LXNpemUtMTYiPjwvaT4KICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5jb21taXNzaW9uLmRvY19idXR0b24uY3JlYXRlX2xldHRlciIpIH19CiAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9ImhhbmRsZVVwbG9hZFRvUmV0dXJuKCdGT1JfRklOSVNIX1dPUksnKTsiCiAgICAgICAgICAgICAgICB2YXJpYW50PSJwcmltYXJ5IgogICAgICAgICAgICAgICAgdi1pZj0iY2FuQ3JlYXRlRG9jICYmIChbJ0ZPUl9QUk9DRVNTJywgJ0ZPUl9GSU5JU0hfV09SSyddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEpIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZmlsZS1kb2N1bWVudC1vdXRsaW5lIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+CiAgICAgICAgICAgICAge3sgJHQoInN1Ym1vZHVsZXMuY29tbWlzc2lvbi5kb2NfYnV0dG9uLmZpbmlzaF93b3JrIikgfX0KICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD0iaGFuZGxlVXBsb2FkVG9SZXR1cm4oJ0xFVFRFUl9JTlZPS0UnKTsiCiAgICAgICAgICAgICAgICB2YXJpYW50PSJzdWNjZXNzIgogICAgICAgICAgICAgICAgdi1pZj0iKFsnQ1JFQVRFRCddLmluZGV4T2YocHJvamVjdC5zdGF0dXMpICE9PSAtMSkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1maWxlLWRvY3VtZW50LW91dGxpbmUgZC1ibG9jayBmb250LXNpemUtMTYiPjwvaT4KICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5jb21taXNzaW9uLmRvY19idXR0b24uaW52b2tlX2xldHRlciIpIH19CiAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8L2ItYnV0dG9uLWdyb3VwPgogICAgICAgICAgPGItYnV0dG9uLWdyb3VwIGNsYXNzPSJidG4tYmxvY2siPgogICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJoYW5kbGVVcGxvYWRUb1JldHVybignRk9SX1NVU1BFTkRfV09SSycpOyIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImRlZmF1bHQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjNzQ3ODhkOyBjb2xvcjogI2ZmZjsiCiAgICAgICAgICAgICAgICB2LWlmPSJjYW5DcmVhdGVEb2MgJiYgKFsnRk9SX1BST0NFU1MnLCAnRk9SX1NVU1BFTkRfV09SSyddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEpIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktZmlsZS1kb2N1bWVudC1vdXRsaW5lIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+CiAgICAgICAgICAgICAge3sgJHQoInN1Ym1vZHVsZXMuY29tbWlzc2lvbi5kb2NfYnV0dG9uLnN1c3BlbmRfd29yayIpIH19CiAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9ImhhbmRsZVVwbG9hZFRvUmV0dXJuKCdGT1JfREVMQVlfV09SSycpOyIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImRlZmF1bHQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjODU4ZGE1OyBjb2xvcjogI2ZmZjsiCiAgICAgICAgICAgICAgICB2LWlmPSJjYW5DcmVhdGVEb2MgJiYgKFsnRk9SX1BST0NFU1MnLCAnRk9SX0RFTEFZX1dPUksnXS5pbmRleE9mKHByb2plY3QucmV0dXJuVHlwZSkgIT09IC0xKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWZpbGUtZG9jdW1lbnQtb3V0bGluZSBkLWJsb2NrIGZvbnQtc2l6ZS0xNiI+PC9pPgogICAgICAgICAgICAgIHt7ICR0KCJzdWJtb2R1bGVzLmNvbW1pc3Npb24uZG9jX2J1dHRvbi5kZWxheV93b3JrIikgfX0KICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD0iaGFuZGxlVXBsb2FkVG9SZXR1cm4oJ0ZPUl9SRVNVTUVfV09SSycpOyIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImRlZmF1bHQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjOWJiN2RkOyBjb2xvcjogI2ZmZjsiCiAgICAgICAgICAgICAgICB2LWlmPSJjYW5DcmVhdGVEb2MgJiYgKFsnRk9SX1BST0NFU1MnLCAnRk9SX1JFU1VNRV9XT1JLJ10uaW5kZXhPZihwcm9qZWN0LnJldHVyblR5cGUpICE9PSAtMSkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1maWxlLWRvY3VtZW50LW91dGxpbmUgZC1ibG9jayBmb250LXNpemUtMTYiPjwvaT4KICAgICAgICAgICAgICB7eyAkdCgic3VibW9kdWxlcy5jb21taXNzaW9uLmRvY19idXR0b24ucmVzdW1lX3dvcmsiKSB9fQogICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgPC9iLWJ1dHRvbi1ncm91cD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IHYtZWxzZT4KICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJoYW5kbGVVcGxvYWRUb1JldHVybignRk9SX0NPTU1JU1NJT04nKTsiCiAgICAgICAgICAgICAgdmFyaWFudD0icHJpbWFyeSIKICAgICAgICAgICAgICBibG9jawogICAgICAgICAgICAgIHYtaWY9IihjYW5DcmVhdGVEb2MgJiYgWydGT1JfUFJPQ0VTUycsICdGT1JfQ09NTUlTU0lPTiddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEpIHx8CiAgICAgICAgICAgICAgICAgICAgKGNhbkNyZWF0ZURvYyAmJiBbJ1RFTVBPUkFSSUxZX0NMT1NFRCddLmluZGV4T2YocHJvamVjdC5zdGF0dXMpICE9PSAtMSkiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWZpbGUtZG9jdW1lbnQtb3V0bGluZSBkLWJsb2NrIGZvbnQtc2l6ZS0xNiI+PC9pPgogICAgICAgICAgICB7eyAkdCgiYWN0aW9ucy5jcmVhdGVfbmV3X2RvY3VtZW50IikgfX0KICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8Yi1idXR0b24tZ3JvdXAgY2xhc3M9ImJ0bi1ibG9jayI+CiAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgdi1pZj0iY2FuQ3JlYXRlRG9jICYmIChbJ0ZPUl9QUk9DRVNTJywgJ0ZPUl9OT1RfQ09NUExFVEVEJ10uaW5kZXhPZihwcm9qZWN0LnJldHVyblR5cGUpICE9PSAtMSkiCiAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD0iaGFuZGxlVXBsb2FkVG9SZXR1cm4oJ0ZPUl9OT1RfQ09NUExFVEVEJyk7IgogICAgICAgICAgICAgICAgdmFyaWFudD0ib3V0bGluZS1zZWNvbmRhcnkiPnt7ICR0KCJzdWJtb2R1bGVzLmNvbW1pc3Npb24ubGV0dGVyX25vdF9jb21wbGV0ZSIpIH19CiAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgIDxkaXYgdi1lbHNlLWlmPSIoWydGT1JfTk9UX0NPTVBMRVRFRCddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEpIgogICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LXRpdGxlIHRleHQtY2VudGVyIHctMTAwIj57eyAkdCgic3VibW9kdWxlcy5jb21taXNzaW9uLnRvX2luZGljYXRlX3RoYXRfdGhlX2luZm9ybWF0aW9uX2lzX2luY29tcGxldGUiKSB9fQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICB2LWlmPSJjYW5DcmVhdGVEb2MgJiYgKFsnRk9SX1BST0NFU1MnLCAnRk9SX05PVF9CRUxPTkcnXS5pbmRleE9mKHByb2plY3QucmV0dXJuVHlwZSkgIT09IC0xKSIKICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSJoYW5kbGVVcGxvYWRUb1JldHVybignRk9SX05PVF9CRUxPTkcnKTsiCiAgICAgICAgICAgICAgICB2YXJpYW50PSJvdXRsaW5lLWluZm8iPnt7ICR0KCJzdWJtb2R1bGVzLmNvbW1pc3Npb24ubGV0dGVyX25vdF9iZWxvbmciKSB9fQogICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICA8ZGl2IHYtZWxzZS1pZj0iKFsnRk9SX05PVF9CRUxPTkcnXS5pbmRleE9mKHByb2plY3QucmV0dXJuVHlwZSkgIT09IC0xKSIKICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS10aXRsZSB0ZXh0LWNlbnRlciB3LTEwMCI+e3sgJHQoInN1Ym1vZHVsZXMuY29tbWlzc2lvbi50b19kZXRlcm1pbmVfdGhhdF9pdF9kb2VzX25vdF9mYWxsX3VuZGVyX3RoZV9hdXRob3JpdHkiKSB9fQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICB2LWlmPSJjYW5DcmVhdGVEb2MgJiYgKFsnRk9SX1BST0NFU1MnLCAnRk9SX1JFR0lPTiddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEpIgogICAgICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9ImhhbmRsZVVwbG9hZFRvUmV0dXJuKCdGT1JfUkVHSU9OJyk7IgogICAgICAgICAgICAgICAgdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5Ij57eyAkdCgic3VibW9kdWxlcy5jb21taXNzaW9uLnNlbnRfcmVnaW9uIikgfX0KICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPGRpdiB2LWVsc2UtaWY9IihbJ0ZPUl9SRUdJT04nXS5pbmRleE9mKHByb2plY3QucmV0dXJuVHlwZSkgIT09IC0xKSIgY2xhc3M9Im1lbnUtdGl0bGUgdGV4dC1jZW50ZXIgdy0xMDAiPgogICAgICAgICAgICAgIHt7ICR0KCJzdWJtb2R1bGVzLmNvbW1pc3Npb24udG9fc2VudF90b19yZWdpb24iKSB9fQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1idXR0b24tZ3JvdXA+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IHYtZWxzZT4KICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9ImNsaWNrVXBsb2FkIiB2YXJpYW50PSJwcmltYXJ5IiBibG9jawogICAgICAgICAgICB2LWlmPSIoWydGT1JfUFJPQ0VTUycsICdGT1JfQ09NTUlTU0lPTiddLmluZGV4T2YocHJvamVjdC5yZXR1cm5UeXBlKSAhPT0gLTEpIgogICAgICAgID4KICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWZpbGUtZG9jdW1lbnQtb3V0bGluZSBkLWJsb2NrIGZvbnQtc2l6ZS0xNiI+PC9pPgogICAgICAgICAge3sgJHQoImFjdGlvbnMuY3JlYXRlX25ld19kb2N1bWVudCIpIH19CiAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgPC9kaXY+CiAgPHVwbG9hZC1maWxlIHJlZj0iZmlsZSIgQHNlbmRGaWxlPSJzYXZlRmlsZSIgOmNtdD0idHJ1ZSIgLz4KPC9kaXY+Cg=="},null]}