{"remainingRequest":"D:\\ACRU\\my-fairtech\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ACRU\\my-fairtech\\node_modules\\babel-loader\\lib\\index.js!D:\\ACRU\\my-fairtech\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ACRU\\my-fairtech\\src\\shared\\services\\api.service.js","dependencies":[{"path":"D:\\ACRU\\my-fairtech\\src\\shared\\services\\api.service.js","mtime":1719222285810},{"path":"D:\\ACRU\\my-fairtech\\babel.config.js","mtime":1719222278287},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719222280288},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1719222284617},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\babel-loader\\lib\\index.js","mtime":1719222279696},{"path":"D:\\ACRU\\my-fairtech\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1719222279439}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}