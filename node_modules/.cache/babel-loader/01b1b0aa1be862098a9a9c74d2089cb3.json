{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\src\\state\\modules\\messenger.js","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\src\\state\\modules\\messenger.js","mtime":1674799498875},{"path":"C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\babel.config.js","mtime":1667352074157},{"path":"C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1667355379758},{"path":"C:\\ACRU PROJECT\\Fair Tech\\ohirgi\\acru-frontend\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1667355397815}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/ACRU PROJECT/Fair Tech/ohirgi/acru-frontend/acru-frontend/src/state/modules/messenger.js"],"names":["TokenService","messengerService","SockJS","Stomp","Vue","globalStompClient","state","marketing","notification","contactList","contactTotal","groupChatList","groupChatTotal","comments","commentsTotal","openPage","chatListMessages","chatTotalMessages","groupChatListMessages","groupChatTotalMessages","lastMessage","lastMessageGroup","groupUpdate","groupUpdateMsg","incomingPerson","exitingPerson","chatUnreadCount","unreadData","CHAT","mutations","setCurrentChat","data","setChatMessageMakeRead","id","index","findIndex","e","set","setChatUnreadMessagCount","count","setChatUnreadCount","setComments","setIncomingPerson","setExitingPerson","setMarketing","setNotification","setGroupUpdateE","setGroupChatUpdate","setListResponseGroupChat","list","total","setListResponse","map","firstName","lastName","employeeId","chatId","uploadPath","setOpenPage","setListChatMesseges","setListGroupChatMesseges","pushItems","concat","pushGroupItems","pushChatList","extra","deleteId","splice","editedMessage","message","edited","push","pushCount","chatList","forEach","element","bus","$set","pushGroupChatList","groupChatId","unreadId","isRead","editedGroupMessage","pushGroupCount","remov","actions","commit","JSON","parse","body","getUnreadMessages","st","then","rs","sendAnnouncementDocumentMarking","dispatch","stompClient","endpoint","setDocumentMarking","setNotificationMsg","setCommentTask","parsed","deviceName","setGroupUpdate","setMessage","setGroupMessage","sendMessage","sendMessageGroup","allUnreadMessages","stringify","user_id","localStorage","getItem","onLoad","usr","username","fullName","getUserInfo","employeeFullName","callback","s","root","connect","Promise","resolve","reject","over","process","env","VUE_APP_WEBSOCKET_API","hasDebug","frame","stompClientSendMessage","send","stompSubscribe","subscribe","getByChatId","params","res","getByGroupChatId","getContactList","getGroupChatList"],"mappings":"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","sourcesContent":["\r\nimport { TokenService } from \"@/shared/services/storage.service\"\r\nimport messengerService from \"@/shared/services/messengerService\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"webstomp-client\";\r\nimport Vue from \"vue\"\r\n\r\nlet globalStompClient = null;\r\nexport const state = {\r\n    marketing: null,\r\n    notification: null,\r\n    contactList: [],\r\n    contactTotal: 0,\r\n    groupChatList: [],\r\n    groupChatTotal: 0,\r\n    comments: [],\r\n    commentsTotal: 0,\r\n    openPage: \"default\",\r\n    chatListMessages: [],\r\n    chatTotalMessages: 0,\r\n    groupChatListMessages: [],\r\n    groupChatTotalMessages: 0,\r\n    lastMessage: {},\r\n    lastMessageGroup: {},\r\n    groupUpdate: false,\r\n    groupUpdateMsg: null,\r\n    incomingPerson: null,\r\n    exitingPerson: null,\r\n    chatUnreadCount: 0,\r\n    unreadData: null,\r\n    CHAT: null\r\n}\r\n\r\nexport const mutations = {\r\n    setCurrentChat (state, data) {\r\n        state.CHAT = data\r\n    },\r\n    setChatMessageMakeRead (state, id) {\r\n        let index = state.chatListMessages.findIndex(e => e.id == id)\r\n        if (index > -1) {\r\n            Vue.set(state.chatListMessages[index], \"isRead\", \"READ\")\r\n        }\r\n    },\r\n    setChatUnreadMessagCount (state, count) {\r\n        state.chatUnreadCount = count\r\n        if (count > 0) {\r\n            // playSound()\r\n        }\r\n    },\r\n    setChatUnreadCount (state, data) {\r\n        state.unreadData = data\r\n    },\r\n    setComments (state, data) {\r\n        state.comments = data\r\n    },\r\n    setIncomingPerson (state, data) {\r\n        state.incomingPerson = data\r\n    },\r\n    setExitingPerson (state, data) {\r\n        state.exitingPerson = data\r\n    },\r\n    setMarketing (state, data) {\r\n        state.marketing = data\r\n    },\r\n    setNotification (state, data) {\r\n        state.notification = data\r\n    },\r\n    setGroupUpdateE (state, data) {\r\n        state.groupUpdate = data;\r\n\r\n    },\r\n    setGroupChatUpdate (state, data) {\r\n        state.groupUpdate = true;\r\n        state.groupUpdateMsg = data;\r\n    },\r\n    setListResponseGroupChat (state, data) {\r\n        state.groupChatList = data.list;\r\n        state.groupChatTotal = data.total;\r\n    },\r\n    setListResponse (state, data) {\r\n        state.contactList = data.list.map(e => {\r\n            return {\r\n                firstName: e.firstName,\r\n                lastName: e.lastName,\r\n                employeeId: e.employeeId,\r\n                chatId: e.chatId,\r\n                uploadPath: e.uploadPath\r\n            }\r\n        })\r\n        state.contactTotal = data.total;\r\n    },\r\n    setOpenPage (state, data) {\r\n        state.openPage = data;\r\n    },\r\n    setListChatMesseges (state, data) {\r\n        state.chatListMessages = data.list;\r\n        state.chatTotalMessages = data.total;\r\n    },\r\n    setListGroupChatMesseges (state, data) {\r\n        state.groupChatListMessages = data.list;\r\n        state.groupChatTotalMessages = data.total;\r\n    },\r\n    pushItems (state, data) {\r\n        state.chatListMessages = data.concat(state.chatListMessages)\r\n    },\r\n    pushGroupItems (state, data) {\r\n        state.groupChatListMessages = data.concat(state.groupChatListMessages)\r\n    },\r\n    pushChatList (state, data) {\r\n        if (state.CHAT && state.CHAT.id == data.chatId) {\r\n            if (data.extra == 'delete') {\r\n                const index = state.chatListMessages.findIndex(e => e.id == data.deleteId)\r\n                if (index > -1) {\r\n                    state.chatListMessages.splice(index, 1);\r\n                }\r\n            } else if (data.extra == 'update') {\r\n                const index = state.chatListMessages.findIndex(e => e.id == data.editedMessage.id)\r\n                if (index > -1) {\r\n                    state.chatListMessages[index].message = data.editedMessage.message\r\n                    state.chatListMessages[index].edited = true\r\n                }\r\n            } else {\r\n                let index = state.chatListMessages.findIndex(e => e.id == data.id)\r\n                if (!index || index <= -1) {\r\n                    state.chatListMessages.push(data)\r\n                    state.chatTotalMessages++\r\n                }\r\n            }\r\n        }\r\n    },\r\n    pushCount (state, data) {\r\n        state.chatList.forEach((element) => {\r\n            if (element.id === data.chatId) {\r\n                bus.$set(element, \"count\", element.count++);\r\n            }\r\n        });\r\n    },\r\n    pushGroupChatList (state, data) {\r\n        if (state.CHAT && state.CHAT.id == data.groupChatId) {\r\n            if (data.extra === \"unread\") {\r\n                state.groupChatListMessages.forEach((element) => {\r\n                    if (element.id == data.unreadId) {\r\n                        element.isRead = \"READ\";\r\n                    }\r\n                });\r\n            } else if (data.extra === \"delete\") {\r\n                const index = state.groupChatListMessages.findIndex(e => e.id == data.deleteId)\r\n                if (index > -1) {\r\n                    state.groupChatListMessages.splice(index, 1);\r\n                }\r\n            } else if (data.extra === \"update\") {\r\n                const index = state.groupChatListMessages.findIndex(e => e.id == data.editedGroupMessage.id)\r\n                if (index > -1) {\r\n                    state.groupChatListMessages[index].message = data.editedGroupMessage.message\r\n                    state.groupChatListMessages[index].edited = true\r\n                }\r\n            } else {\r\n                const index = state.groupChatListMessages.findIndex(e => e.id == data.id)\r\n                if (index <= -1) {\r\n                    state.groupChatListMessages.push(data)\r\n                    state.groupChatTotalMessages++\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    },\r\n    pushGroupCount (state, data) {\r\n        if (data.extra === \"unread\") {\r\n        } else if (data.extra === \"delete\") {\r\n\r\n        } else if (data.extra === \"update\") {\r\n        } else {\r\n            state.groupChatList.forEach((element) => {\r\n                if (element.id === data.chatId) {\r\n                    bus.$set(element, \"count\", element.count++);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    remov (state) {\r\n        state.chatListMessages.splice(-1, 1)\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    async setChatMessageMakeRead ({ commit }, data) {\r\n        await commit('setChatMessageMakeRead', JSON.parse(data.body))\r\n    },\r\n    async getUnreadMessages (st) {\r\n        messengerService.getUnreadMessages()\r\n            .then(rs => {\r\n                st.commit('setChatUnreadMessagCount', rs.data)\r\n            })\r\n    },\r\n    async sendAnnouncementDocumentMarking (st, data) {\r\n        st.dispatch(\"stompClientSendMessage\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: \"/app/announcementDocumentMarking\",\r\n            message: data,\r\n        });\r\n    },\r\n    async setChatUnreadCount ({ commit }, data) {\r\n        await commit('setChatUnreadCount', JSON.parse(data.body))\r\n    },\r\n    async setChatUnreadMessagCount ({ commit }, data) {\r\n        await commit(\"setChatUnreadMessagCount\", JSON.parse(data.body));\r\n    },\r\n    async setDocumentMarking ({ commit }, data) {\r\n        await commit(\"setMarketing\", JSON.parse(data.body));\r\n    },\r\n    async setNotificationMsg ({ commit }, data) {\r\n        await commit(\"setNotification\", JSON.parse(data.body));\r\n    },\r\n    async setCommentTask ({ commit }, data) {\r\n        await commit(\"setComments\", JSON.parse(data.body));\r\n    },\r\n    async setIncomingPerson ({ commit }, data) {\r\n        let parsed = JSON.parse(data.body)\r\n        if (parsed.deviceName == 'enter') {\r\n            await commit(\"setIncomingPerson\", parsed);\r\n        } else {\r\n            await commit(\"setExitingPerson\", parsed);\r\n        }\r\n\r\n    },\r\n\r\n\r\n    async setGroupUpdate ({ commit }) {\r\n        await commit(\"setGroupUpdateE\", false);\r\n    },\r\n    async setMessage ({ commit }, data) {\r\n        await commit(\"pushChatList\", JSON.parse(data.body));\r\n    },\r\n    async setGroupMessage ({ commit }, data) {\r\n        await commit(\"pushGroupCount\", JSON.parse(data.body));\r\n        await commit(\"pushGroupChatList\", JSON.parse(data.body));\r\n    },\r\n    async sendMessage (st, data) {\r\n        st.dispatch(\"stompClientSendMessage\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: \"/app/sendMessage\",\r\n            message: data,\r\n        });\r\n    },\r\n    async sendMessageGroup (st, data) {\r\n        st.dispatch(\"stompClientSendMessage\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: \"/app/sendGroupMessage\",\r\n            message: data,\r\n        });\r\n    },\r\n    async allUnreadMessages (st) {\r\n        st.dispatch(\"stompClientSendMessage\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: \"/app/allUnreadMessages\",\r\n            message: JSON.stringify({ user_id: JSON.parse(localStorage.getItem(\"user_id\")) }),\r\n        });\r\n    },\r\n    async onLoad (st, usr = null) {\r\n        let username = null, fullName = null;\r\n        if (!usr) {\r\n            username = TokenService.getUserInfo() ? TokenService.getUserInfo().username : null;\r\n            fullName = TokenService.getUserInfo() ? TokenService.getUserInfo().employeeFullName : null;\r\n        } else {\r\n            username = usr\r\n\r\n        }\r\n        // let ownerId = JSON.parse(localStorage.getItem(\"user_id\"));\r\n\r\n        if (username || fullName) {\r\n            if (usr == 'security') {\r\n                st.dispatch(\"connect\").then(() => {\r\n                    st.dispatch(\"stompSubscribe\", {\r\n                        stompClient: globalStompClient,\r\n                        endpoint: `/user/security/incomingPerson`,\r\n                        callback: async (data) => {\r\n                            st.dispatch(\"setIncomingPerson\", data);\r\n                        },\r\n                    });\r\n                })\r\n            } else {\r\n                st.dispatch(\"connect\")\r\n                    .then(async (s) => {\r\n                        st.dispatch(\"stompClientSendMessage\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: \"/app/register\",\r\n                            message: username,\r\n                        });\r\n                    })\r\n                    .then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/msg`,\r\n                            callback: async (data) => {\r\n                                st.dispatch(\"setMessage\", data);\r\n                            },\r\n                        });\r\n                    }).then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/groupMsg`,\r\n                            callback: async (data) => {\r\n                                st.dispatch(\"setGroupMessage\", data);\r\n                            },\r\n                        });\r\n                    }).then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/documentMarking`,\r\n                            callback: async (data) => {\r\n                                st.dispatch(\"setDocumentMarking\", data);\r\n                            },\r\n                        });\r\n                    }).then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/notificationMsg`,\r\n                            callback: async (data) => {\r\n                                st.dispatch(\"setNotificationMsg\", data);\r\n                                st.dispatch(\"setCount\", null, { root: true })\r\n                            },\r\n                        });\r\n                    })\r\n                    // .then(() => {\r\n                    //     st.dispatch(\"stompSubscribe\", {\r\n                    //         stompClient: globalStompClient,\r\n                    //         endpoint: `/user/${fullName}/commentMgs`,\r\n                    //         callback: async (data) => {\r\n                    //             st.dispatch(\"setCommentTask\", data);\r\n                    //         },\r\n                    //     });\r\n                    // })\r\n                    .then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/unreadMessages`,\r\n                            callback: async (data) => {\r\n                                st.dispatch(\"setChatUnreadMessagCount\", data);\r\n                            },\r\n                        });\r\n                    }).then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/unreadMessage`,\r\n                            callback: async (data) => {\r\n\r\n                                st.dispatch(\"setChatUnreadCount\", data);\r\n                            },\r\n                        });\r\n                    }).then(() => {\r\n                        st.dispatch(\"stompSubscribe\", {\r\n                            stompClient: globalStompClient,\r\n                            endpoint: `/user/${username}/makeRead`,\r\n                            callback: async (data) => {\r\n\r\n                                st.dispatch(\"setChatMessageMakeRead\", data);\r\n                            },\r\n                        });\r\n                    })\r\n\r\n\r\n            }\r\n\r\n        }\r\n    },\r\n    connect ({ commit }) {\r\n        return new Promise((resolve, reject) => {\r\n            globalStompClient = Stomp.over(\r\n                new SockJS(`${process.env.VUE_APP_WEBSOCKET_API}/gs-guide-websocket`)\r\n            );\r\n            if (globalStompClient) {\r\n                globalStompClient.hasDebug = false\r\n            }\r\n            globalStompClient.connect({}, (frame) => resolve(globalStompClient));\r\n        });\r\n    },\r\n    stompClientSendMessage (st, { stompClient, endpoint, message }) {\r\n        stompClient.send(endpoint, message);\r\n    },\r\n    stompSubscribe (st, { stompClient, endpoint, callback }) {\r\n        stompClient.subscribe(endpoint, callback);\r\n        return stompClient;\r\n    },\r\n    async getByChatId ({ commit }, params) {\r\n        try {\r\n            const res = await messengerService.getByChatId(params);\r\n            await commit(\r\n                \"setListChatMesseges\",\r\n                res.data ? res.data : { list: [], total: 0 }\r\n            );\r\n        } catch (error) {\r\n            await commit(\"setListChatMesseges\", { list: [], total: 0 });\r\n        }\r\n    },\r\n    async getByGroupChatId ({ commit }, params) {\r\n        try {\r\n            const res = await messengerService.getByGroupChatId(params);\r\n            await commit(\r\n                \"setListGroupChatMesseges\",\r\n                res.data ? res.data : { list: [], total: 0 }\r\n            );\r\n        } catch (error) {\r\n            await commit(\"setListGroupChatMesseges\", { list: [], total: 0 });\r\n        }\r\n    },\r\n    async getContactList ({ commit }, params) {\r\n        try {\r\n            const res = await messengerService.getContactList(params);\r\n            await commit(\r\n                \"setListResponse\",\r\n                res.data ? res.data : { list: [], total: 0 }\r\n            );\r\n        } catch (error) {\r\n            await commit(\"setListResponse\", { list: [], total: 0 });\r\n        }\r\n    },\r\n    async getGroupChatList ({ commit }, params) {\r\n        try {\r\n            const res = await messengerService.groupChatList(params);\r\n            await commit(\"setListResponseGroupChat\", res.data ? res.data : { list: [], total: 0 }\r\n            );\r\n        } catch (error) {\r\n            await commit(\"setListResponseGroupChat\", { list: [], total: 0 });\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}]}