{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\report\\collection\\assemble\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\report\\collection\\assemble\\index.vue","mtime":1674799497847},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\babel.config.js","mtime":1667352074157},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1675061970715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AA4QA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAA;UACAC;UACAC;QACA;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAL;MACA;MACAM;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAZ;QACAK;MACA;MACAQ;MACAC;QACAC;QACAb;QACAc;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC,qBACA;QACAC;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;MACA,EACA;MACAC;QACAC;UACAC;UACAC;UACAC;UACAC;QACA;MACA;IACA;EACA;EACAC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACA;UAAA;YACA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EACA;EACAC;IACAC;MAAA;MACAC;QACA;UACA;QACA;MACA;IACA;IACAC;MAAA;MACAD;QACA;UACA;QACA;MACA,GACAE;QACA;MACA;IACA;IACAC;MAAA;QAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAAC;cACA;gBACA;gBACA;cACA;cAAA;cAAA,OACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IACA;IACAC;MACA;QACA;UAAAC;QAAA;QACA;MACA;MACA;IACA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cACA;cACA;cACA;cACA;cAAA,IACA;gBAAA;gBAAA;cAAA;cACA;cAAA;YAAA;cAAA;cAAA,OAGAP;gBAAA;kBAAA;oBAAA;sBAAA;wBACA;0BACA;0BACA;0BACA;wBACA;wBACA;wBAAA;wBAAA,OACA;sBAAA;wBACA;sBAAA;sBAAA;wBAAA;oBAAA;kBAAA;gBAAA,CACA;gBAAA;kBAAA;gBAAA;cAAA;gBACA;cACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IACA;IACAQ;MAAA;MAAA;MACA;QACA;MACA;MACAC;QACA;UACA;QACA;UACA;UACA;YACA;UACA;QACA;MACA;IACA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAGA;cACA;cAAA;cAAA,OACA;gBACA;gBACAV;kBACA;oBACAW;sBACA;wBACA;sBACA;sBACA;oBACA;kBACA;gBACA;cACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IACA;IACAC;MACA;MACA;QACA;UACA;UACA;QACA;UACA;UACA;QACA;UACA;UACA;MAAA;IAEA;IACAC;MAAA;MACA;MACA;QACA;QAAA,6BACA;UACA;UACA;UACA;YACA;cACAC;YACA;cACA;gBACAA;kBACAzB;kBACA0B;gBACA;gBACAC;cACA;gBACAF;cACA;YACA;UACA;UACA;QACA;QAnBA;UAAA;QAAA;MAoBA;IACA;IACAG;MAAA;MACA;MACA;QACA;QACA;QACA;QAAA,+BACA;UACA;UACA;YAAA;YACA;YACA;cACAC;gBACA7B;gBACA0B;cACA;YACA;YACAG;YACA;cAAA;cACA;cACA;gBACAC;cACA;cACA;gBACAD;cACA;cACA;gBACAC;cACA;cACA;gBAAA;gBACAD;gBACAA;cACA;YACA;cAAA;cACAA;cACAA;cACAA;cACAA;YACA;cAAA;cACA;gBACAA;cACA;cACAA;cACAA;cACA;cACAA;cACAA;cACAA;cACA;gBACA;kBAAA;kBACAA;kBACAA;kBACAA;gBACA;gBACA;kBAAA;kBACAA;gBACA;gBACA;kBAAA;kBACAA;gBACA;gBACA;kBAAA;kBACAA;gBACA;cACA;gBACAA;cACA;YACA;UACA;QACA;QA7DA;UAAA;QAAA;QA8DA;QACAF;MACA;IACA;IACAI;MAAA;MACA;MACA;QACA;QACA;QACA;QAAA,+BACA;UACA;UACA;YAAA;YACA;YACA;cACAF;gBACA7B;gBACA0B;cACA;YACA;YACAG;YACA;cAAA;cACA;cACA;gBACAC;cACA;cACA;gBACAD;cACA;cACA;gBACA;kBACAC;gBACA;cACA;gBACAA;cACA;cACA;gBAAA;gBACAD;gBACAA;cACA;YACA;cAAA;cACAA;cACAA;cACAA;cACAA;YACA;cAAA;cACA;gBACAA;cACA;cACAA;cACAA;cACA;cACAA;cACAA;cACA;gBACA;kBAAA;kBACAA;kBACAA;kBACAA;gBACA;gBACA;kBAAA;kBACAA;gBACA;gBACA;kBAAA;kBACAA;gBACA;gBACA;kBAAA;kBACAA;gBACA;cACA;gBACAA;gBACAA;cACA;YACA;UACA;QACA;QAjEA;UAAA;QAAA;QAkEA;UACA;UACA;YACAA;UACA;UACAA;UACAA;UACAA;UACAA;QACA;QACA;QACAF;MACA;IACA;IACAK;MACA;MACA;QACA;MACA;MACA;QACA;UACA;UACA;QACA;MACA;QACA;UACA;UACA;QACA;MACA;MACA;QACA;MACA;IACA;IACAC;MAAA;MACA;QACA;UACA;QACA;UACA;QACA;UACA;UACA;UACAC;UACA;YACA;UACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;YACA9B;YACAE;YACAD;UACA;QACA;UACA;MAAA;IAEA;IACA8B;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MACA;gBAAA;gBAAA;cAAA;cACA;cACA;cACA;cACA;cAAA;cAAA,OACAxB;gBACA;kBACA;kBACA;oBACA;sBAAAyB;oBAAA;kBACA;gBACA;kBACA;kBACA;gBACA;cACA;gBACA;cACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAEA;IACAC;MAAA;QAAA;MACA;MACA;MACA;MACA;MACAC;MACAA;MACA;QACAC;UACAC;YACAC;YACAA;UACA;QACA;MACA;MACA;QAAAC;MAAA;MACAC;QAAA;QACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MACA;QACA;UACA;QACA;QACA;QACA;QACA;UAAA,2CACA;YAAA;UAAA;YAAA;cAAA;cACA;gBACA;cACA;cACA;gBAAA;gBACA;gBACA3E,0CACA4E;kBACAC;kBACAC;kBACAhD;kBACAiD;kBACAC;kBACAC;kBACAC;kBACAC;kBACAC;gBAAA,GACA;gBACA;cACA;cACApF,0CACA4E;gBACAC;gBACAO;cAAA,GACA;YACA;UAAA;YAAA;UAAA;YAAA;UAAA;QACA;QACA,2CACA;UACAC;UACA3E;UACA4E;QAAA,EACA;QACA7C,oDACA8C;UACA;YAAAxC;UAAA;QACA,GACAJ;UACA;UACA;QACA;MACA;IACA;IACA6C;MAAA;MACA;QAAA;MAAA;MACA;IACA;IACAC;MAAA;QAAAtD;QAAAC;QAAAL;MACA;QAAAG;QAAAC;QAAAC;MAAA;IACA;IACAsD;MACA;QAAA;MAAA;IACA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cACAC;cACA;gBAAA;gBAAA;kBAAA;oBAAA;sBACA;sBACAC;sBACAC;wBACAC;wBACAnF;wBACAL;sBACA,6BACAgF;wBACA;0BACA;wBACA;0BACA;wBACA;sBACA,GACAS;wBACA;sBACA,GACArD;wBACA;sBACA;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA,CACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IACA;EACA;EACAsD;IACAC;MAAA;MACA;QACA;UACA;YACAC;cACAjE;cACAE;cACAD;YACA;YACAL;UACA;QACA;MACA;MACA;IACA;IACAsE;MAAA;MACA;QACA;UACA;YACAD;cACAjE;cACAE;cACAD;YACA;YACAL;UACA;QACA;MACA;MACA;IACA;IACAuE;MACA;IACA;EACA;EACAC;IACA;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA,wBACA;gBAAA;cAAA;cAAA,KACA5F;gBAAA;gBAAA;cAAA;cACA;cAAA;cAAA,OACA;YAAA;cAAA;cAAA;YAAA;cAEA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAEA;IACA;MACA;QACA;MACA;MACA;IACA;EACA;AACA","names":["components","BaseDatePickerWithValidation","BaseInputWithValidation","reportHeader","data","title","loader","selectLoadItemLoader","selectLoadItemTimeOut","params","limit","page","search","docTableId","dateTypeId","tableListParams","itemsPerPage","tableList","tableListLength","docTableFieldsOriginal","docTableFieldsSerialized","ownDocTableList","dateTypeList","dateTypeListPayload","selectOptionsByReferenceUrl","selectedDocReports","indexSet","docTable","docReports","collectedReportForTableReport","collectingType","collectionAvgIgnoreZero","collectingGroupColumnId","collectingTypeList","value","name","saveData","reportInfoForGather","nameUz","nameLt","nameRu","date","created","methods","getOwnDocTableList","reportService","getDateTypeList","finally","handleSearch","clearSelected","handleValidateForCollecting","type","handleCollect","deserializeDocTableFields","list","handleCollectView","response","handleCollectedReportDraw","handleCollectedReportDrawAssemble","reportRowData","typeCode","sequence","handleCollectedReportDrawCollectSum","reportData","sumBigIntegerCount","handleCollectedReportDrawCollectAvg","selectDocReportItem","printColumn","v","getTableList","selected","handleExportExcel","table","theadOrTbody","tr","thOrTd","sheet","setTimeout","handleSaveDataOpenModal","handleSaveData","val","dynamicRowId","selectValueId","valueString","selectValueNameUz","selectValueNameRu","selectValueNameLt","selectValueNameEn","rowId","tableId","gatherType","then","ownDocTablesValue","labelCollectedSelect","findFieldById","selectFetchOptions","clearTimeout","field","crudAndListsService","keyword","catch","computed","ownDocTableListOptions","text","ownDateTypeListOptions","computedObServerSaveData","watch"],"sourceRoot":"src/modules/report/collection/assemble","sources":["index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <b-overlay\r\n        :opacity=\"0.2\"\r\n        :show=\"loader\"\r\n    >\r\n      <div class=\"col-md-12 text-center\">\r\n        <div class=\"h4 mb-4 d-inline-block\">{{ $t('submodules.reports.collection_assemble') }}</div>\r\n      </div>\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <div class=\"row mb-2\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"row mb-2\">\r\n                <div class=\"col-md-3\">\r\n                  <BaseMultiselectWithValidation\r\n                      rules=\"required\"\r\n                      class=\"required\"\r\n                      onlyFormElement\r\n                      v-model=\"params.docTableId\"\r\n                      :options=\"ownDocTableListOptions.map(e => e.value)\"\r\n                      :label=\"$t('column.value_type')\"\r\n                      label-on-top\r\n                      placeholder=\"\"\r\n                      :custom-label=\"ownDocTablesValue\"\r\n                      open-direction=\"bottom\"\r\n                      :max-height=\"600\"\r\n                      :show-labels=\"false\"\r\n                  />\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                  <b-form-select\r\n                      class=\"border-light form-control rounded\"\r\n                      v-model=\"params.dateTypeId\"\r\n                      :disabled=\"ownDateTypeListOptions.length < 1\"\r\n                      :options=\"ownDateTypeListOptions\"></b-form-select>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                  <div class=\"search-box\">\r\n                    <div class=\"position-relative\">\r\n                      <input\r\n                          type=\"text\"\r\n                          v-model=\"params.name\"\r\n                          class=\"form-control rounded border-light\"\r\n                          :placeholder=\"$t('actions.search')\"\r\n                      />\r\n                      <i class=\"mdi mdi-magnify search-icon\"></i>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                  <b-btn @click=\"handleSearch\">{{ $t('actions.search') }}</b-btn>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                  <b-btn variant=\"success\" @click=\"handleCollect()\"\r\n                         :disabled=\"this.selectedDocReports.indexSet.size < 2\">{{ $t('actions.collect') }}\r\n                  </b-btn>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-12\">\r\n              <table class=\"table table-hover table-striped\">\r\n                <thead>\r\n                <tr>\r\n                  <th>{{ '№' }}</th>\r\n                  <th>{{ $t('column.name') }}</th>\r\n                  <th>{{ $t('submodules.reports.report_date') }}</th>\r\n                  <th>{{ $t(\"nameShakl\") }}</th>\r\n                  <th>{{ $t(\"titleShakl\") }}</th>\r\n                  <th>{{ $t(\"dateTypes\") }}</th>\r\n                  <th>{{ $t(\"submodules.reports.yur_department\") }}</th>\r\n                  <th>{{ $t(\"submodules.reports.created_datetime\") }}</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr v-for=\"(item, index) in tableList\"\r\n                    :key=\"index\"\r\n                    class=\"cursor-pointer\"\r\n                    @click=\"selectDocReportItem(index)\"\r\n                    :class=\"{'table-info': item.selected, 'table-info': item.selected}\">\r\n                  <td>{{\r\n                      paginate(index, var_default_search_payload.itemsPerPage, var_default_search_payload.page - 1)\r\n                    }}\r\n                  </td>\r\n                  <td>\r\n                    {{\r\n                      getName({\r\n                        nameUz: item.reportNameUz,\r\n                        nameRu: item.reportNameRu,\r\n                        nameLt: item.reportNameLt,\r\n                      })\r\n                    }}\r\n                  </td>\r\n                  <td>{{ item.reportData }}</td>\r\n                  <td>{{\r\n                      getName({\r\n                        nameUz: item.docTableNameUz,\r\n                        nameRu: item.docTableNameRu,\r\n                        nameLt: item.docTableNameLt,\r\n                      })\r\n                    }}\r\n                  </td>\r\n                  <td>{{\r\n                      getName({\r\n                        nameUz: item.docTableTitleUz,\r\n                        nameRu: item.docTableTitleRu,\r\n                        nameLt: item.docTableTitleLt,\r\n                      })\r\n                    }}\r\n                  </td>\r\n                  <td>{{\r\n                      getName({\r\n                        nameUz: item.dateTypeNameUz,\r\n                        nameRu: item.dateTypeNameRu,\r\n                        nameLt: item.dateTypeNameLt,\r\n                      })\r\n                    }}\r\n                  </td>\r\n                  <td>{{\r\n                      getName({\r\n                        nameUz: item.yurDepNameUz,\r\n                        nameRu: item.yurDepNameRu,\r\n                        nameLt: item.yurDepNameLt,\r\n                      })\r\n                    }}\r\n                  </td>\r\n                  <td>{{ item.createdDate }}</td>\r\n                </tr>\r\n                <tr v-if=\"tableList.length <= 0\" :key=\"-1\">\r\n                  <td colspan=\"8\">\r\n                    <h5 class=\"text-center\">Маълумот топилмади</h5>\r\n                  </td>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n              <b-pagination\r\n                  v-if=\"tableListLength > 0\"\r\n                  v-model=\"var_default_search_payload.page\"\r\n                  :total-rows=\"tableListLength\"\r\n                  :per-page=\"var_default_search_payload.itemsPerPage\"\r\n                  aria-controls=\"my-table\"\r\n                  class=\"justify-content-end\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <b-modal id=\"modal\" :title=\"$t('submodules.reports.collection_assemble')\" size=\"xl\">\r\n        <div class=\"row\">\r\n          <div class=\"col-2 my-2\">\r\n            <b-form-select\r\n                class=\"form-control rounded\"\r\n                v-model=\"collectingType\">\r\n              <b-form-select-option\r\n                  v-for=\"(item, index) in collectingTypeList\"\r\n                  :key=\"index\"\r\n                  :value=\"item.value\">\r\n                {{ item.name }}\r\n              </b-form-select-option>\r\n            </b-form-select>\r\n          </div>\r\n          <div class=\"col-1 my-2\">\r\n            <b-btn variant=\"success\" class=\"mx-1\" @click=\"handleCollectedReportDraw\">{{ $t('actions.gather') }}</b-btn>\r\n          </div>\r\n          <div class=\"col-1 my-2\">\r\n            <b-btn variant=\"info\" class=\"mx-1\" @click=\"handleExportExcel\">{{ $t('actions.excel') }}</b-btn>\r\n          </div>\r\n          <div class=\"col-6\"></div>\r\n          <div class=\"col-2 my-2\">\r\n            <b-btn variant=\"success\" block\r\n                   class=\"mx-1\"\r\n                   :disabled=\"!collectedReportForTableReport || collectedReportForTableReport.length <= 0\"\r\n                   @click=\"handleSaveDataOpenModal\">{{ $t('actions.confirm') }}\r\n            </b-btn>\r\n          </div>\r\n          <div class=\"col-2 my-2\" v-if=\"collectingType === 'COLLECT_AVG'\">\r\n            <input type=\"checkbox\" id=\"checkbox\" v-model=\"collectionAvgIgnoreZero\">\r\n            <label for=\"checkbox\">{{ $t('submodules.reports.zero_ignore') }}</label>\r\n          </div>\r\n        </div>\r\n        <table ref=\"collectedReportTable\" class=\"table table-hover table-striped table-custom-bordered\" border=\"1\"\r\n               style=\"border: 1px solid black\">\r\n          <report-header :fields=\"docTableFieldsOriginal\"></report-header>\r\n          <tbody>\r\n          <tr v-for=\"(reportRow, reportRowIndex) in collectedReportForTableReport\" :key=\"reportRowIndex\">\r\n            <td v-for=\"(reportCol, reportColIndex) in reportRow\" :key=\"reportColIndex\">\r\n              <BaseMultiselectWithValidation\r\n                  v-if=\"collectingType !== 'ASSEMBLE' && reportCol.typeCode === 'SELECT'\"\r\n                  v-model=\"collectedReportForTableReport[reportRowIndex][reportColIndex].selectValueId\"\r\n                  :options=\"selectOptionsByReferenceUrl[reportCol.columnId]\"\r\n                  :custom-label=\"labelCollectedSelect\"\r\n                  :label=\"$t('column.employee')\"\r\n                  :only-form-element=\"true\"\r\n                  :internal-search=\"false\"\r\n                  :hide-error-msg=\"false\"\r\n                  :loading=\"selectLoadItemLoader\"\r\n                  :show-labels=\"false\"\r\n                  :filterable=\"false\"\r\n                  :searchable=\"true\"\r\n                  :max-height=\"600\"\r\n                  @search-change=\"(keyword) => selectFetchOptions(reportCol, keyword)\"\r\n                  rules=\"required\"\r\n                  placeholder=\"\"\r\n              ></BaseMultiselectWithValidation>\r\n              {{ printColumn(reportCol, reportColIndex) }}\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n        <template #modal-footer>\r\n          <div>&nbsp;</div>\r\n        </template>\r\n      </b-modal>\r\n      <b-modal id=\"saveDataModal\" :title=\"$t('submodules.reports.collection_assemble')\" size=\"lg\">\r\n        <ValidationObserver ref=\"obServerSaveData\" v-slot=\"{}\">\r\n          <div class=\"row\">\r\n            <div class=\"col-12 my-2\">\r\n              <BaseInputWithValidation\r\n                  rules=\"required\"\r\n                  class=\"required\"\r\n                  @input=\"($event) => (saveData.reportInfoForGather.nameLt = toLatin($event))\"\r\n                  v-model=\"saveData.reportInfoForGather.nameUz\"\r\n                  :label=\"$t('column.name_uz')\"\r\n                  :placeholder=\"$t('column.name_uz')\"\r\n              />\r\n            </div>\r\n            <div class=\"col-12 my-2\">\r\n              <BaseInputWithValidation\r\n                  rules=\"required\"\r\n                  class=\"required\"\r\n                  @input=\"($event) => (saveData.reportInfoForGather.nameUz = toCyrill($event))\"\r\n                  v-model=\"saveData.reportInfoForGather.nameLt\"\r\n                  :label=\"$t('column.name_lt')\"\r\n                  :placeholder=\"$t('column.name_lt')\"\r\n              />\r\n            </div>\r\n            <div class=\"col-12 my-2\">\r\n              <BaseInputWithValidation\r\n                  rules=\"required\"\r\n                  class=\"required\"\r\n                  v-model=\"saveData.reportInfoForGather.nameRu\"\r\n                  :label=\"$t('column.name_ru')\"\r\n                  :placeholder=\"$t('column.name_ru')\"\r\n              />\r\n            </div>\r\n            <div class=\"col-12 my-2\">\r\n              <BaseDatePickerWithValidation\r\n                  rules=\"required\"\r\n                  class=\"required\"\r\n                  v-model=\"saveData.reportInfoForGather.date\"\r\n                  :label=\"$t('column.date')\"\r\n                  :placeholder=\"$t('column.date')\"\r\n                  format=\"DD.MM.YYYY\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </ValidationObserver>\r\n        <template #modal-footer>\r\n          <b-btn variant=\"success\" @click=\"handleSaveData\">\r\n            {{ $t(\"actions.save\") }}\r\n          </b-btn>\r\n        </template>\r\n      </b-modal>\r\n    </b-overlay>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport reportService from \"../../reportService\";\r\nimport reportHeader from \"./reportHeader\";\r\nimport XLSX from \"xlsx\";\r\nimport BaseInputWithValidation from \"@/components/base/BaseInputWithValidation\";\r\nimport BaseDatePickerWithValidation from \"@/components/base/BaseDatePickerWithValidation\";\r\nimport crudAndListsService from \"@/shared/services/crud_and_list.service\";\r\n\r\nexport default {\r\n  components: {\r\n    BaseDatePickerWithValidation,\r\n    BaseInputWithValidation,\r\n    reportHeader\r\n  },\r\n  data() {\r\n    return {\r\n      title: this.$t(\"reportRoles\"),\r\n      loader: true,\r\n      selectLoadItemLoader: null,\r\n      selectLoadItemTimeOut: null,\r\n      params: {\r\n        params: {\r\n          limit: 20,\r\n          page: 0,\r\n        },\r\n        search: \"\",\r\n        docTableId: \"\",\r\n        dateTypeId: \"\",\r\n      },\r\n      tableListParams: {\r\n        itemsPerPage: 20,\r\n        page: 0,\r\n      },\r\n      tableList: [],\r\n      tableListLength: 0,\r\n      docTableFieldsOriginal: [],\r\n      docTableFieldsSerialized: [],\r\n      ownDocTableList: [],\r\n      dateTypeList: [],\r\n      dateTypeListPayload: {\r\n        page: 0,\r\n        itemsPerPage: 100\r\n      },\r\n      selectOptionsByReferenceUrl: {},\r\n      selectedDocReports: {\r\n        indexSet: new Set(),\r\n        docTableId: false,\r\n        docTable: null,\r\n        docReports: {},\r\n      },\r\n      collectedReportForTableReport: [],\r\n      collectingType: 'ASSEMBLE',\r\n      collectionAvgIgnoreZero: false,\r\n      collectingGroupColumnId: null,\r\n      collectingTypeList: [\r\n        {\r\n          value: \"ASSEMBLE\",\r\n          name: \"Yig'ish\",\r\n        },\r\n        {\r\n          value: \"COLLECT_SUM\",\r\n          name: \"Yig'indini yig'ish (SUM)\",\r\n        },\r\n        {\r\n          value: \"COLLECT_AVG\",\r\n          name: \"O'rtacha qiymat yig'ish (AVG)\",\r\n        },\r\n      ],\r\n      saveData: {\r\n        reportInfoForGather: {\r\n          nameUz: '',\r\n          nameLt: '',\r\n          nameRu: '',\r\n          date: '',\r\n        }\r\n      }\r\n    };\r\n  },\r\n  async created() {\r\n    await this.getOwnDocTableList();\r\n    this.loader = false;\r\n  },\r\n  methods: {\r\n    getOwnDocTableList() {\r\n      reportService.getOwnTable(this.params).then(response => {\r\n        if (response.data.list.length > 0) {\r\n          this.ownDocTableList = response.data.list;\r\n        }\r\n      });\r\n    },\r\n    getDateTypeList(dateTypeId) {\r\n      reportService.getListByParentId(dateTypeId, this.dateTypeListPayload).then(response => {\r\n        if (response.data.list.length > 0) {\r\n          this.dateTypeList = response.data.list;\r\n        }\r\n      })\r\n          .finally(() => {\r\n            this.loader = false;\r\n          });\r\n    },\r\n    async handleSearch(clearSelected = true) {\r\n      if (clearSelected) {\r\n        this.selectedDocReports.docTableId = false;\r\n        this.selectedDocReports.indexSet = new Set();\r\n      }\r\n      await this.getTableList();\r\n    },\r\n    handleValidateForCollecting() {\r\n      if (!this.selectedDocReports.docTableId || this.selectedDocReports.indexSet.size < 2) {\r\n        this.$toast(this.$t(\"submodules.reports.select_minimum_two_report\"), {type: \"warning\"})\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    async handleCollect() {\r\n      this.loader = true;\r\n      this.collectedReportForTableReport = [];\r\n      this.docTableFieldsOriginal = [];\r\n      this.docTableFieldsSerialized = [];\r\n      if (!this.handleValidateForCollecting()) {\r\n        this.loader = false;\r\n        return;\r\n      }\r\n      await reportService.getByIdTable(this.selectedDocReports.docTableId).then(async response => {\r\n        if (response.data.columns.length > 0) {\r\n          this.docTableFieldsOriginal = response.data.columns;\r\n          this.deserializeDocTableFields(this.docTableFieldsOriginal);\r\n          this.selectedDocReports.docTable = response.data.table;\r\n        }\r\n        this.$bvModal.show('modal')\r\n        await this.handleCollectView();\r\n        this.loader = false;\r\n      }).catch(() => {\r\n        this.loader = false;\r\n      });\r\n    },\r\n    deserializeDocTableFields(list, clear = true) {\r\n      if (clear) {\r\n        this.docTableFieldsSerialized = [];\r\n      }\r\n      list.forEach(e => {\r\n        if (e.children.length > 0) {\r\n          this.deserializeDocTableFields(e.children, false);\r\n        } else {\r\n          this.docTableFieldsSerialized.push(e)\r\n          if (e.typeCode === 'SELECT') {\r\n            this.selectOptionsByReferenceUrl[e.id] = [];\r\n          }\r\n        }\r\n      })\r\n    },\r\n    async handleCollectView() {\r\n      if (!this.handleValidateForCollecting()) {\r\n        return;\r\n      }\r\n      this.loader = true;\r\n      this.selectedDocReports.docReports = {};\r\n      await this.selectedDocReports.indexSet.forEach((docReportId) => {\r\n        this.selectedDocReports.docReports[docReportId] = {}\r\n        reportService.getReportById(docReportId).then(response => {\r\n          if (response.data) {\r\n            response.data.map(value => {\r\n              if (this.selectedDocReports.docReports[docReportId][value.rowId] === undefined) {\r\n                this.selectedDocReports.docReports[docReportId][value.rowId] = {};\r\n              }\r\n              this.selectedDocReports.docReports[docReportId][value.rowId][value.columnId] = value;\r\n            });\r\n          }\r\n        });\r\n      })\r\n    },\r\n    handleCollectedReportDraw() {\r\n      this.collectedReportForTableReport = [];\r\n      switch (this.collectingType) {\r\n        case 'ASSEMBLE':\r\n          this.handleCollectedReportDrawAssemble();\r\n          break;\r\n        case 'COLLECT_SUM':\r\n          this.handleCollectedReportDrawCollectSum();\r\n          break;\r\n        case 'COLLECT_AVG':\r\n          this.handleCollectedReportDrawCollectAvg();\r\n          break;\r\n      }\r\n    },\r\n    handleCollectedReportDrawAssemble() {\r\n      let sequence = 1;\r\n      this.selectedDocReports.indexSet.forEach((value) => {\r\n        const reports = this.selectedDocReports.docReports[value];\r\n        for (const reportRowIndex in reports) {\r\n          const reportRow = reports[reportRowIndex];\r\n          let reportRowData = JSON.parse('[]');\r\n          this.docTableFieldsSerialized.forEach(field => {\r\n            if (reportRow[field.id] !== undefined) {\r\n              reportRowData.push(reportRow[field.id]);\r\n            } else {\r\n              if (field.typeCode === 'SEQUENCE') {\r\n                reportRowData.push({\r\n                  value: sequence,\r\n                  typeCode: field.typeCode,\r\n                });\r\n                sequence++;\r\n              } else {\r\n                reportRowData.push({});\r\n              }\r\n            }\r\n          })\r\n          this.collectedReportForTableReport.push(reportRowData);\r\n        }\r\n      })\r\n    },\r\n    handleCollectedReportDrawCollectSum() {\r\n      let sequence = 1;\r\n      this.selectedDocReports.indexSet.forEach((docReportId) => {\r\n        let reportData = [];\r\n        let sumBigIntegerCount = {};\r\n        const reports = this.selectedDocReports.docReports[docReportId];\r\n        for (const reportRowIndex in reports) {\r\n          const report = reports[reportRowIndex];\r\n          this.docTableFieldsSerialized.forEach((docTableField, docTableFieldIndex) => {\r\n            const reportRowField = report[docTableField.id];\r\n            if (docTableField.typeCode === 'SEQUENCE' && typeof reportData[docTableFieldIndex] === 'undefined') {\r\n              reportData[docTableFieldIndex] = {\r\n                value: sequence,\r\n                typeCode: \"SEQUENCE\"\r\n              }\r\n            }\r\n            reportData[docTableFieldIndex] = reportRowField && !reportData[docTableFieldIndex]?.id ? JSON.parse(JSON.stringify(reportRowField)) : (reportData[docTableFieldIndex] || {});\r\n            if (docTableField.typeCode === 'BIGDECIMAL') {\r\n              const valueBigDecimal = reportRowField?.valueBigDecimal ?? 0;\r\n              if (typeof sumBigIntegerCount[docTableField.id] === 'undefined') {\r\n                sumBigIntegerCount[docTableField.id] = 0;\r\n              }\r\n              if (typeof reportData[docTableFieldIndex].valueBigDecimal === 'undefined' || reportData[docTableFieldIndex].valueBigDecimal === null || reportData[docTableFieldIndex].valueBigDecimal === '') {\r\n                reportData[docTableFieldIndex].valueBigDecimal = 0;\r\n              }\r\n              if (valueBigDecimal && (valueBigDecimal > 0 || valueBigDecimal < 0)) {\r\n                sumBigIntegerCount[docTableField.id]++;\r\n              }\r\n              if (valueBigDecimal && reportRowField?.id !== reportData[docTableFieldIndex]?.id) {\r\n                reportData[docTableFieldIndex].valueBigDecimal += valueBigDecimal;\r\n                reportData[docTableFieldIndex].value = reportData[docTableFieldIndex].valueBigDecimal?.toString();\r\n              }\r\n            } else if (docTableField.typeCode === 'STRING' || docTableField.typeCode === 'DATE' || docTableField.typeCode === 'YEAR' || docTableField.typeCode === 'BOOLEAN') {\r\n              reportData[docTableFieldIndex].value += \", \" + (reportRowField.value ?? '');\r\n              reportData[docTableFieldIndex].valueDate += \", \" + (reportRowField.valueDate ?? '');\r\n              reportData[docTableFieldIndex].valueString += \", \" + (reportRowField.valueString ?? '');\r\n              reportData[docTableFieldIndex].valueBoolean += \", \" + (reportRowField.valueBoolean ?? '');\r\n            } else if (docTableField.typeCode === 'SELECT') {\r\n              if (!reportData[docTableFieldIndex]) {\r\n                reportData[docTableFieldIndex] = JSON.parse(JSON.stringify(reportRowField));\r\n              }\r\n              reportData[docTableFieldIndex].id = reportRowField.id;\r\n              reportData[docTableFieldIndex].rowId = reportRowField.rowId;\r\n              // reportData[docTableFieldIndex].typeCode = 'STRING';\r\n              reportData[docTableFieldIndex].columnId = reportRowField.columnId;\r\n              reportData[docTableFieldIndex].docReportId = reportRowField.docReportId;\r\n              reportData[docTableFieldIndex].selectValueId = null;\r\n              if (reportData[docTableFieldIndex]?.valueString?.indexOf(reportRowField.selectValueNameUz) === -1) {\r\n                if (reportRowField?.selectValueNameUz) {\r\n                  reportData[docTableFieldIndex].valueString += (reportRowField?.selectValueNameUz ?? '') + \", \";\r\n                  reportData[docTableFieldIndex].value += (reportRowField?.selectValueNameUz ?? '') + \", \";\r\n                  reportData[docTableFieldIndex].selectValueNameUz += (reportRowField?.selectValueNameUz ?? '') + \", \";\r\n                }\r\n                if (reportRowField?.selectValueNameEn) {\r\n                  reportData[docTableFieldIndex].selectValueNameEn += (reportRowField?.selectValueNameEn ?? '') + \", \";\r\n                }\r\n                if (reportRowField?.selectValueNameLt) {\r\n                  reportData[docTableFieldIndex].selectValueNameLt += (reportRowField?.selectValueNameLt ?? '') + \", \";\r\n                }\r\n                if (reportRowField?.selectValueNameRu) {\r\n                  reportData[docTableFieldIndex].selectValueNameRu += (reportRowField?.selectValueNameRu ?? '') + \", \";\r\n                }\r\n              } else if (reportData[docTableFieldIndex]?.valueString === null) {\r\n                reportData[docTableFieldIndex].valueString = '';\r\n              }\r\n            }\r\n          })\r\n        }\r\n        this.collectedReportForTableReport.push(reportData);\r\n        sequence++;\r\n      })\r\n    },\r\n    handleCollectedReportDrawCollectAvg() {\r\n      let sequence = 1;\r\n      this.selectedDocReports.indexSet.forEach((docReportId) => {\r\n        let reportData = [];\r\n        let sumBigIntegerCount = {};\r\n        const reports = this.selectedDocReports.docReports[docReportId];\r\n        for (const reportRowIndex in reports) {\r\n          const report = reports[reportRowIndex];\r\n          this.docTableFieldsSerialized.forEach((docTableField, docTableFieldIndex) => {\r\n            const reportRowField = report[docTableField.id];\r\n            if (docTableField.typeCode === 'SEQUENCE' && typeof reportData[docTableFieldIndex] === 'undefined') {\r\n              reportData[docTableFieldIndex] = {\r\n                value: sequence,\r\n                typeCode: \"SEQUENCE\"\r\n              }\r\n            }\r\n            reportData[docTableFieldIndex] = reportRowField && !reportData[docTableFieldIndex]?.id ? JSON.parse(JSON.stringify(reportRowField)) : (reportData[docTableFieldIndex] || {});\r\n            if (docTableField.typeCode === 'BIGDECIMAL') {\r\n              const valueBigDecimal = reportRowField?.valueBigDecimal ?? 0;\r\n              if (typeof sumBigIntegerCount[docTableField.id] === 'undefined') {\r\n                sumBigIntegerCount[docTableField.id] = 0;\r\n              }\r\n              if (typeof reportData[docTableFieldIndex].valueBigDecimal === 'undefined' || reportData[docTableFieldIndex].valueBigDecimal === null || reportData[docTableFieldIndex].valueBigDecimal === '') {\r\n                reportData[docTableFieldIndex].valueBigDecimal = 0;\r\n              }\r\n              if (this.collectionAvgIgnoreZero) {\r\n                if (valueBigDecimal && (valueBigDecimal > 0 || valueBigDecimal < 0)) {\r\n                  sumBigIntegerCount[docTableField.id]++;\r\n                }\r\n              } else {\r\n                sumBigIntegerCount[docTableField.id]++;\r\n              }\r\n              if (valueBigDecimal && reportRowField?.id !== reportData[docTableFieldIndex]?.id) {\r\n                reportData[docTableFieldIndex].valueBigDecimal += valueBigDecimal;\r\n                reportData[docTableFieldIndex].value = reportData[docTableFieldIndex].valueBigDecimal?.toString();\r\n              }\r\n            } else if (docTableField.typeCode === 'STRING' || docTableField.typeCode === 'DATE' || docTableField.typeCode === 'YEAR' || docTableField.typeCode === 'BOOLEAN') {\r\n              reportData[docTableFieldIndex].value += \", \" + (reportRowField.value ?? '');\r\n              reportData[docTableFieldIndex].valueDate += \", \" + (reportRowField.valueDate ?? '');\r\n              reportData[docTableFieldIndex].valueString += \", \" + (reportRowField.valueString ?? '');\r\n              reportData[docTableFieldIndex].valueBoolean += \", \" + (reportRowField.valueBoolean ?? '');\r\n            } else if (docTableField.typeCode === 'SELECT') {\r\n              if (!reportData[docTableFieldIndex]) {\r\n                reportData[docTableFieldIndex] = JSON.parse(JSON.stringify(reportRowField));\r\n              }\r\n              reportData[docTableFieldIndex].id = reportRowField.id;\r\n              reportData[docTableFieldIndex].rowId = reportRowField.rowId;\r\n              // reportData[docTableFieldIndex].typeCode = 'STRING';\r\n              reportData[docTableFieldIndex].columnId = reportRowField.columnId;\r\n              reportData[docTableFieldIndex].docReportId = reportRowField.docReportId;\r\n              if (reportData[docTableFieldIndex]?.valueString?.indexOf(reportRowField.selectValueNameUz) === -1) {\r\n                if (reportRowField?.selectValueNameUz) {\r\n                  reportData[docTableFieldIndex].value += (reportRowField?.selectValueNameUz ?? '') + \", \";\r\n                  reportData[docTableFieldIndex].valueString += (reportRowField?.selectValueNameUz ?? '') + \", \";\r\n                  reportData[docTableFieldIndex].selectValueNameUz += (reportRowField?.selectValueNameUz ?? '') + \", \";\r\n                }\r\n                if (reportRowField?.selectValueNameEn) {\r\n                  reportData[docTableFieldIndex].selectValueNameEn += (reportRowField?.selectValueNameEn ?? '') + \", \";\r\n                }\r\n                if (reportRowField?.selectValueNameLt) {\r\n                  reportData[docTableFieldIndex].selectValueNameLt += (reportRowField?.selectValueNameLt ?? '') + \", \";\r\n                }\r\n                if (reportRowField?.selectValueNameRu) {\r\n                  reportData[docTableFieldIndex].selectValueNameRu += (reportRowField?.selectValueNameRu ?? '') + \", \";\r\n                }\r\n              } else if (reportData[docTableFieldIndex]?.valueString === null) {\r\n                reportData[docTableFieldIndex].valueString = '';\r\n                reportData[docTableFieldIndex].value = '';\r\n              }\r\n            }\r\n          })\r\n        }\r\n        for (const i in reportData) {\r\n          const count = sumBigIntegerCount[reportData[i].columnId];\r\n          if (reportData[i].typeCode === 'BIGDECIMAL' && count > 0) {\r\n            reportData[i].valueBigDecimal /= count;\r\n          }\r\n          reportData[i].selectValueNameEn = reportData[i].selectValueNameEn ? reportData[i].selectValueNameEn.trim().slice(0, -1) : '';\r\n          reportData[i].selectValueNameLt = reportData[i].selectValueNameLt ? reportData[i].selectValueNameLt.trim().slice(0, -1) : '';\r\n          reportData[i].selectValueNameRu = reportData[i].selectValueNameRu ? reportData[i].selectValueNameRu.trim().slice(0, -1) : '';\r\n          reportData[i].selectValueNameUz = reportData[i].selectValueNameUz ? reportData[i].selectValueNameUz.trim().slice(0, -1) : '';\r\n        }\r\n        this.collectedReportForTableReport.push(reportData);\r\n        sequence++;\r\n      })\r\n    },\r\n    selectDocReportItem(index) {\r\n      const item = this.tableList[index];\r\n      if (this.selectedDocReports.docTableId === false) {\r\n        this.selectedDocReports.docTableId = item.docTableId;\r\n      }\r\n      if (this.selectedDocReports.indexSet.has(item.reportId)) {\r\n        if (this.selectedDocReports.docTableId === item.docTableId) {\r\n          this.selectedDocReports.indexSet.delete(item.reportId);\r\n          this.tableList[index].selected = false;\r\n        }\r\n      } else {\r\n        if (this.selectedDocReports.docTableId === item.docTableId) {\r\n          this.selectedDocReports.indexSet.add(item.reportId);\r\n          this.tableList[index].selected = true;\r\n        }\r\n      }\r\n      if (this.selectedDocReports.indexSet.size === 0) {\r\n        this.selectedDocReports.docTableId = false;\r\n      }\r\n    },\r\n    printColumn(column, index) {\r\n      switch (column.typeCode) {\r\n        case 'SEQUENCE':\r\n          return column?.value ?? index + 1;\r\n        case 'STRING':\r\n          return column?.valueString ?? column?.value ?? '';\r\n        case 'BIGDECIMAL':\r\n          // eslint-disable-next-line no-case-declarations\r\n          let v = column?.valueBigDecimal ?? 0;\r\n          v = v.toFixed(2);\r\n          if (!isNaN(v)) {\r\n            return v;\r\n          }\r\n          return '';\r\n        case 'BOOLEAN':\r\n          return column?.valueBoolean ? this.$t('actions.yes') : this.$t('actions.no');\r\n        case 'DATE':\r\n          return column?.valueDate ?? '';\r\n        case 'YEAR':\r\n          return column?.valueString ?? '';\r\n        case 'SELECT':\r\n          return this.getName({\r\n            nameUz: column?.selectValueNameUz,\r\n            nameRu: column?.selectValueNameRu,\r\n            nameLt: column?.selectValueNameLt,\r\n          }).trim(' ,');\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n    async getTableList() {\r\n      if (this.params.docTableId && this.params.dateTypeId) {\r\n        this.tableListLength = 0;\r\n        this.tableListLength = 0;\r\n        this.tableList = [];\r\n        this.loader = true\r\n        await reportService.reportListForCollection(this.params.docTableId, this.params.dateTypeId, {...this.var_default_search_payload}).then(response => {\r\n          if (response.data.list.length > 0) {\r\n            this.tableListLength = response.data.total;\r\n            this.tableList = response.data.list.map((item) => {\r\n              return {...item, selected: this.selectedDocReports.indexSet.has(item.reportId)};\r\n            });\r\n          } else {\r\n            this.tableListLength = 0;\r\n            this.tableList = [];\r\n          }\r\n        }).finally(() => {\r\n          this.loader = false;\r\n        });\r\n      }\r\n    },\r\n    handleExportExcel() {\r\n      let currentDate = new Date();\r\n      let dateDMY = currentDate.getDate() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getFullYear();\r\n      let fileName = this.getName(this.selectedDocReports.docTable) + dateDMY;\r\n      let table = this.$refs.collectedReportTable;\r\n      table.setAttribute('border', '1');\r\n      table.style.border = '1px solid black';\r\n      table.children?.forEach(theadOrTbody => {\r\n        theadOrTbody.children.forEach(tr => {\r\n          tr.children.forEach(thOrTd => {\r\n            thOrTd.width = thOrTd.offsetWidth + 'px';\r\n            thOrTd.style.width = thOrTd.offsetWidth + 'px';\r\n          })\r\n        })\r\n      })\r\n      let wb = XLSX.utils.table_to_book(table, {sheet: \"sheet1\"});\r\n      setTimeout(() => { // todo nega bu kerakligini tekshirish kerak, copy olib qoyganman\r\n        this.loaderExcel = false;\r\n      }, 500);\r\n      return XLSX.writeFile(wb, `${fileName}.xlsx`, {});\r\n    },\r\n    handleSaveDataOpenModal() {\r\n      this.$bvModal.show('saveDataModal')\r\n    },\r\n    handleSaveData(e) {\r\n      this.computedObServerSaveData.validate().then(isValid => {\r\n        if (!isValid) {\r\n          return false;\r\n        }\r\n        this.loader = true\r\n        let data = [];\r\n        for (const key in this.collectedReportForTableReport) {\r\n          for (const val of this.collectedReportForTableReport[key]) {\r\n            if (!val.typeCode || val.typeCode === 'SEQUENCE' || !val.columnId || !val.docReportId) {\r\n              continue;\r\n            }\r\n            if (val.typeCode === 'SELECT' && typeof val.selectValueId === 'object') {\r\n              const selectValue = val.selectValueId;\r\n              data.push({\r\n                ...val,\r\n                dynamicRowId: key + 1,\r\n                selectValueId: selectValue?.id,\r\n                value: null,\r\n                valueString: null,\r\n                selectValueNameUz: selectValue?.nameUz ?? selectValue?.name ?? '',\r\n                selectValueNameRu: selectValue?.nameRu ?? selectValue?.name ?? '',\r\n                selectValueNameLt: selectValue?.nameLt ?? selectValue?.name ?? '',\r\n                selectValueNameEn: selectValue?.nameEn ?? selectValue?.name ?? '',\r\n                rowId: null\r\n              })\r\n              continue;\r\n            }\r\n            data.push({\r\n              ...val,\r\n              dynamicRowId: key + 1,\r\n              rowId: null\r\n            })\r\n          }\r\n        }\r\n        const info = {\r\n          ...this.saveData.reportInfoForGather,\r\n          tableId: this.params.docTableId,\r\n          dateTypeId: this.params.dateTypeId,\r\n          gatherType: this.collectingType,\r\n        }\r\n        reportService.createAndFillGatherReport(info, data)\r\n            .then((res) => {\r\n              this.$toast(this.$t('messages.saved_successfully'), {type: 'success'});\r\n            })\r\n            .finally(() => {\r\n              this.loader = false\r\n              this.$bvModal.hide('saveDataModal')\r\n            })\r\n      })\r\n    },\r\n    ownDocTablesValue(opt) {\r\n      let item = this.ownDocTableListOptions.find(e => e.value === opt);\r\n      return item.text ?? ''\r\n    },\r\n    labelCollectedSelect({nameUz, nameLt, nameRu, name}) {\r\n      return nameUz ? this.getName({nameUz: nameUz, nameLt: nameLt, nameRu: nameRu}) : name\r\n    },\r\n    findFieldById(id) {\r\n      return this.docTableFieldsSerialized.find(e => e.id === id);\r\n    },\r\n    async selectFetchOptions(column, keyword) {\r\n      clearTimeout(this.selectLoadItemTimeOut);\r\n      this.selectLoadItemTimeOut = setTimeout(async () => {\r\n        this.selectLoadItemLoader = true;\r\n        const field = this.findFieldById(column.columnId);\r\n        crudAndListsService.searchListWithKeyword(field.referenceUrl, {\r\n          keyword: keyword,\r\n          itemsPerPage: 10,\r\n          page: 1\r\n        }, field.referenceAppendUrl)\r\n            .then(res => {\r\n              if (\"DepartmentForDocument\" === field.refCode) {\r\n                this.selectOptionsByReferenceUrl[field.id] = res.data\r\n              } else {\r\n                this.selectOptionsByReferenceUrl[field.id] = res.data.list\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.selectLoadItemLoader = false;\r\n            })\r\n            .finally(() => {\r\n              this.selectLoadItemLoader = false;\r\n            })\r\n      }, 500);\r\n    },\r\n  },\r\n  computed: {\r\n    ownDocTableListOptions() {\r\n      if (this.ownDocTableList.length > 0) {\r\n        return this.ownDocTableList.map(item => {\r\n          return {\r\n            text: this.getName({\r\n              nameUz: item.nameUz,\r\n              nameRu: item.nameRu,\r\n              nameLt: item.nameLt,\r\n            }),\r\n            value: item.id,\r\n          };\r\n        });\r\n      }\r\n      return [];\r\n    },\r\n    ownDateTypeListOptions() {\r\n      if (this.dateTypeList.length > 0) {\r\n        return this.dateTypeList.map(item => {\r\n          return {\r\n            text: this.getName({\r\n              nameUz: item.nameUz,\r\n              nameRu: item.nameRu,\r\n              nameLt: item.nameLt,\r\n            }),\r\n            value: item.id,\r\n          };\r\n        });\r\n      }\r\n      return [];\r\n    },\r\n    computedObServerSaveData() {\r\n      return this.$refs.obServerSaveData\r\n    }\r\n  },\r\n  watch: {\r\n    async 'params.docTableId'(docTableId) {\r\n      const {dateTypeId} = this.ownDocTableList.find(e => e.id === docTableId);\r\n      if (dateTypeId) {\r\n        this.loader = true\r\n        await this.getDateTypeList(dateTypeId)\r\n      } else {\r\n        this.dateTypeList = [];\r\n      }\r\n    },\r\n    'var_default_search_payload.page'() {\r\n      if (this.loader) {\r\n        return;\r\n      }\r\n      this.handleSearch(false);\r\n    },\r\n  }\r\n};\r\n</script>\r\n"]}]}