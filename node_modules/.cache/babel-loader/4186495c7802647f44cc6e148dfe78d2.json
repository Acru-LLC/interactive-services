{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\letterService.js","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\modules\\letter\\letterService.js","mtime":1675768982309},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\babel.config.js","mtime":1667352074157},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1667355397815}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["ApiService","projectService","fetchChartDataApplicationsByStatusesForYearForDXA","year","get","giveVisaForDXA","applicationId","params","post","id","comment","sendToCommissionFromDxa","commissionTypeId","SignatureGiveVisaForDXA","data","bodyDate","employeeId","letterId","giveVisaDate","fetchChartDataCurrentApplicationStatusesForDXA","fetchChartDataApplicationsByStatusesForYear","fetchChartDataCurrentApplicationStatuses","listApplicationsByStatus","payload","status","keyword","myPayload","Object","assign","page","listDXA_ApplicationsByStatus","activeDXATab","getListMonitor","search","getRegions","acceptAppilcation","application_id","department_id","acceptSenderRegion","applicationReviewNOT_COMPLETE","obj","ID","getBody","viewPdfByLetterId","saveLetterBody","text","signer","body","removeLetter","delete","removeFile","getAttachedFilesById","projectLettersByLetterId","createAttachedFile","file","formData","FormData","append","getListDocumentType","v","convertToPdfByApi","config","withLoader","getList","getById","setLetterRejtOrAccept","bool","rejectLetterToReject","assignmentId","x","y","currentPage","getIncomeTotalCount","upload","query_data","name","regNumber","date","docSampleId","getListLetter","getListLetterIncome","action","getListLetterVisa","getVisaInfo","getListLetterSend","getByIdLetter","getByIdSendToRais","getRejectLetter","sendDoc","sendQuorum","projectId","put","onlyDocSign","signDecision","onlyDocSignSendToRais","commissionComment","onlyDocSignSendToRaisOnInner","managementEmployeeId","onlyDocSignFORNotBelong","onlyDocSignForToReturn","onlyDocMakeSignedToReject","onlyDocSignFORBeforeProject","makeSignedInvokeLetter","onlyDocSignNotBelong","onlyDocSignForRevision","onlyDocSignForRRejectedByRais","letterCancelled","resultApplicationForDXA","applicationDXAId","paymentAmount","files","forEach","item","formDataFile","resultApplicationForDXARejected","uploadRejectLetter","letterType","letterName","signDoc","makeSignedNewWithHeadOfDepartment","headOfDepartmentId","makeSignedToClosed","signDocToManagement","letterAssignmentId","getReceivers","makeAgree","makeReviewForCommission","makeReviewForCommissionManagement","commissionCompletionDate","makeLetterSendFinishLetterToChairman","makeSignedBeforeCommission","makeReview","makeAgreedLetterToClosed","makeViewedLetterToFinish","makeAgreedLetter","makeSignedFinishLetter","saveRejected","saveQrCode","left","top","handleSendLetterToChairman","letterQRCODE","letterQRCODESendToRais","getDocPdf","convert","html","applicationReviewNoPermitRequired","decisionText","decision_text","applicationReopenProject","returnApplicationByRegion","applicationDxaId","getAllManagementEmployees","uploadFinishLetter","letterGetFinishLetter","letterGetFinishLetterWithSigner","searchList","mainUrl","appendUrl","dxaVisaDataGetFile","changeStatusService","component","grid","selectedFilter","cnf","then","value","projectType","applicationType","returnType","getLettersById","res","length","$toast","$t","type","notPdfDocs","filter","d","fileType","toString","toLowerCase","indexOf","i","convertToPdf","r","uploadPath","endsWith","closeProject","catch","e","console","log","l","convertToPdfLength"],"sources":["C:/ACRU PROJECT/Fair Tech/acru-frontend/src/modules/letter/letterService.js"],"sourcesContent":["import ApiService from '@/shared/services/api.service'\r\nimport projectService from '@/shared/services/projectService'\r\n// import {cxonfigure} from 'vee-validate'\r\n\r\nexport default {\r\n  fetchChartDataApplicationsByStatusesForYearForDXA(year) {\r\n    return ApiService.get(`application-dxa/get-data-for-chart-by-month?year=${year}`)\r\n  },\r\n  giveVisaForDXA(applicationId, params) {\r\n    return ApiService.post(`letter/get-visa/${applicationId}?employeeId=${params.id}&comment=${params.comment}`)\r\n  },\r\n  sendToCommissionFromDxa(applicationId, commissionTypeId, comment = '') {\r\n    return ApiService.post(`letter/send-to-commission/from-dxa/${applicationId}/${commissionTypeId}?comment=${comment}`)\r\n  },\r\n  SignatureGiveVisaForDXA(data, bodyDate) {\r\n    return ApiService.post(`letter/approve-visa/${data.applicationId}?employeeId=${data.employeeId}&letterId=${data.letterId}&comment=${bodyDate.comment}&giveVisaDate=${bodyDate.giveVisaDate}`)\r\n  },\r\n  fetchChartDataCurrentApplicationStatusesForDXA() {\r\n    return ApiService.get(`application-dxa/get-data-for-chart`)\r\n  },\r\n  fetchChartDataApplicationsByStatusesForYear(year) {\r\n    return ApiService.get(`before-commission/application/get-data-for-chart-by-month?year=${year}`)\r\n  },\r\n  fetchChartDataCurrentApplicationStatuses() {\r\n    return ApiService.get(`before-commission/application/get-data-for-chart`)\r\n  },\r\n  listApplicationsByStatus: function (payload, status = '', keyword = '') {\r\n    let myPayload = Object.assign({}, payload)\r\n    myPayload.page -= 1\r\n    return ApiService.post(`before-commission/application/list-search-by-application-status?keyword=${keyword}&status=${status ? status : ''}`, myPayload)\r\n  },\r\n  listDXA_ApplicationsByStatus: function (payload, status = '', keyword = '', activeDXATab) {\r\n    let myPayload = Object.assign({}, payload)\r\n    myPayload.page -= 1\r\n    return ApiService.post(`application-dxa/list-search/by-status?keyword=${keyword}&status=${status ? status : ''}&applicationType=${activeDXATab == 'FOR_SALE' ? 'FOR_SALE' : 'FOR_ADD'}`, myPayload)\r\n  },\r\n  getListMonitor({ params, search }, activeDXATab) {\r\n    return ApiService.post(`/application-dxa/list-search/before-register?keyword=${search}&applicationType=${activeDXATab == 'FOR_SALE' ? 'FOR_SALE' : 'FOR_ADD'}`, params)\r\n  },\r\n  getRegions() {\r\n    return ApiService.post(`/department/list-search/yurdep`)\r\n  },\r\n  acceptAppilcation(application_id, department_id) {\r\n    return ApiService.post(`application-dxa/receive?id=${application_id}&department_id=${department_id ? department_id : ''}`)\r\n  },\r\n  acceptSenderRegion(application_id, department_id) {\r\n    return ApiService.post(`application-dxa/receive?id=${application_id}&department_id=${department_id ? department_id : ''}`)\r\n  },\r\n  applicationReviewNOT_COMPLETE(obj, ID) {\r\n    return ApiService.post(`/before-commission/application/application-review/not-completed?id=${ID}`, obj)\r\n  },\r\n  getBody(id) {\r\n    return ApiService.get(`/letter/getBodyById/${id}`)\r\n  },\r\n  viewPdfByLetterId(letterId) {\r\n    return ApiService.get(`/letter/letterView/${letterId}`)\r\n  },\r\n  saveLetterBody(letterId, text, signer) {\r\n    return ApiService.post(`/letter/letterSave?letterId=${letterId}&signerId=${signer ? signer : ''}`, { body: text })\r\n  },\r\n  removeLetter(letterId) {\r\n    return ApiService.delete(`/letter/delete/${letterId}`)\r\n  },\r\n  removeFile(letterId) {\r\n    return ApiService.delete(`/letterAttachedFile/delete/${letterId}`)\r\n  },\r\n  getAttachedFilesById(letterId) {\r\n    return ApiService.get(`/letterAttachedFile/list/${letterId}`)\r\n  },\r\n  projectLettersByLetterId(letterId) {\r\n    return ApiService.post(`letter/project-letters/by-letter-id/${letterId}`)\r\n  },\r\n  createAttachedFile(letterId, file) {\r\n    let formData = new FormData()\r\n    formData.append(\"file\", file)\r\n    return ApiService.formData(`/letterAttachedFile/create/${letterId}`, formData)\r\n  },\r\n  getListDocumentType({ params, search }, v) {\r\n    return ApiService.post(`/docSample/list?search=${search}&code=${v}`, params)\r\n  },\r\n  async convertToPdfByApi(config, withLoader = false) {\r\n    /* try {\r\n        await ApiService.removeHeader()\r\n        // let response = await ApiService.post(fbIp, data);\r\n        // const token = Buffer.from(`m@y(dutyFr##:m@y(dutyFr##P@$Sw0RD)`, 'utf8').toString('base64')\r\n        var requestData = {\r\n            method: 'post',\r\n            url: `http://apivirtual.dataprizma.uz/api/v.1/letter/callback?type=convert`,\r\n            data: config\r\n        };\r\n        let response = await ApiService.customRequest(requestData);\r\n        await ApiService.setHeader()\r\n        return response\r\n    } catch (error) {\r\n        await ApiService.setHeader()\r\n        throw error;\r\n    } */\r\n    return ApiService.post(`/letter/callback?type=convert`, config, withLoader)\r\n  },\r\n  getList({ params, search }) {\r\n    return ApiService.post(`/document/list`, params)\r\n  },\r\n  getById(id) {\r\n    return ApiService.get(`/document/get-by-id/${id}`)\r\n  },\r\n  setLetterRejtOrAccept(id, bool) {\r\n    return ApiService.post(`letter/reject-or-accept/${id}?isRejected=${bool}`)\r\n  },\r\n  rejectLetterToReject(payload, assignmentId, x, y, currentPage, comment) {\r\n    return ApiService.post(`/letter/makeSigned-reject-letter/to-reject/${assignmentId}?comment=${comment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  getIncomeTotalCount() {\r\n    return ApiService.get(`/letter/totalCount`)\r\n  },\r\n  upload(data) {\r\n    let query_data = `?fileName=${data.name}&regNumber=${data.regNumber}&date=${data.date}&docSampleId=${data.docSampleId == 'blank' ? '' : data.docSampleId}`\r\n    return ApiService.post(`/letter/letterSave${query_data}`)\r\n  },\r\n  getListLetter({ params, search }) {\r\n    return ApiService.post(`/letter/draftList?search=${search}`, params)\r\n  },\r\n  getListLetterIncome({ params, search }, action) {\r\n    return ApiService.post(`/letter/incomeList?search=${search}&action=${action}`, params)\r\n  },\r\n  getListLetterVisa({ params, search }, action) {\r\n    return ApiService.post(`letter/forVisaList?search=${search}&action=${action}`, params)\r\n  },\r\n  getVisaInfo(applicationId) {\r\n    return ApiService.get(`letter/visa-info/${applicationId}`)\r\n  },\r\n  getListLetterSend({ params, search }) {\r\n    return ApiService.post(`/letter/sendList?search=${search}`, params)\r\n  },\r\n\r\n  getByIdLetter(id) {\r\n    return ApiService.get(`/letter/get-by-id/${id}`)\r\n  },\r\n  getByIdSendToRais(id) {\r\n    return ApiService.get(`/letter/get-by-id/by-application-id/${id}`)\r\n  },\r\n  getRejectLetter(letterId) {\r\n    return ApiService.get(`/letter/get-reject-letter/${letterId}`)\r\n  },\r\n  sendDoc(id, params) {\r\n    return ApiService.post(`/letter/send/${id}`, params)\r\n  },\r\n  sendQuorum(projectId, params) {\r\n    return ApiService.put(`/project/no-quorum/${projectId}?date=${params.date}`, params)\r\n  },\r\n  onlyDocSign(payload, id, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned/${id}?x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  signDecision(payload, id, x, y, currentPage, comment) {\r\n    return ApiService.post(`/letter/makeSigned/decision/${id}?x=${x}&y=${y}&page=${currentPage}&comment=${comment}`, payload, true)\r\n  },\r\n  onlyDocSignSendToRais(payload, id, x, y, currentPage, commissionTypeId, commissionComment) {\r\n    return ApiService.post(`/letter/makeSigned/from-dxa/${id}/${commissionTypeId}?comment=${commissionComment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  onlyDocSignSendToRaisOnInner(payload, id, x, y, currentPage, managementEmployeeId, comment) {\r\n    return ApiService.post(`/letter/makeSigned/to-sign/${id}/${managementEmployeeId}?comment=${comment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  onlyDocSignFORNotBelong(payload, id, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned/not-belong/${id}?x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  onlyDocSignForToReturn(payload, id, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned/to-return/${id}?x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  onlyDocMakeSignedToReject(payload, assignmentId, employeeId, comment, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned-compromise-decision/to-reject/${assignmentId}/${employeeId}?x=${x}&y=${y}&page=${currentPage}&comment=${comment}`, payload, true)\r\n  },\r\n  onlyDocSignFORBeforeProject(payload, id, x, y, currentPage) {\r\n    return ApiService.post(`letter/makeSigned/from-dxa/for-confirm/${id}?x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  makeSignedInvokeLetter(payload, projectId, letterId, employeeId, comment, x, y, currentPage) {\r\n    return ApiService.post(`letter/makeSigned-invoke-letter/${projectId}/${letterId}/${employeeId}/?x=${x}&y=${y}&page=${currentPage}&comment=${comment}`, payload, true)\r\n  },\r\n  onlyDocSignNotBelong(payload, letterId) {\r\n    return ApiService.post(`before-commission/application/application-review/not-belong?letterId=${letterId}`, payload)\r\n  },\r\n  onlyDocSignForRevision(payload, id, comment) {\r\n    return ApiService.post(`letter/for-revision/from-commission/${id}?comment=${comment}`, payload, true)\r\n  },\r\n  onlyDocSignForRRejectedByRais(payload, letterId, id, comment) {\r\n    return ApiService.post(`letter/for-revision/to-commission/${letterId}/${id}?comment=${comment}`, payload, true)\r\n  },\r\n  letterCancelled(payload, letterId, assignmentId, comment) {\r\n    return ApiService.post(`/letter/cancelled/${letterId}/${assignmentId}?comment=${comment}`, payload, true)\r\n  },\r\n  resultApplicationForDXA(payload, letterId, applicationDXAId, paymentAmount, files = []) {\r\n    const formData = new FormData()\r\n    files.forEach((item) => {\r\n      formData.append(\"paymentFiles\", item.file)\r\n    })\r\n    return ApiService.formDataFile(`/before-commission/application/application-review/accepted?letterId=${letterId}&applicationDXAId=${applicationDXAId}&paymentAmount=${paymentAmount}`, formData)\r\n  },\r\n  resultApplicationForDXARejected(payload, letterId) {\r\n    return ApiService.post(`before-commission/application/application-review/rejected?letterId=${letterId}`, payload)\r\n  },\r\n  uploadRejectLetter(letterId, letterType, letterName = \"Rad etish xati\") {\r\n    return ApiService.put(`/letter/upload-reject-letter/${letterId}?letterType=${letterType}&letterName=${letterName}`, null, true)\r\n  },\r\n  signDoc(payload, id, x, y, currentPage, commissionTypeId, commissionComment) {\r\n    return ApiService.post(`/letter/makeSignedNew/${id}/${commissionTypeId}?comment=${commissionComment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  makeSignedNewWithHeadOfDepartment(payload, id, x, y, currentPage, commissionTypeId, commissionComment, headOfDepartmentId) {\r\n    return ApiService.post(`/letter/makeSignedNew/withHeadOfDepartment/${id}/${commissionTypeId}?headOfDepartmentId=${headOfDepartmentId}&comment=${commissionComment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  makeSignedToClosed(payload, assignmentId, comment, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned-to-closed/${assignmentId}?comment=${comment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  signDocToManagement(payload, letterAssignmentId, x, y, currentPage, managementEmployeeId, comment) {\r\n    return ApiService.post(`/letter/makeSignedNew/to-management/${letterAssignmentId}/${managementEmployeeId}?comment=${comment}&x=${x}&y=${y}&page=${currentPage}`, payload, true)\r\n  },\r\n  getReceivers(id) {\r\n    return ApiService.get(`/letter/letterInfo/${id}`)\r\n  },\r\n  makeAgree(id) {\r\n    return ApiService.get(`/letter/makeAgreed/${id}`)\r\n  },\r\n  makeReviewForCommission(id, comment) {\r\n    return ApiService.post(`/letter/makeViewedForCommissionProject/${id}?comment=${comment ? comment : ''}`)\r\n  },\r\n  makeReviewForCommissionManagement(letterAssignmentId, commissionTypeId, comment, commissionCompletionDate) {\r\n    return ApiService.post(`/letter/send-to-commission/${letterAssignmentId}/${commissionTypeId}?comment=${comment ? comment : ''}&completionDate=${commissionCompletionDate ? commissionCompletionDate : ''}`)\r\n  },\r\n  makeLetterSendFinishLetterToChairman(applicationId, letterId, comment = '') {\r\n    return ApiService.put(`/letter/send-finish-letter/to-chairman/${applicationId}/${letterId}?comment=${comment}`)\r\n  },\r\n  makeSignedBeforeCommission(payload, letterAssignmentId, comment, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned/before-commission/${letterAssignmentId}/?x=${x}&y=${y}&page=${currentPage}&comment=${comment}`, payload)\r\n  },\r\n  makeReview(id) {\r\n    return ApiService.get(`/letter/makeViewed/${id}`)\r\n  },\r\n  makeAgreedLetterToClosed(letterAssignmentId) {\r\n    return ApiService.get(`/letter/makeViewed-letter/to-closed/${letterAssignmentId}`)\r\n  },\r\n  makeViewedLetterToFinish(letterAssignmentId) {\r\n    return ApiService.get(`/letter/makeViewed-letter/to-finish/${letterAssignmentId}`)\r\n  },\r\n  makeAgreedLetter(assignmentId) {\r\n    return ApiService.get(`/letter/makeViewed-letter/${assignmentId}`)\r\n  },\r\n  makeSignedFinishLetter(assignmentId, employeeId, comment, payload, x, y, currentPage) {\r\n    return ApiService.post(`/letter/makeSigned-finish-letter/${assignmentId}/${employeeId}?x=${x}&y=${y}&page=${currentPage}&comment=${comment}`, payload)\r\n  },\r\n  saveRejected(letterId, id, comment, payload) {\r\n    return ApiService.post(`/letter/cancelled/${letterId}/${id}?comment=${comment}`, payload)\r\n  },\r\n  saveQrCode(left, top, page) {\r\n    return ApiService.get(`/letter/letterAsPdf?x=${left}&y=${top}&page=${page - 1}`)\r\n  },\r\n  handleSendLetterToChairman(letterId, comment) {\r\n    return ApiService.put(`/letter/send-letter/to-chairman/${letterId}?comment=${comment}`)\r\n  },\r\n  letterQRCODE(letterId) {\r\n    return ApiService.get(`/letter/letterQRCode/${letterId}`)\r\n  },\r\n  letterQRCODESendToRais(letterId) {\r\n    return ApiService.get(`/letter/letterQRCode/from-dxa/${letterId}`)\r\n  },\r\n  getDocPdf(letterId) {\r\n    return ApiService.get(`/letter/convertLetterToPdf/${letterId}`)\r\n  },\r\n  convert(data) {\r\n    return ApiService.post(`/letter/letterConvert`, { html: data })\r\n  },\r\n  applicationReviewNoPermitRequired(applicationId, decisionText) {\r\n    return ApiService.post(`/before-commission/application/application-review/no-permit-required?applicationDXAId=${applicationId}`, {\r\n      decision_text: decisionText\r\n    }, true)\r\n  },\r\n  applicationReopenProject(applicationId) {\r\n    return ApiService.post(`/before-commission/application/reopen-project?applicationId=${applicationId}`, null, true)\r\n  },\r\n  returnApplicationByRegion(applicationDxaId, id) {\r\n    return ApiService.post(`before-commission/application/return-to-central-section?applicationDXAId=${applicationDxaId}&id=${id}`)\r\n  },\r\n  getAllManagementEmployees() {\r\n    return ApiService.get(`employee/get-all-employee/in-management`)\r\n  },\r\n  uploadFinishLetter(applicationId, letterType, letterName) {\r\n    return ApiService.put(`/letter/upload-finish-letter/${applicationId}?letterType=${letterType}&letterName=${letterName}`)\r\n  },\r\n  letterGetFinishLetter(applicationId) {\r\n    return ApiService.get(`letter/get-finish-letter/${applicationId}`)\r\n  },\r\n  letterGetFinishLetterWithSigner(applicationId) {\r\n    return ApiService.get(`letter/get-finish-letter/with-signer/${applicationId}`)\r\n  },\r\n  searchList: function (mainUrl, payload, appendUrl, withLoader = false) {\r\n    let myPayload = Object.assign({}, payload)\r\n    myPayload.page -= 1\r\n    if (appendUrl) {\r\n      return ApiService.post(`${mainUrl}/list-search/${appendUrl}`, payload ? myPayload : payload, withLoader);\r\n    } else {\r\n      return ApiService.post(`${mainUrl}/list-search`, payload ? myPayload : payload, withLoader);\r\n    }\r\n  },\r\n  dxaVisaDataGetFile(applicationId) {\r\n    return ApiService.get(`dxa-visa-data/get-file/${applicationId}`);\r\n  },\r\n\r\n  changeStatusService(component, grid, selectedFilter = null) {\r\n    component.cnf().then((v) => {\r\n      if (v.value) {\r\n        let status = 'REVIEW_FINISHED';\r\n        if (grid.projectType === 'COMMISSION' && grid.applicationType !== \"FROM_DXA\") {\r\n          switch (grid.returnType) {\r\n            case 'FOR_FINISH_WORK':\r\n              projectService.getLettersById(grid.id)\r\n                .then(res => {\r\n                  if (!res.data || res.data.length <= 0) {\r\n                    return component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                  }\r\n                  let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                    && ['DECISION_COMMISSION', 'PROTOCOL_COMMISSION'].indexOf(d.letterType) !== -1);\r\n                  for (let i = 0; i < notPdfDocs.length; i++) {\r\n                    const d = notPdfDocs[i];\r\n                    component.convertToPdf(d).then(r => {\r\n                      if (!r.uploadPath) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (i === notPdfDocs.length - 1) {\r\n                        component.closeProject(grid.id, status, selectedFilter)\r\n                      }\r\n                    })\r\n                      .catch(e => console.log(e))\r\n                  }\r\n                })\r\n                .catch(e => {\r\n                  console.log(e)\r\n                })\r\n              break;\r\n            case 'FOR_SUSPEND_WORK':\r\n              projectService.getLettersById(grid.id)\r\n                .then(res => {\r\n                  if (!res.data || res.data.length <= 0) {\r\n                    return component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                  }\r\n                  let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                    && ['COMPROMISE_DECISION_SUSPEND', 'PROTOCOL_SUSPEND'].indexOf(d.letterType) !== -1);\r\n                  for (let i = 0; i < notPdfDocs.length; i++) {\r\n                    const d = notPdfDocs[i];\r\n                    component.convertToPdf(d).then(r => {\r\n                      if (!r.uploadPath) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (i === notPdfDocs.length - 1) {\r\n                        component.closeProject(grid.id, status, selectedFilter)\r\n                      }\r\n                    })\r\n                      .catch(e => console.log(e))\r\n                  }\r\n                })\r\n                .catch(e => {\r\n                  console.log(e)\r\n                })\r\n              break;\r\n            case 'FOR_DELAY_WORK':\r\n              projectService.getLettersById(grid.id)\r\n                .then(res => {\r\n                  if (!res.data || res.data.length <= 0) {\r\n                    return component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                  }\r\n                  let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                    && ['COMPROMISE_DECISION_DELAY', 'PROTOCOL_DELAY'].indexOf(d.letterType) !== -1);\r\n                  for (let i = 0; i < notPdfDocs.length; i++) {\r\n                    const d = notPdfDocs[i];\r\n                    component.convertToPdf(d).then(r => {\r\n                      if (!r.uploadPath) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (i === notPdfDocs.length - 1) {\r\n                        component.closeProject(grid.id, status, selectedFilter)\r\n                      }\r\n                    })\r\n                      .catch(e => console.log(e))\r\n                  }\r\n                })\r\n                .catch(e => {\r\n                  console.log(e)\r\n                })\r\n              break;\r\n            case 'FOR_RESUME_WORK':\r\n              projectService.getLettersById(grid.id)\r\n                .then(res => {\r\n                  if (!res.data || res.data.length <= 0) {\r\n                    return component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                  }\r\n                  let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf'\r\n                    && ['COMPROMISE_DECISION_RESUME', 'PROTOCOL_RESUME'].indexOf(d.letterType) !== -1);\r\n                  for (let i = 0; i < notPdfDocs.length; i++) {\r\n                    const d = notPdfDocs[i];\r\n                    component.convertToPdf(d).then(r => {\r\n                      if (!r.uploadPath) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                        component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (i === notPdfDocs.length - 1) {\r\n                        component.closeProject(grid.id, status, selectedFilter)\r\n                      }\r\n                    })\r\n                      .catch(e => console.log(e))\r\n                  }\r\n                })\r\n                .catch(e => {\r\n                  console.log(e)\r\n                })\r\n              break;\r\n            default:\r\n              component.closeProject(grid.id, status, selectedFilter);\r\n              break;\r\n          }\r\n        } else {\r\n          projectService.getLettersById(grid.id)\r\n            .then(async res => {\r\n              if (grid.applicationType === \"NOT_BELONG\") {\r\n                if ((component.projectType === 'BEFORE_COMMISSION' && res.data && res.data.length >= 1) || (component.projectType !== 'BEFORE_COMMISSION' && res.data && res.data.length >= 0)) {\r\n                  if (grid.projectType === 'COMMISSION') {\r\n                    await component.closeProject(grid.id, status, selectedFilter)\r\n                  } else {\r\n                    await component.closeProject(grid.id, 'FINISHED', selectedFilter)\r\n                  }\r\n                } else {\r\n                  await component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                }\r\n              } else if (grid.applicationType === \"FROM_DXA\") {\r\n                if ((component.projectType === 'BEFORE_COMMISSION' && res.data && res.data.length >= 1) || (component.projectType !== 'BEFORE_COMMISSION' && component.projectType !== 'COMMISSION' && res.data && res.data.length >= 0)) {\r\n                  if (grid.projectType === 'COMMISSION') {\r\n                    await component.closeProject(grid.id, status, selectedFilter)\r\n                  } else {\r\n                    await component.closeProject(grid.id, status, selectedFilter)\r\n                  }\r\n                } else if (grid.projectType === 'COMMISSION') {\r\n                  let notPdfDocs = await res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf')\r\n                  for (let i = 0; i < notPdfDocs.length; i++) {\r\n                    const d = notPdfDocs[i];\r\n                    await component.convertToPdf(d).then(async (r) => {\r\n                      // CHECK AND RESEND 1ST REQUEST\r\n                      if (!r.uploadPath) {\r\n                        await component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                        await component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                      } else if (i === notPdfDocs.length - 1) { // check last request\r\n                        await component.closeProject(grid.id, status, selectedFilter)\r\n                      }\r\n                    })\r\n                      .catch(e => console.log(e))\r\n                  }\r\n                } else {\r\n                  component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                }\r\n              } else {\r\n                if ((component.projectType === 'BEFORE_COMMISSION' && res.data && res.data.length > 1) || (component.projectType !== 'BEFORE_COMMISSION' && res.data && res.data.length > 0)) {\r\n                  if (grid.projectType === 'COMMISSION') {\r\n                    component.closeProject(grid.id, status, selectedFilter)\r\n                  } else {\r\n                    let notPdfDocs = res.data.filter(d => d.fileType.toString().toLowerCase() !== 'pdf')\r\n                    let convertToPdf = []\r\n                    switch (grid.returnType) {\r\n                      case \"FOR_COMMISSION\":\r\n                        convertToPdf = notPdfDocs.filter(l => l.letterType === 'REFERENCE')\r\n                        break;\r\n                      case \"FOR_NOT_COMPLETED\":\r\n                        convertToPdf = notPdfDocs.filter(l => l.letterType === 'NOTICE_NOT_COMPLETED')\r\n                        status = 'FINISHED'\r\n                        break;\r\n                      case \"FOR_NOT_BELONG\":\r\n                        convertToPdf = notPdfDocs.filter(l => l.letterType === 'NOTICE_NOT_BELONG')\r\n                        status = 'FINISHED'\r\n                        break;\r\n                      case \"FOR_REGION\":\r\n                        convertToPdf = notPdfDocs.filter(l => l.letterType === 'NOTICE_REGION')\r\n                        status = 'FINISHED'\r\n                        break;\r\n                    }\r\n                    let convertToPdfLength = convertToPdf.length;\r\n                    for (let i = 0; i < convertToPdfLength; i++) {\r\n                      const d = convertToPdf[i];\r\n                      component.convertToPdf(d).then(r => {\r\n\r\n                        // CHECK AND RESEND 1ST REQUEST\r\n                        if (!r.uploadPath) {\r\n                          component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                        } else if (!r.uploadPath.endsWith('.pdf')) {\r\n                          component.$toast(component.$t('messages.project_files_convert_pdf_error'), { type: 'error' })\r\n                        } else if (i === convertToPdfLength - 1) {\r\n                          component.closeProject(grid.id, status, selectedFilter)\r\n                        }\r\n                      })\r\n                        .catch(e => console.log(e))\r\n                    }\r\n                  }\r\n                } else {\r\n                  component.$toast(component.$t('messages.project_files_not_exist'), { type: 'error' })\r\n                }\r\n              }\r\n            })\r\n            .catch(e => {\r\n              console.log(e)\r\n            })\r\n        }\r\n      }\r\n    });\r\n  },\r\n}\r\n"],"mappings":"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"}]}