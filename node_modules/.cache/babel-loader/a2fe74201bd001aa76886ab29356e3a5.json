{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\state\\modules\\messenger.js","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\state\\modules\\messenger.js","mtime":1675054786294},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\babel.config.js","mtime":1667352074157},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1675061970665},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1667355397815}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiQzovQUNSVSBQUk9KRUNUL0ZhaXIgVGVjaC9hY3J1LWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovQUNSVSBQUk9KRUNUL0ZhaXIgVGVjaC9hY3J1LWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnB1c2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIjsKaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIH0gZnJvbSAiQC9zaGFyZWQvc2VydmljZXMvc3RvcmFnZS5zZXJ2aWNlIjsKaW1wb3J0IG1lc3NlbmdlclNlcnZpY2UgZnJvbSAiQC9zaGFyZWQvc2VydmljZXMvbWVzc2VuZ2VyU2VydmljZSI7CmltcG9ydCBTb2NrSlMgZnJvbSAic29ja2pzLWNsaWVudCI7CmltcG9ydCBTdG9tcCBmcm9tICJ3ZWJzdG9tcC1jbGllbnQiOwppbXBvcnQgVnVlIGZyb20gInZ1ZSI7CnZhciBnbG9iYWxTdG9tcENsaWVudCA9IG51bGw7CmV4cG9ydCB2YXIgc3RhdGUgPSB7CiAgbWFya2V0aW5nOiBudWxsLAogIG5vdGlmaWNhdGlvbjogbnVsbCwKICBjb250YWN0TGlzdDogW10sCiAgY29udGFjdFRvdGFsOiAwLAogIGdyb3VwQ2hhdExpc3Q6IFtdLAogIGdyb3VwQ2hhdFRvdGFsOiAwLAogIGNvbW1lbnRzOiBbXSwKICBjb21tZW50c1RvdGFsOiAwLAogIG9wZW5QYWdlOiAiZGVmYXVsdCIsCiAgY2hhdExpc3RNZXNzYWdlczogW10sCiAgY2hhdFRvdGFsTWVzc2FnZXM6IDAsCiAgZ3JvdXBDaGF0TGlzdE1lc3NhZ2VzOiBbXSwKICBncm91cENoYXRUb3RhbE1lc3NhZ2VzOiAwLAogIGxhc3RNZXNzYWdlOiB7fSwKICBsYXN0TWVzc2FnZUdyb3VwOiB7fSwKICBncm91cFVwZGF0ZTogZmFsc2UsCiAgZ3JvdXBVcGRhdGVNc2c6IG51bGwsCiAgaW5jb21pbmdQZXJzb246IG51bGwsCiAgZXhpdGluZ1BlcnNvbjogbnVsbCwKICBjaGF0VW5yZWFkQ291bnQ6IDAsCiAgdW5yZWFkRGF0YTogbnVsbCwKICBDSEFUOiBudWxsCn07CmV4cG9ydCB2YXIgbXV0YXRpb25zID0gewogIHNldEN1cnJlbnRDaGF0OiBmdW5jdGlvbiBzZXRDdXJyZW50Q2hhdChzdGF0ZSwgZGF0YSkgewogICAgc3RhdGUuQ0hBVCA9IGRhdGE7CiAgfSwKICBzZXRDaGF0TWVzc2FnZU1ha2VSZWFkOiBmdW5jdGlvbiBzZXRDaGF0TWVzc2FnZU1ha2VSZWFkKHN0YXRlLCBpZCkgewogICAgdmFyIGluZGV4ID0gc3RhdGUuY2hhdExpc3RNZXNzYWdlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUuaWQgPT0gaWQ7CiAgICB9KTsKICAgIGlmIChpbmRleCA+IC0xKSB7CiAgICAgIFZ1ZS5zZXQoc3RhdGUuY2hhdExpc3RNZXNzYWdlc1tpbmRleF0sICJpc1JlYWQiLCAiUkVBRCIpOwogICAgfQogIH0sCiAgc2V0Q2hhdFVucmVhZE1lc3NhZ0NvdW50OiBmdW5jdGlvbiBzZXRDaGF0VW5yZWFkTWVzc2FnQ291bnQoc3RhdGUsIGNvdW50KSB7CiAgICBzdGF0ZS5jaGF0VW5yZWFkQ291bnQgPSBjb3VudDsKICAgIGlmIChjb3VudCA+IDApIHsKICAgICAgLy8gcGxheVNvdW5kKCkKICAgIH0KICB9LAogIHNldENoYXRVbnJlYWRDb3VudDogZnVuY3Rpb24gc2V0Q2hhdFVucmVhZENvdW50KHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS51bnJlYWREYXRhID0gZGF0YTsKICB9LAogIHNldENvbW1lbnRzOiBmdW5jdGlvbiBzZXRDb21tZW50cyhzdGF0ZSwgZGF0YSkgewogICAgc3RhdGUuY29tbWVudHMgPSBkYXRhOwogIH0sCiAgc2V0SW5jb21pbmdQZXJzb246IGZ1bmN0aW9uIHNldEluY29taW5nUGVyc29uKHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5pbmNvbWluZ1BlcnNvbiA9IGRhdGE7CiAgfSwKICBzZXRFeGl0aW5nUGVyc29uOiBmdW5jdGlvbiBzZXRFeGl0aW5nUGVyc29uKHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5leGl0aW5nUGVyc29uID0gZGF0YTsKICB9LAogIHNldE1hcmtldGluZzogZnVuY3Rpb24gc2V0TWFya2V0aW5nKHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5tYXJrZXRpbmcgPSBkYXRhOwogIH0sCiAgc2V0Tm90aWZpY2F0aW9uOiBmdW5jdGlvbiBzZXROb3RpZmljYXRpb24oc3RhdGUsIGRhdGEpIHsKICAgIHN0YXRlLm5vdGlmaWNhdGlvbiA9IGRhdGE7CiAgfSwKICBzZXRHcm91cFVwZGF0ZUU6IGZ1bmN0aW9uIHNldEdyb3VwVXBkYXRlRShzdGF0ZSwgZGF0YSkgewogICAgc3RhdGUuZ3JvdXBVcGRhdGUgPSBkYXRhOwogIH0sCiAgc2V0R3JvdXBDaGF0VXBkYXRlOiBmdW5jdGlvbiBzZXRHcm91cENoYXRVcGRhdGUoc3RhdGUsIGRhdGEpIHsKICAgIHN0YXRlLmdyb3VwVXBkYXRlID0gdHJ1ZTsKICAgIHN0YXRlLmdyb3VwVXBkYXRlTXNnID0gZGF0YTsKICB9LAogIHNldExpc3RSZXNwb25zZUdyb3VwQ2hhdDogZnVuY3Rpb24gc2V0TGlzdFJlc3BvbnNlR3JvdXBDaGF0KHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5ncm91cENoYXRMaXN0ID0gZGF0YS5saXN0OwogICAgc3RhdGUuZ3JvdXBDaGF0VG90YWwgPSBkYXRhLnRvdGFsOwogIH0sCiAgc2V0TGlzdFJlc3BvbnNlOiBmdW5jdGlvbiBzZXRMaXN0UmVzcG9uc2Uoc3RhdGUsIGRhdGEpIHsKICAgIHN0YXRlLmNvbnRhY3RMaXN0ID0gZGF0YS5saXN0Lm1hcChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gewogICAgICAgIGZpcnN0TmFtZTogZS5maXJzdE5hbWUsCiAgICAgICAgbGFzdE5hbWU6IGUubGFzdE5hbWUsCiAgICAgICAgZW1wbG95ZWVJZDogZS5lbXBsb3llZUlkLAogICAgICAgIGNoYXRJZDogZS5jaGF0SWQsCiAgICAgICAgdXBsb2FkUGF0aDogZS51cGxvYWRQYXRoCiAgICAgIH07CiAgICB9KTsKICAgIHN0YXRlLmNvbnRhY3RUb3RhbCA9IGRhdGEudG90YWw7CiAgfSwKICBzZXRPcGVuUGFnZTogZnVuY3Rpb24gc2V0T3BlblBhZ2Uoc3RhdGUsIGRhdGEpIHsKICAgIHN0YXRlLm9wZW5QYWdlID0gZGF0YTsKICB9LAogIHNldExpc3RDaGF0TWVzc2VnZXM6IGZ1bmN0aW9uIHNldExpc3RDaGF0TWVzc2VnZXMoc3RhdGUsIGRhdGEpIHsKICAgIHN0YXRlLmNoYXRMaXN0TWVzc2FnZXMgPSBkYXRhLmxpc3Q7CiAgICBzdGF0ZS5jaGF0VG90YWxNZXNzYWdlcyA9IGRhdGEudG90YWw7CiAgfSwKICBzZXRMaXN0R3JvdXBDaGF0TWVzc2VnZXM6IGZ1bmN0aW9uIHNldExpc3RHcm91cENoYXRNZXNzZWdlcyhzdGF0ZSwgZGF0YSkgewogICAgc3RhdGUuZ3JvdXBDaGF0TGlzdE1lc3NhZ2VzID0gZGF0YS5saXN0OwogICAgc3RhdGUuZ3JvdXBDaGF0VG90YWxNZXNzYWdlcyA9IGRhdGEudG90YWw7CiAgfSwKICBwdXNoSXRlbXM6IGZ1bmN0aW9uIHB1c2hJdGVtcyhzdGF0ZSwgZGF0YSkgewogICAgc3RhdGUuY2hhdExpc3RNZXNzYWdlcyA9IGRhdGEuY29uY2F0KHN0YXRlLmNoYXRMaXN0TWVzc2FnZXMpOwogIH0sCiAgcHVzaEdyb3VwSXRlbXM6IGZ1bmN0aW9uIHB1c2hHcm91cEl0ZW1zKHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5ncm91cENoYXRMaXN0TWVzc2FnZXMgPSBkYXRhLmNvbmNhdChzdGF0ZS5ncm91cENoYXRMaXN0TWVzc2FnZXMpOwogIH0sCiAgcHVzaENoYXRMaXN0OiBmdW5jdGlvbiBwdXNoQ2hhdExpc3Qoc3RhdGUsIGRhdGEpIHsKICAgIGlmIChzdGF0ZS5DSEFUICYmIHN0YXRlLkNIQVQuaWQgPT0gZGF0YS5jaGF0SWQpIHsKICAgICAgaWYgKGRhdGEuZXh0cmEgPT09ICdkZWxldGUnKSB7CiAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuY2hhdExpc3RNZXNzYWdlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlLmlkID09IGRhdGEuZGVsZXRlSWQ7CiAgICAgICAgfSk7CiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICAgIHN0YXRlLmNoYXRMaXN0TWVzc2FnZXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5leHRyYSA9PT0gJ3VwZGF0ZScpIHsKICAgICAgICB2YXIgX2luZGV4ID0gc3RhdGUuY2hhdExpc3RNZXNzYWdlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlLmlkID09IGRhdGEuZWRpdGVkTWVzc2FnZS5pZDsKICAgICAgICB9KTsKICAgICAgICBpZiAoX2luZGV4ID4gLTEpIHsKICAgICAgICAgIHN0YXRlLmNoYXRMaXN0TWVzc2FnZXNbX2luZGV4XS5tZXNzYWdlID0gZGF0YS5lZGl0ZWRNZXNzYWdlLm1lc3NhZ2U7CiAgICAgICAgICBzdGF0ZS5jaGF0TGlzdE1lc3NhZ2VzW19pbmRleF0uZWRpdGVkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIF9pbmRleDIgPSBzdGF0ZS5jaGF0TGlzdE1lc3NhZ2VzLmZpbmRJbmRleChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGUuaWQgPT0gZGF0YS5pZDsKICAgICAgICB9KTsKICAgICAgICBpZiAoIV9pbmRleDIgfHwgX2luZGV4MiA8PSAtMSkgewogICAgICAgICAgc3RhdGUuY2hhdExpc3RNZXNzYWdlcy5wdXNoKGRhdGEpOwogICAgICAgICAgc3RhdGUuY2hhdFRvdGFsTWVzc2FnZXMrKzsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIHB1c2hDb3VudDogZnVuY3Rpb24gcHVzaENvdW50KHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5jaGF0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgIGlmIChlbGVtZW50LmlkID09PSBkYXRhLmNoYXRJZCkgewogICAgICAgIGJ1cy4kc2V0KGVsZW1lbnQsICJjb3VudCIsIGVsZW1lbnQuY291bnQrKyk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgcHVzaEdyb3VwQ2hhdExpc3Q6IGZ1bmN0aW9uIHB1c2hHcm91cENoYXRMaXN0KHN0YXRlLCBkYXRhKSB7CiAgICBpZiAoc3RhdGUuQ0hBVCAmJiBzdGF0ZS5DSEFULmlkID09IGRhdGEuZ3JvdXBDaGF0SWQpIHsKICAgICAgaWYgKGRhdGEuZXh0cmEgPT09ICJ1bnJlYWQiKSB7CiAgICAgICAgc3RhdGUuZ3JvdXBDaGF0TGlzdE1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgIGlmIChlbGVtZW50LmlkID09IGRhdGEudW5yZWFkSWQpIHsKICAgICAgICAgICAgZWxlbWVudC5pc1JlYWQgPSAiUkVBRCI7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5leHRyYSA9PT0gImRlbGV0ZSIpIHsKICAgICAgICB2YXIgaW5kZXggPSBzdGF0ZS5ncm91cENoYXRMaXN0TWVzc2FnZXMuZmluZEluZGV4KGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZS5pZCA9PSBkYXRhLmRlbGV0ZUlkOwogICAgICAgIH0pOwogICAgICAgIGlmIChpbmRleCA+IC0xKSB7CiAgICAgICAgICBzdGF0ZS5ncm91cENoYXRMaXN0TWVzc2FnZXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5leHRyYSA9PT0gInVwZGF0ZSIpIHsKICAgICAgICB2YXIgX2luZGV4MyA9IHN0YXRlLmdyb3VwQ2hhdExpc3RNZXNzYWdlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlLmlkID09IGRhdGEuZWRpdGVkR3JvdXBNZXNzYWdlLmlkOwogICAgICAgIH0pOwogICAgICAgIGlmIChfaW5kZXgzID4gLTEpIHsKICAgICAgICAgIHN0YXRlLmdyb3VwQ2hhdExpc3RNZXNzYWdlc1tfaW5kZXgzXS5tZXNzYWdlID0gZGF0YS5lZGl0ZWRHcm91cE1lc3NhZ2UubWVzc2FnZTsKICAgICAgICAgIHN0YXRlLmdyb3VwQ2hhdExpc3RNZXNzYWdlc1tfaW5kZXgzXS5lZGl0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgX2luZGV4NCA9IHN0YXRlLmdyb3VwQ2hhdExpc3RNZXNzYWdlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlLmlkID09IGRhdGEuaWQ7CiAgICAgICAgfSk7CiAgICAgICAgaWYgKF9pbmRleDQgPD0gLTEpIHsKICAgICAgICAgIHN0YXRlLmdyb3VwQ2hhdExpc3RNZXNzYWdlcy5wdXNoKGRhdGEpOwogICAgICAgICAgc3RhdGUuZ3JvdXBDaGF0VG90YWxNZXNzYWdlcysrOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgcHVzaEdyb3VwQ291bnQ6IGZ1bmN0aW9uIHB1c2hHcm91cENvdW50KHN0YXRlLCBkYXRhKSB7CiAgICBpZiAoZGF0YS5leHRyYSA9PT0gInVucmVhZCIpIHt9IGVsc2UgaWYgKGRhdGEuZXh0cmEgPT09ICJkZWxldGUiKSB7fSBlbHNlIGlmIChkYXRhLmV4dHJhID09PSAidXBkYXRlIikge30gZWxzZSB7CiAgICAgIHN0YXRlLmdyb3VwQ2hhdExpc3QuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgIGlmIChlbGVtZW50LmlkID09PSBkYXRhLmNoYXRJZCkgewogICAgICAgICAgYnVzLiRzZXQoZWxlbWVudCwgImNvdW50IiwgZWxlbWVudC5jb3VudCsrKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgcmVtb3Y6IGZ1bmN0aW9uIHJlbW92KHN0YXRlKSB7CiAgICBzdGF0ZS5jaGF0TGlzdE1lc3NhZ2VzLnNwbGljZSgtMSwgMSk7CiAgfQp9OwpleHBvcnQgdmFyIGFjdGlvbnMgPSB7CiAgc2V0Q2hhdE1lc3NhZ2VNYWtlUmVhZDogZnVuY3Rpb24gc2V0Q2hhdE1lc3NhZ2VNYWtlUmVhZChfcmVmLCBkYXRhKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBjb21taXQoJ3NldENoYXRNZXNzYWdlTWFrZVJlYWQnLCBKU09OLnBhcnNlKGRhdGEuYm9keSkpOwogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBnZXRVbnJlYWRNZXNzYWdlczogZnVuY3Rpb24gZ2V0VW5yZWFkTWVzc2FnZXMoc3QpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgbWVzc2VuZ2VyU2VydmljZS5nZXRVbnJlYWRNZXNzYWdlcygpLnRoZW4oZnVuY3Rpb24gKHJzKSB7CiAgICAgICAgICAgICAgc3QuY29tbWl0KCdzZXRDaGF0VW5yZWFkTWVzc2FnQ291bnQnLCBycy5kYXRhKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0sCiAgc2VuZEFubm91bmNlbWVudERvY3VtZW50TWFya2luZzogZnVuY3Rpb24gc2VuZEFubm91bmNlbWVudERvY3VtZW50TWFya2luZyhzdCwgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBzdC5kaXNwYXRjaCgic3RvbXBDbGllbnRTZW5kTWVzc2FnZSIsIHsKICAgICAgICAgICAgICBzdG9tcENsaWVudDogZ2xvYmFsU3RvbXBDbGllbnQsCiAgICAgICAgICAgICAgZW5kcG9pbnQ6ICIvYXBwL2Fubm91bmNlbWVudERvY3VtZW50TWFya2luZyIsCiAgICAgICAgICAgICAgbWVzc2FnZTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMpOwogICAgfSkpKCk7CiAgfSwKICBzZXRDaGF0VW5yZWFkQ291bnQ6IGZ1bmN0aW9uIHNldENoYXRVbnJlYWRDb3VudChfcmVmMiwgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgIHZhciBjb21taXQ7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgnc2V0Q2hhdFVucmVhZENvdW50JywgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQpOwogICAgfSkpKCk7CiAgfSwKICBzZXRDaGF0VW5yZWFkTWVzc2FnQ291bnQ6IGZ1bmN0aW9uIHNldENoYXRVbnJlYWRNZXNzYWdDb3VudChfcmVmMywgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgIHZhciBjb21taXQ7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0Q2hhdFVucmVhZE1lc3NhZ0NvdW50IiwgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTUpOwogICAgfSkpKCk7CiAgfSwKICBzZXREb2N1bWVudE1hcmtpbmc6IGZ1bmN0aW9uIHNldERvY3VtZW50TWFya2luZyhfcmVmNCwgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgIHZhciBjb21taXQ7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmNC5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0TWFya2V0aW5nIiwgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTYpOwogICAgfSkpKCk7CiAgfSwKICBzZXROb3RpZmljYXRpb25Nc2c6IGZ1bmN0aW9uIHNldE5vdGlmaWNhdGlvbk1zZyhfcmVmNSwgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgIHZhciBjb21taXQ7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmNS5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0Tm90aWZpY2F0aW9uIiwgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTcpOwogICAgfSkpKCk7CiAgfSwKICBzZXRDb21tZW50VGFzazogZnVuY3Rpb24gc2V0Q29tbWVudFRhc2soX3JlZjYsIGRhdGEpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29tbWl0ID0gX3JlZjYuY29tbWl0OwogICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldENvbW1lbnRzIiwgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTgpOwogICAgfSkpKCk7CiAgfSwKICBzZXRJbmNvbWluZ1BlcnNvbjogZnVuY3Rpb24gc2V0SW5jb21pbmdQZXJzb24oX3JlZjcsIGRhdGEpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgICB2YXIgY29tbWl0LCBwYXJzZWQ7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmNy5jb21taXQ7CiAgICAgICAgICAgIHBhcnNlZCA9IEpTT04ucGFyc2UoZGF0YS5ib2R5KTsKICAgICAgICAgICAgaWYgKCEocGFyc2VkLmRldmljZU5hbWUgPT09ICdlbnRlcicpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0SW5jb21pbmdQZXJzb24iLCBwYXJzZWQpOwogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDk7CiAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldEV4aXRpbmdQZXJzb24iLCBwYXJzZWQpOwogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlOSk7CiAgICB9KSkoKTsKICB9LAogIHNldEdyb3VwVXBkYXRlOiBmdW5jdGlvbiBzZXRHcm91cFVwZGF0ZShfcmVmOCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY4LmNvbW1pdDsKICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0R3JvdXBVcGRhdGVFIiwgZmFsc2UpOwogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTEwKTsKICAgIH0pKSgpOwogIH0sCiAgc2V0TWVzc2FnZTogZnVuY3Rpb24gc2V0TWVzc2FnZShfcmVmOSwgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY5LmNvbW1pdDsKICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgicHVzaENoYXRMaXN0IiwgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxMSk7CiAgICB9KSkoKTsKICB9LAogIHNldEdyb3VwTWVzc2FnZTogZnVuY3Rpb24gc2V0R3JvdXBNZXNzYWdlKF9yZWYxMCwgZGF0YSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEyKCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMC5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBjb21taXQoInB1c2hHcm91cENvdW50IiwgSlNPTi5wYXJzZShkYXRhLmJvZHkpKTsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgicHVzaEdyb3VwQ2hhdExpc3QiLCBKU09OLnBhcnNlKGRhdGEuYm9keSkpOwogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTEyKTsKICAgIH0pKSgpOwogIH0sCiAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKHN0LCBkYXRhKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMoKSB7CiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMTMkKF9jb250ZXh0MTMpIHsKICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgc3QuZGlzcGF0Y2goInN0b21wQ2xpZW50U2VuZE1lc3NhZ2UiLCB7CiAgICAgICAgICAgICAgc3RvbXBDbGllbnQ6IGdsb2JhbFN0b21wQ2xpZW50LAogICAgICAgICAgICAgIGVuZHBvaW50OiAiL2FwcC9zZW5kTWVzc2FnZSIsCiAgICAgICAgICAgICAgbWVzc2FnZTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxMyk7CiAgICB9KSkoKTsKICB9LAogIHNlbmRNZXNzYWdlR3JvdXA6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlR3JvdXAoc3QsIGRhdGEpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNCgpIHsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNCQoX2NvbnRleHQxNCkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTQucHJldiA9IF9jb250ZXh0MTQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBzdC5kaXNwYXRjaCgic3RvbXBDbGllbnRTZW5kTWVzc2FnZSIsIHsKICAgICAgICAgICAgICBzdG9tcENsaWVudDogZ2xvYmFsU3RvbXBDbGllbnQsCiAgICAgICAgICAgICAgZW5kcG9pbnQ6ICIvYXBwL3NlbmRHcm91cE1lc3NhZ2UiLAogICAgICAgICAgICAgIG1lc3NhZ2U6IGRhdGEKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMTQpOwogICAgfSkpKCk7CiAgfSwKICBhbGxVbnJlYWRNZXNzYWdlczogZnVuY3Rpb24gYWxsVW5yZWFkTWVzc2FnZXMoc3QpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNSgpIHsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNSQoX2NvbnRleHQxNSkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBzdC5kaXNwYXRjaCgic3RvbXBDbGllbnRTZW5kTWVzc2FnZSIsIHsKICAgICAgICAgICAgICBzdG9tcENsaWVudDogZ2xvYmFsU3RvbXBDbGllbnQsCiAgICAgICAgICAgICAgZW5kcG9pbnQ6ICIvYXBwL2FsbFVucmVhZE1lc3NhZ2VzIiwKICAgICAgICAgICAgICBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICB1c2VyX2lkOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ1c2VyX2lkIikpCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMTUpOwogICAgfSkpKCk7CiAgfSwKICBvbkxvYWQ6IGZ1bmN0aW9uIG9uTG9hZChzdCkgewogICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMjUoKSB7CiAgICAgIHZhciB1c3IsIHVzZXJuYW1lLCBmdWxsTmFtZTsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNSQoX2NvbnRleHQyNSkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MjUucHJldiA9IF9jb250ZXh0MjUubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICB1c3IgPSBfYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50c1sxXSA6IG51bGw7CiAgICAgICAgICAgIHVzZXJuYW1lID0gbnVsbCwgZnVsbE5hbWUgPSBudWxsOwogICAgICAgICAgICBpZiAoIXVzcikgewogICAgICAgICAgICAgIHVzZXJuYW1lID0gVG9rZW5TZXJ2aWNlLmdldFVzZXJJbmZvKCkgPyBUb2tlblNlcnZpY2UuZ2V0VXNlckluZm8oKS51c2VybmFtZSA6IG51bGw7CiAgICAgICAgICAgICAgZnVsbE5hbWUgPSBUb2tlblNlcnZpY2UuZ2V0VXNlckluZm8oKSA/IFRva2VuU2VydmljZS5nZXRVc2VySW5mbygpLmVtcGxveWVlRnVsbE5hbWUgOiBudWxsOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHVzZXJuYW1lID0gdXNyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxldCBvd25lcklkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidXNlcl9pZCIpKTsKICAgICAgICAgICAgaWYgKHVzZXJuYW1lIHx8IGZ1bGxOYW1lKSB7CiAgICAgICAgICAgICAgaWYgKHVzciA9PT0gJ3NlY3VyaXR5JykgewogICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goImNvbm5lY3QiKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInN0b21wU3Vic2NyaWJlIiwgewogICAgICAgICAgICAgICAgICAgIHN0b21wQ2xpZW50OiBnbG9iYWxTdG9tcENsaWVudCwKICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogIi91c2VyL3NlY3VyaXR5L2luY29taW5nUGVyc29uIiwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9jYWxsYmFjayA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE2KGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNikgewogICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTYucHJldiA9IF9jb250ZXh0MTYubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdC5kaXNwYXRjaCgic2V0SW5jb21pbmdQZXJzb24iLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxNik7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhfeCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2s7CiAgICAgICAgICAgICAgICAgICAgfSgpCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJjb25uZWN0IikudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxMSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE3KHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE3JChfY29udGV4dDE3KSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDE3LnByZXYgPSBfY29udGV4dDE3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJzdG9tcENsaWVudFNlbmRNZXNzYWdlIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvbXBDbGllbnQ6IGdsb2JhbFN0b21wQ2xpZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQ6ICIvYXBwL3JlZ2lzdGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHVzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTE3KTsKICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMTEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJzdG9tcFN1YnNjcmliZSIsIHsKICAgICAgICAgICAgICAgICAgICBzdG9tcENsaWVudDogZ2xvYmFsU3RvbXBDbGllbnQsCiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQ6ICIvdXNlci8iLmNvbmNhdCh1c2VybmFtZSwgIi9tc2ciKSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9jYWxsYmFjazIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxOChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMTgkKF9jb250ZXh0MTgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDE4LnByZXYgPSBfY29udGV4dDE4Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInNldE1lc3NhZ2UiLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxOCk7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhfeDMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jYWxsYmFjazIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICB9KCkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInN0b21wU3Vic2NyaWJlIiwgewogICAgICAgICAgICAgICAgICAgIHN0b21wQ2xpZW50OiBnbG9iYWxTdG9tcENsaWVudCwKICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogIi91c2VyLyIuY29uY2F0KHVzZXJuYW1lLCAiL2dyb3VwTXNnIiksCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfY2FsbGJhY2szID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTkoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE5JChfY29udGV4dDE5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxOS5wcmV2ID0gX2NvbnRleHQxOS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJzZXRHcm91cE1lc3NhZ2UiLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxOSk7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhfeDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jYWxsYmFjazMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICB9KCkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInN0b21wU3Vic2NyaWJlIiwgewogICAgICAgICAgICAgICAgICAgIHN0b21wQ2xpZW50OiBnbG9iYWxTdG9tcENsaWVudCwKICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogIi91c2VyLyIuY29uY2F0KHVzZXJuYW1lLCAiL2RvY3VtZW50TWFya2luZyIpLAogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX2NhbGxiYWNrNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIwKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyMCQoX2NvbnRleHQyMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MjAucHJldiA9IF9jb250ZXh0MjAubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdC5kaXNwYXRjaCgic2V0RG9jdW1lbnRNYXJraW5nIiwgZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMjApOwogICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soX3g1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY2FsbGJhY2s0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2s7CiAgICAgICAgICAgICAgICAgICAgfSgpCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJzdG9tcFN1YnNjcmliZSIsIHsKICAgICAgICAgICAgICAgICAgICBzdG9tcENsaWVudDogZ2xvYmFsU3RvbXBDbGllbnQsCiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQ6ICIvdXNlci8iLmNvbmNhdCh1c2VybmFtZSwgIi9ub3RpZmljYXRpb25Nc2ciKSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9jYWxsYmFjazUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMShkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMjEkKF9jb250ZXh0MjEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIxLnByZXYgPSBfY29udGV4dDIxLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInNldE5vdGlmaWNhdGlvbk1zZyIsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdC5kaXNwYXRjaCgic2V0Q291bnQiLCBudWxsLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyMSk7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhfeDYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jYWxsYmFjazUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICB9KCkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLy8gLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgLy8gICAgIHN0LmRpc3BhdGNoKCJzdG9tcFN1YnNjcmliZSIsIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgc3RvbXBDbGllbnQ6IGdsb2JhbFN0b21wQ2xpZW50LAogICAgICAgICAgICAgICAgLy8gICAgICAgICBlbmRwb2ludDogYC91c2VyLyR7ZnVsbE5hbWV9L2NvbW1lbnRNZ3NgLAogICAgICAgICAgICAgICAgLy8gICAgICAgICBjYWxsYmFjazogYXN5bmMgKGRhdGEpID0+IHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJzZXRDb21tZW50VGFzayIsIGRhdGEpOwogICAgICAgICAgICAgICAgLy8gICAgICAgICB9LAogICAgICAgICAgICAgICAgLy8gICAgIH0pOwogICAgICAgICAgICAgICAgLy8gfSkKICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInN0b21wU3Vic2NyaWJlIiwgewogICAgICAgICAgICAgICAgICAgIHN0b21wQ2xpZW50OiBnbG9iYWxTdG9tcENsaWVudCwKICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogIi91c2VyLyIuY29uY2F0KHVzZXJuYW1lLCAiL3VucmVhZE1lc3NhZ2VzIiksCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfY2FsbGJhY2s2ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMjIoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIyJChfY29udGV4dDIyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyMi5wcmV2ID0gX2NvbnRleHQyMi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0LmRpc3BhdGNoKCJzZXRDaGF0VW5yZWFkTWVzc2FnQ291bnQiLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIyLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyMik7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhfeDcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jYWxsYmFjazYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICB9KCkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInN0b21wU3Vic2NyaWJlIiwgewogICAgICAgICAgICAgICAgICAgIHN0b21wQ2xpZW50OiBnbG9iYWxTdG9tcENsaWVudCwKICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogIi91c2VyLyIuY29uY2F0KHVzZXJuYW1lLCAiL3VucmVhZE1lc3NhZ2UiKSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9jYWxsYmFjazcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMyhkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMjMkKF9jb250ZXh0MjMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIzLnByZXYgPSBfY29udGV4dDIzLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInNldENoYXRVbnJlYWRDb3VudCIsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIzKTsKICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKF94OCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NhbGxiYWNrNy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrOwogICAgICAgICAgICAgICAgICAgIH0oKQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBzdC5kaXNwYXRjaCgic3RvbXBTdWJzY3JpYmUiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RvbXBDbGllbnQ6IGdsb2JhbFN0b21wQ2xpZW50LAogICAgICAgICAgICAgICAgICAgIGVuZHBvaW50OiAiL3VzZXIvIi5jb25jYXQodXNlcm5hbWUsICIvbWFrZVJlYWQiKSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9jYWxsYmFjazggPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMjQkKF9jb250ZXh0MjQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDI0LnByZXYgPSBfY29udGV4dDI0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3QuZGlzcGF0Y2goInNldENoYXRNZXNzYWdlTWFrZVJlYWQiLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyNCk7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhfeDkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jYWxsYmFjazguYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICB9KCkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI1LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyNSk7CiAgICB9KSkoKTsKICB9LAogIGNvbm5lY3Q6IGZ1bmN0aW9uIGNvbm5lY3QoX3JlZjEyKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjEyLmNvbW1pdDsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIGdsb2JhbFN0b21wQ2xpZW50ID0gU3RvbXAub3ZlcihuZXcgU29ja0pTKCIiLmNvbmNhdChwcm9jZXNzLmVudi5WVUVfQVBQX1dFQlNPQ0tFVF9BUEksICIvZ3MtZ3VpZGUtd2Vic29ja2V0IikpKTsKICAgICAgaWYgKGdsb2JhbFN0b21wQ2xpZW50KSB7CiAgICAgICAgZ2xvYmFsU3RvbXBDbGllbnQuaGFzRGVidWcgPSBmYWxzZTsKICAgICAgfQogICAgICBnbG9iYWxTdG9tcENsaWVudC5jb25uZWN0KHt9LCBmdW5jdGlvbiAoZnJhbWUpIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZShnbG9iYWxTdG9tcENsaWVudCk7CiAgICAgIH0pOwogICAgfSk7CiAgfSwKICBzdG9tcENsaWVudFNlbmRNZXNzYWdlOiBmdW5jdGlvbiBzdG9tcENsaWVudFNlbmRNZXNzYWdlKHN0LCBfcmVmMTMpIHsKICAgIHZhciBzdG9tcENsaWVudCA9IF9yZWYxMy5zdG9tcENsaWVudCwKICAgICAgZW5kcG9pbnQgPSBfcmVmMTMuZW5kcG9pbnQsCiAgICAgIG1lc3NhZ2UgPSBfcmVmMTMubWVzc2FnZTsKICAgIHN0b21wQ2xpZW50LnNlbmQoZW5kcG9pbnQsIG1lc3NhZ2UpOwogIH0sCiAgc3RvbXBTdWJzY3JpYmU6IGZ1bmN0aW9uIHN0b21wU3Vic2NyaWJlKHN0LCBfcmVmMTQpIHsKICAgIHZhciBzdG9tcENsaWVudCA9IF9yZWYxNC5zdG9tcENsaWVudCwKICAgICAgZW5kcG9pbnQgPSBfcmVmMTQuZW5kcG9pbnQsCiAgICAgIGNhbGxiYWNrID0gX3JlZjE0LmNhbGxiYWNrOwogICAgc3RvbXBDbGllbnQuc3Vic2NyaWJlKGVuZHBvaW50LCBjYWxsYmFjayk7CiAgICByZXR1cm4gc3RvbXBDbGllbnQ7CiAgfSwKICBnZXRCeUNoYXRJZDogZnVuY3Rpb24gZ2V0QnlDaGF0SWQoX3JlZjE1LCBwYXJhbXMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNigpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzOwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTI2JChfY29udGV4dDI2KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyNi5wcmV2ID0gX2NvbnRleHQyNi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxNS5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0MjYucHJldiA9IDE7CiAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiBtZXNzZW5nZXJTZXJ2aWNlLmdldEJ5Q2hhdElkKHBhcmFtcyk7CiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0MjYuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gNzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0TGlzdENoYXRNZXNzZWdlcyIsIHJlcy5kYXRhID8gcmVzLmRhdGEgOiB7CiAgICAgICAgICAgICAgbGlzdDogW10sCiAgICAgICAgICAgICAgdG90YWw6IDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDEzOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgX2NvbnRleHQyNi5wcmV2ID0gOTsKICAgICAgICAgICAgX2NvbnRleHQyNi50MCA9IF9jb250ZXh0MjZbImNhdGNoIl0oMSk7CiAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDEzOwogICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRMaXN0Q2hhdE1lc3NlZ2VzIiwgewogICAgICAgICAgICAgIGxpc3Q6IFtdLAogICAgICAgICAgICAgIHRvdGFsOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyNiwgbnVsbCwgW1sxLCA5XV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRCeUdyb3VwQ2hhdElkOiBmdW5jdGlvbiBnZXRCeUdyb3VwQ2hhdElkKF9yZWYxNiwgcGFyYW1zKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMjcoKSB7CiAgICAgIHZhciBjb21taXQsIHJlczsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNyQoX2NvbnRleHQyNykgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MjcucHJldiA9IF9jb250ZXh0MjcubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmMTYuY29tbWl0OwogICAgICAgICAgICBfY29udGV4dDI3LnByZXYgPSAxOwogICAgICAgICAgICBfY29udGV4dDI3Lm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gbWVzc2VuZ2VyU2VydmljZS5nZXRCeUdyb3VwQ2hhdElkKHBhcmFtcyk7CiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mjcuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQyNy5uZXh0ID0gNzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0TGlzdEdyb3VwQ2hhdE1lc3NlZ2VzIiwgcmVzLmRhdGEgPyByZXMuZGF0YSA6IHsKICAgICAgICAgICAgICBsaXN0OiBbXSwKICAgICAgICAgICAgICB0b3RhbDogMAogICAgICAgICAgICB9KTsKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQyNy5uZXh0ID0gMTM7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBfY29udGV4dDI3LnByZXYgPSA5OwogICAgICAgICAgICBfY29udGV4dDI3LnQwID0gX2NvbnRleHQyN1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgX2NvbnRleHQyNy5uZXh0ID0gMTM7CiAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldExpc3RHcm91cENoYXRNZXNzZWdlcyIsIHsKICAgICAgICAgICAgICBsaXN0OiBbXSwKICAgICAgICAgICAgICB0b3RhbDogMAogICAgICAgICAgICB9KTsKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNy5zdG9wKCk7CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMjcsIG51bGwsIFtbMSwgOV1dKTsKICAgIH0pKSgpOwogIH0sCiAgZ2V0Q29udGFjdExpc3Q6IGZ1bmN0aW9uIGdldENvbnRhY3RMaXN0KF9yZWYxNywgcGFyYW1zKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMjgoKSB7CiAgICAgIHZhciBjb21taXQsIHJlczsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyOCQoX2NvbnRleHQyOCkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MjgucHJldiA9IF9jb250ZXh0MjgubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmMTcuY29tbWl0OwogICAgICAgICAgICBfY29udGV4dDI4LnByZXYgPSAxOwogICAgICAgICAgICBfY29udGV4dDI4Lm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gbWVzc2VuZ2VyU2VydmljZS5nZXRDb250YWN0TGlzdChwYXJhbXMpOwogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICByZXMgPSBfY29udGV4dDI4LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0MjgubmV4dCA9IDc7CiAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldExpc3RSZXNwb25zZSIsIHJlcy5kYXRhID8gcmVzLmRhdGEgOiB7CiAgICAgICAgICAgICAgbGlzdDogW10sCiAgICAgICAgICAgICAgdG90YWw6IDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0MjgubmV4dCA9IDEzOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgX2NvbnRleHQyOC5wcmV2ID0gOTsKICAgICAgICAgICAgX2NvbnRleHQyOC50MCA9IF9jb250ZXh0MjhbImNhdGNoIl0oMSk7CiAgICAgICAgICAgIF9jb250ZXh0MjgubmV4dCA9IDEzOwogICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRMaXN0UmVzcG9uc2UiLCB7CiAgICAgICAgICAgICAgbGlzdDogW10sCiAgICAgICAgICAgICAgdG90YWw6IDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mjguc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTI4LCBudWxsLCBbWzEsIDldXSk7CiAgICB9KSkoKTsKICB9LAogIGdldEdyb3VwQ2hhdExpc3Q6IGZ1bmN0aW9uIGdldEdyb3VwQ2hhdExpc3QoX3JlZjE4LCBwYXJhbXMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyOSgpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzOwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTI5JChfY29udGV4dDI5KSB7CiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyOS5wcmV2ID0gX2NvbnRleHQyOS5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxOC5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0MjkucHJldiA9IDE7CiAgICAgICAgICAgIF9jb250ZXh0MjkubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiBtZXNzZW5nZXJTZXJ2aWNlLmdyb3VwQ2hhdExpc3QocGFyYW1zKTsKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyOS5zZW50OwogICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSA3OwogICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRMaXN0UmVzcG9uc2VHcm91cENoYXQiLCByZXMuZGF0YSA/IHJlcy5kYXRhIDogewogICAgICAgICAgICAgIGxpc3Q6IFtdLAogICAgICAgICAgICAgIHRvdGFsOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSAxMzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgIF9jb250ZXh0MjkucHJldiA9IDk7CiAgICAgICAgICAgIF9jb250ZXh0MjkudDAgPSBfY29udGV4dDI5WyJjYXRjaCJdKDEpOwogICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSAxMzsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0TGlzdFJlc3BvbnNlR3JvdXBDaGF0IiwgewogICAgICAgICAgICAgIGxpc3Q6IFtdLAogICAgICAgICAgICAgIHRvdGFsOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI5LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyOSwgbnVsbCwgW1sxLCA5XV0pOwogICAgfSkpKCk7CiAgfQp9Ow=="},{"version":3,"names":["TokenService","messengerService","SockJS","Stomp","Vue","globalStompClient","state","marketing","notification","contactList","contactTotal","groupChatList","groupChatTotal","comments","commentsTotal","openPage","chatListMessages","chatTotalMessages","groupChatListMessages","groupChatTotalMessages","lastMessage","lastMessageGroup","groupUpdate","groupUpdateMsg","incomingPerson","exitingPerson","chatUnreadCount","unreadData","CHAT","mutations","setCurrentChat","data","setChatMessageMakeRead","id","index","findIndex","e","set","setChatUnreadMessagCount","count","setChatUnreadCount","setComments","setIncomingPerson","setExitingPerson","setMarketing","setNotification","setGroupUpdateE","setGroupChatUpdate","setListResponseGroupChat","list","total","setListResponse","map","firstName","lastName","employeeId","chatId","uploadPath","setOpenPage","setListChatMesseges","setListGroupChatMesseges","pushItems","concat","pushGroupItems","pushChatList","extra","deleteId","splice","editedMessage","message","edited","push","pushCount","chatList","forEach","element","bus","$set","pushGroupChatList","groupChatId","unreadId","isRead","editedGroupMessage","pushGroupCount","remov","actions","commit","JSON","parse","body","getUnreadMessages","st","then","rs","sendAnnouncementDocumentMarking","dispatch","stompClient","endpoint","setDocumentMarking","setNotificationMsg","setCommentTask","parsed","deviceName","setGroupUpdate","setMessage","setGroupMessage","sendMessage","sendMessageGroup","allUnreadMessages","stringify","user_id","localStorage","getItem","onLoad","usr","username","fullName","getUserInfo","employeeFullName","callback","s","root","connect","Promise","resolve","reject","over","process","env","VUE_APP_WEBSOCKET_API","hasDebug","frame","stompClientSendMessage","send","stompSubscribe","subscribe","getByChatId","params","res","getByGroupChatId","getContactList","getGroupChatList"],"sources":["C:/ACRU PROJECT/Fair Tech/acru-frontend/src/state/modules/messenger.js"],"sourcesContent":["import { TokenService } from \"@/shared/services/storage.service\"\r\nimport messengerService from \"@/shared/services/messengerService\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"webstomp-client\";\r\nimport Vue from \"vue\"\r\nlet globalStompClient = null;\r\nexport const state = {\r\n  marketing: null,\r\n  notification: null,\r\n  contactList: [],\r\n  contactTotal: 0,\r\n  groupChatList: [],\r\n  groupChatTotal: 0,\r\n  comments: [],\r\n  commentsTotal: 0,\r\n  openPage: \"default\",\r\n  chatListMessages: [],\r\n  chatTotalMessages: 0,\r\n  groupChatListMessages: [],\r\n  groupChatTotalMessages: 0,\r\n  lastMessage: {},\r\n  lastMessageGroup: {},\r\n  groupUpdate: false,\r\n  groupUpdateMsg: null,\r\n  incomingPerson: null,\r\n  exitingPerson: null,\r\n  chatUnreadCount: 0,\r\n  unreadData: null,\r\n  CHAT: null\r\n}\r\nexport const mutations = {\r\n  setCurrentChat(state, data) {\r\n    state.CHAT = data\r\n  },\r\n  setChatMessageMakeRead(state, id) {\r\n    let index = state.chatListMessages.findIndex(e => e.id == id)\r\n    if (index > -1) {\r\n      Vue.set(state.chatListMessages[index], \"isRead\", \"READ\")\r\n    }\r\n  },\r\n  setChatUnreadMessagCount(state, count) {\r\n    state.chatUnreadCount = count\r\n    if (count > 0) {\r\n      // playSound()\r\n    }\r\n  },\r\n  setChatUnreadCount(state, data) {\r\n    state.unreadData = data\r\n  },\r\n  setComments(state, data) {\r\n    state.comments = data\r\n  },\r\n  setIncomingPerson(state, data) {\r\n    state.incomingPerson = data\r\n  },\r\n  setExitingPerson(state, data) {\r\n    state.exitingPerson = data\r\n  },\r\n  setMarketing(state, data) {\r\n    state.marketing = data\r\n  },\r\n  setNotification(state, data) {\r\n    state.notification = data\r\n  },\r\n  setGroupUpdateE(state, data) {\r\n    state.groupUpdate = data;\r\n  },\r\n  setGroupChatUpdate(state, data) {\r\n    state.groupUpdate = true;\r\n    state.groupUpdateMsg = data;\r\n  },\r\n  setListResponseGroupChat(state, data) {\r\n    state.groupChatList = data.list;\r\n    state.groupChatTotal = data.total;\r\n  },\r\n  setListResponse(state, data) {\r\n    state.contactList = data.list.map(e => {\r\n      return {\r\n        firstName: e.firstName,\r\n        lastName: e.lastName,\r\n        employeeId: e.employeeId,\r\n        chatId: e.chatId,\r\n        uploadPath: e.uploadPath\r\n      }\r\n    })\r\n    state.contactTotal = data.total;\r\n  },\r\n  setOpenPage(state, data) {\r\n    state.openPage = data;\r\n  },\r\n  setListChatMesseges(state, data) {\r\n    state.chatListMessages = data.list;\r\n    state.chatTotalMessages = data.total;\r\n  },\r\n  setListGroupChatMesseges(state, data) {\r\n    state.groupChatListMessages = data.list;\r\n    state.groupChatTotalMessages = data.total;\r\n  },\r\n  pushItems(state, data) {\r\n    state.chatListMessages = data.concat(state.chatListMessages)\r\n  },\r\n  pushGroupItems(state, data) {\r\n    state.groupChatListMessages = data.concat(state.groupChatListMessages)\r\n  },\r\n  pushChatList(state, data) {\r\n    if (state.CHAT && state.CHAT.id == data.chatId) {\r\n      if (data.extra === 'delete') {\r\n        const index = state.chatListMessages.findIndex(e => e.id == data.deleteId)\r\n        if (index > -1) {\r\n          state.chatListMessages.splice(index, 1);\r\n        }\r\n      } else if (data.extra === 'update') {\r\n        const index = state.chatListMessages.findIndex(e => e.id == data.editedMessage.id)\r\n        if (index > -1) {\r\n          state.chatListMessages[index].message = data.editedMessage.message\r\n          state.chatListMessages[index].edited = true\r\n        }\r\n      } else {\r\n        let index = state.chatListMessages.findIndex(e => e.id == data.id)\r\n        if (!index || index <= -1) {\r\n          state.chatListMessages.push(data)\r\n          state.chatTotalMessages++\r\n        }\r\n      }\r\n    }\r\n  },\r\n  pushCount(state, data) {\r\n    state.chatList.forEach((element) => {\r\n      if (element.id === data.chatId) {\r\n        bus.$set(element, \"count\", element.count++);\r\n      }\r\n    });\r\n  },\r\n  pushGroupChatList(state, data) {\r\n    if (state.CHAT && state.CHAT.id == data.groupChatId) {\r\n      if (data.extra === \"unread\") {\r\n        state.groupChatListMessages.forEach((element) => {\r\n          if (element.id == data.unreadId) {\r\n            element.isRead = \"READ\";\r\n          }\r\n        });\r\n      } else if (data.extra === \"delete\") {\r\n        const index = state.groupChatListMessages.findIndex(e => e.id == data.deleteId)\r\n        if (index > -1) {\r\n          state.groupChatListMessages.splice(index, 1);\r\n        }\r\n      } else if (data.extra === \"update\") {\r\n        const index = state.groupChatListMessages.findIndex(e => e.id == data.editedGroupMessage.id)\r\n        if (index > -1) {\r\n          state.groupChatListMessages[index].message = data.editedGroupMessage.message\r\n          state.groupChatListMessages[index].edited = true\r\n        }\r\n      } else {\r\n        const index = state.groupChatListMessages.findIndex(e => e.id == data.id)\r\n        if (index <= -1) {\r\n          state.groupChatListMessages.push(data)\r\n          state.groupChatTotalMessages++\r\n        }\r\n      }\r\n    }\r\n  },\r\n  pushGroupCount(state, data) {\r\n    if (data.extra === \"unread\") {\r\n    } else if (data.extra === \"delete\") {\r\n    } else if (data.extra === \"update\") {\r\n    } else {\r\n      state.groupChatList.forEach((element) => {\r\n        if (element.id === data.chatId) {\r\n          bus.$set(element, \"count\", element.count++);\r\n        }\r\n      });\r\n    }\r\n  },\r\n  remov(state) {\r\n    state.chatListMessages.splice(-1, 1)\r\n  }\r\n}\r\nexport const actions = {\r\n  async setChatMessageMakeRead({ commit }, data) {\r\n    await commit('setChatMessageMakeRead', JSON.parse(data.body))\r\n  },\r\n  async getUnreadMessages(st) {\r\n    messengerService.getUnreadMessages()\r\n      .then(rs => {\r\n        st.commit('setChatUnreadMessagCount', rs.data)\r\n      })\r\n  },\r\n  async sendAnnouncementDocumentMarking(st, data) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/announcementDocumentMarking\",\r\n      message: data,\r\n    });\r\n  },\r\n  async setChatUnreadCount({ commit }, data) {\r\n    await commit('setChatUnreadCount', JSON.parse(data.body))\r\n  },\r\n  async setChatUnreadMessagCount({ commit }, data) {\r\n    await commit(\"setChatUnreadMessagCount\", JSON.parse(data.body));\r\n  },\r\n  async setDocumentMarking({ commit }, data) {\r\n    await commit(\"setMarketing\", JSON.parse(data.body));\r\n  },\r\n  async setNotificationMsg({ commit }, data) {\r\n    await commit(\"setNotification\", JSON.parse(data.body));\r\n  },\r\n  async setCommentTask({ commit }, data) {\r\n    await commit(\"setComments\", JSON.parse(data.body));\r\n  },\r\n  async setIncomingPerson({ commit }, data) {\r\n    let parsed = JSON.parse(data.body)\r\n    if (parsed.deviceName === 'enter') {\r\n      await commit(\"setIncomingPerson\", parsed);\r\n    } else {\r\n      await commit(\"setExitingPerson\", parsed);\r\n    }\r\n  },\r\n  async setGroupUpdate({ commit }) {\r\n    await commit(\"setGroupUpdateE\", false);\r\n  },\r\n  async setMessage({ commit }, data) {\r\n    await commit(\"pushChatList\", JSON.parse(data.body));\r\n  },\r\n  async setGroupMessage({ commit }, data) {\r\n    await commit(\"pushGroupCount\", JSON.parse(data.body));\r\n    await commit(\"pushGroupChatList\", JSON.parse(data.body));\r\n  },\r\n  async sendMessage(st, data) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/sendMessage\",\r\n      message: data,\r\n    });\r\n  },\r\n  async sendMessageGroup(st, data) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/sendGroupMessage\",\r\n      message: data,\r\n    });\r\n  },\r\n  async allUnreadMessages(st) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/allUnreadMessages\",\r\n      message: JSON.stringify({ user_id: JSON.parse(localStorage.getItem(\"user_id\")) }),\r\n    });\r\n  },\r\n  async onLoad(st, usr = null) {\r\n    let username = null, fullName = null;\r\n    if (!usr) {\r\n      username = TokenService.getUserInfo() ? TokenService.getUserInfo().username : null;\r\n      fullName = TokenService.getUserInfo() ? TokenService.getUserInfo().employeeFullName : null;\r\n    } else {\r\n      username = usr\r\n    }\r\n    // let ownerId = JSON.parse(localStorage.getItem(\"user_id\"));\r\n    if (username || fullName) {\r\n      if (usr === 'security') {\r\n        st.dispatch(\"connect\").then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/security/incomingPerson`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setIncomingPerson\", data);\r\n            },\r\n          });\r\n        })\r\n      } else {\r\n        st.dispatch(\"connect\")\r\n          .then(async (s) => {\r\n            st.dispatch(\"stompClientSendMessage\", {\r\n              stompClient: globalStompClient,\r\n              endpoint: \"/app/register\",\r\n              message: username,\r\n            });\r\n          })\r\n          .then(() => {\r\n            st.dispatch(\"stompSubscribe\", {\r\n              stompClient: globalStompClient,\r\n              endpoint: `/user/${username}/msg`,\r\n              callback: async (data) => {\r\n                st.dispatch(\"setMessage\", data);\r\n              },\r\n            });\r\n          }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/groupMsg`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setGroupMessage\", data);\r\n            },\r\n          });\r\n        }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/documentMarking`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setDocumentMarking\", data);\r\n            },\r\n          });\r\n        }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/notificationMsg`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setNotificationMsg\", data);\r\n              st.dispatch(\"setCount\", null, { root: true })\r\n            },\r\n          });\r\n        })\r\n          // .then(() => {\r\n          //     st.dispatch(\"stompSubscribe\", {\r\n          //         stompClient: globalStompClient,\r\n          //         endpoint: `/user/${fullName}/commentMgs`,\r\n          //         callback: async (data) => {\r\n          //             st.dispatch(\"setCommentTask\", data);\r\n          //         },\r\n          //     });\r\n          // })\r\n          .then(() => {\r\n            st.dispatch(\"stompSubscribe\", {\r\n              stompClient: globalStompClient,\r\n              endpoint: `/user/${username}/unreadMessages`,\r\n              callback: async (data) => {\r\n                st.dispatch(\"setChatUnreadMessagCount\", data);\r\n              },\r\n            });\r\n          }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/unreadMessage`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setChatUnreadCount\", data);\r\n            },\r\n          });\r\n        }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/makeRead`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setChatMessageMakeRead\", data);\r\n            },\r\n          });\r\n        })\r\n      }\r\n    }\r\n  },\r\n  connect({ commit }) {\r\n    return new Promise((resolve, reject) => {\r\n      globalStompClient = Stomp.over(\r\n        new SockJS(`${process.env.VUE_APP_WEBSOCKET_API}/gs-guide-websocket`)\r\n      );\r\n      if (globalStompClient) {\r\n        globalStompClient.hasDebug = false\r\n      }\r\n      globalStompClient.connect({}, (frame) => resolve(globalStompClient));\r\n    });\r\n  },\r\n  stompClientSendMessage(st, { stompClient, endpoint, message }) {\r\n    stompClient.send(endpoint, message);\r\n  },\r\n  stompSubscribe(st, { stompClient, endpoint, callback }) {\r\n    stompClient.subscribe(endpoint, callback);\r\n    return stompClient;\r\n  },\r\n  async getByChatId({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.getByChatId(params);\r\n      await commit(\r\n        \"setListChatMesseges\",\r\n        res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListChatMesseges\", { list: [], total: 0 });\r\n    }\r\n  },\r\n  async getByGroupChatId({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.getByGroupChatId(params);\r\n      await commit(\r\n        \"setListGroupChatMesseges\",\r\n        res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListGroupChatMesseges\", { list: [], total: 0 });\r\n    }\r\n  },\r\n  async getContactList({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.getContactList(params);\r\n      await commit(\r\n        \"setListResponse\",\r\n        res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListResponse\", { list: [], total: 0 });\r\n    }\r\n  },\r\n  async getGroupChatList({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.groupChatList(params);\r\n      await commit(\"setListResponseGroupChat\", res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListResponseGroupChat\", { list: [], total: 0 });\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}]}