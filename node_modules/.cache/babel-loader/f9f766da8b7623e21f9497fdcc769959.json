{"remainingRequest":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\state\\modules\\messenger.js","dependencies":[{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\src\\state\\modules\\messenger.js","mtime":1675054786294},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\babel.config.js","mtime":1667352074157},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667355378280},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1667355379758},{"path":"C:\\ACRU PROJECT\\Fair Tech\\acru-frontend\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1667355397815}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/ACRU PROJECT/Fair Tech/acru-frontend/src/state/modules/messenger.js"],"names":["TokenService","messengerService","SockJS","Stomp","Vue","globalStompClient","state","marketing","notification","contactList","contactTotal","groupChatList","groupChatTotal","comments","commentsTotal","openPage","chatListMessages","chatTotalMessages","groupChatListMessages","groupChatTotalMessages","lastMessage","lastMessageGroup","groupUpdate","groupUpdateMsg","incomingPerson","exitingPerson","chatUnreadCount","unreadData","CHAT","mutations","setCurrentChat","data","setChatMessageMakeRead","id","index","findIndex","e","set","setChatUnreadMessagCount","count","setChatUnreadCount","setComments","setIncomingPerson","setExitingPerson","setMarketing","setNotification","setGroupUpdateE","setGroupChatUpdate","setListResponseGroupChat","list","total","setListResponse","map","firstName","lastName","employeeId","chatId","uploadPath","setOpenPage","setListChatMesseges","setListGroupChatMesseges","pushItems","concat","pushGroupItems","pushChatList","extra","deleteId","splice","editedMessage","message","edited","push","pushCount","chatList","forEach","element","bus","$set","pushGroupChatList","groupChatId","unreadId","isRead","editedGroupMessage","pushGroupCount","remov","actions","commit","JSON","parse","body","getUnreadMessages","st","then","rs","sendAnnouncementDocumentMarking","dispatch","stompClient","endpoint","setDocumentMarking","setNotificationMsg","setCommentTask","parsed","deviceName","setGroupUpdate","setMessage","setGroupMessage","sendMessage","sendMessageGroup","allUnreadMessages","stringify","user_id","localStorage","getItem","onLoad","usr","username","fullName","getUserInfo","employeeFullName","callback","s","root","connect","Promise","resolve","reject","over","process","env","VUE_APP_WEBSOCKET_API","hasDebug","frame","stompClientSendMessage","send","stompSubscribe","subscribe","getByChatId","params","res","getByGroupChatId","getContactList","getGroupChatList"],"mappings":"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","sourcesContent":["import { TokenService } from \"@/shared/services/storage.service\"\r\nimport messengerService from \"@/shared/services/messengerService\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"webstomp-client\";\r\nimport Vue from \"vue\"\r\nlet globalStompClient = null;\r\nexport const state = {\r\n  marketing: null,\r\n  notification: null,\r\n  contactList: [],\r\n  contactTotal: 0,\r\n  groupChatList: [],\r\n  groupChatTotal: 0,\r\n  comments: [],\r\n  commentsTotal: 0,\r\n  openPage: \"default\",\r\n  chatListMessages: [],\r\n  chatTotalMessages: 0,\r\n  groupChatListMessages: [],\r\n  groupChatTotalMessages: 0,\r\n  lastMessage: {},\r\n  lastMessageGroup: {},\r\n  groupUpdate: false,\r\n  groupUpdateMsg: null,\r\n  incomingPerson: null,\r\n  exitingPerson: null,\r\n  chatUnreadCount: 0,\r\n  unreadData: null,\r\n  CHAT: null\r\n}\r\nexport const mutations = {\r\n  setCurrentChat(state, data) {\r\n    state.CHAT = data\r\n  },\r\n  setChatMessageMakeRead(state, id) {\r\n    let index = state.chatListMessages.findIndex(e => e.id == id)\r\n    if (index > -1) {\r\n      Vue.set(state.chatListMessages[index], \"isRead\", \"READ\")\r\n    }\r\n  },\r\n  setChatUnreadMessagCount(state, count) {\r\n    state.chatUnreadCount = count\r\n    if (count > 0) {\r\n      // playSound()\r\n    }\r\n  },\r\n  setChatUnreadCount(state, data) {\r\n    state.unreadData = data\r\n  },\r\n  setComments(state, data) {\r\n    state.comments = data\r\n  },\r\n  setIncomingPerson(state, data) {\r\n    state.incomingPerson = data\r\n  },\r\n  setExitingPerson(state, data) {\r\n    state.exitingPerson = data\r\n  },\r\n  setMarketing(state, data) {\r\n    state.marketing = data\r\n  },\r\n  setNotification(state, data) {\r\n    state.notification = data\r\n  },\r\n  setGroupUpdateE(state, data) {\r\n    state.groupUpdate = data;\r\n  },\r\n  setGroupChatUpdate(state, data) {\r\n    state.groupUpdate = true;\r\n    state.groupUpdateMsg = data;\r\n  },\r\n  setListResponseGroupChat(state, data) {\r\n    state.groupChatList = data.list;\r\n    state.groupChatTotal = data.total;\r\n  },\r\n  setListResponse(state, data) {\r\n    state.contactList = data.list.map(e => {\r\n      return {\r\n        firstName: e.firstName,\r\n        lastName: e.lastName,\r\n        employeeId: e.employeeId,\r\n        chatId: e.chatId,\r\n        uploadPath: e.uploadPath\r\n      }\r\n    })\r\n    state.contactTotal = data.total;\r\n  },\r\n  setOpenPage(state, data) {\r\n    state.openPage = data;\r\n  },\r\n  setListChatMesseges(state, data) {\r\n    state.chatListMessages = data.list;\r\n    state.chatTotalMessages = data.total;\r\n  },\r\n  setListGroupChatMesseges(state, data) {\r\n    state.groupChatListMessages = data.list;\r\n    state.groupChatTotalMessages = data.total;\r\n  },\r\n  pushItems(state, data) {\r\n    state.chatListMessages = data.concat(state.chatListMessages)\r\n  },\r\n  pushGroupItems(state, data) {\r\n    state.groupChatListMessages = data.concat(state.groupChatListMessages)\r\n  },\r\n  pushChatList(state, data) {\r\n    if (state.CHAT && state.CHAT.id == data.chatId) {\r\n      if (data.extra === 'delete') {\r\n        const index = state.chatListMessages.findIndex(e => e.id == data.deleteId)\r\n        if (index > -1) {\r\n          state.chatListMessages.splice(index, 1);\r\n        }\r\n      } else if (data.extra === 'update') {\r\n        const index = state.chatListMessages.findIndex(e => e.id == data.editedMessage.id)\r\n        if (index > -1) {\r\n          state.chatListMessages[index].message = data.editedMessage.message\r\n          state.chatListMessages[index].edited = true\r\n        }\r\n      } else {\r\n        let index = state.chatListMessages.findIndex(e => e.id == data.id)\r\n        if (!index || index <= -1) {\r\n          state.chatListMessages.push(data)\r\n          state.chatTotalMessages++\r\n        }\r\n      }\r\n    }\r\n  },\r\n  pushCount(state, data) {\r\n    state.chatList.forEach((element) => {\r\n      if (element.id === data.chatId) {\r\n        bus.$set(element, \"count\", element.count++);\r\n      }\r\n    });\r\n  },\r\n  pushGroupChatList(state, data) {\r\n    if (state.CHAT && state.CHAT.id == data.groupChatId) {\r\n      if (data.extra === \"unread\") {\r\n        state.groupChatListMessages.forEach((element) => {\r\n          if (element.id == data.unreadId) {\r\n            element.isRead = \"READ\";\r\n          }\r\n        });\r\n      } else if (data.extra === \"delete\") {\r\n        const index = state.groupChatListMessages.findIndex(e => e.id == data.deleteId)\r\n        if (index > -1) {\r\n          state.groupChatListMessages.splice(index, 1);\r\n        }\r\n      } else if (data.extra === \"update\") {\r\n        const index = state.groupChatListMessages.findIndex(e => e.id == data.editedGroupMessage.id)\r\n        if (index > -1) {\r\n          state.groupChatListMessages[index].message = data.editedGroupMessage.message\r\n          state.groupChatListMessages[index].edited = true\r\n        }\r\n      } else {\r\n        const index = state.groupChatListMessages.findIndex(e => e.id == data.id)\r\n        if (index <= -1) {\r\n          state.groupChatListMessages.push(data)\r\n          state.groupChatTotalMessages++\r\n        }\r\n      }\r\n    }\r\n  },\r\n  pushGroupCount(state, data) {\r\n    if (data.extra === \"unread\") {\r\n    } else if (data.extra === \"delete\") {\r\n    } else if (data.extra === \"update\") {\r\n    } else {\r\n      state.groupChatList.forEach((element) => {\r\n        if (element.id === data.chatId) {\r\n          bus.$set(element, \"count\", element.count++);\r\n        }\r\n      });\r\n    }\r\n  },\r\n  remov(state) {\r\n    state.chatListMessages.splice(-1, 1)\r\n  }\r\n}\r\nexport const actions = {\r\n  async setChatMessageMakeRead({ commit }, data) {\r\n    await commit('setChatMessageMakeRead', JSON.parse(data.body))\r\n  },\r\n  async getUnreadMessages(st) {\r\n    messengerService.getUnreadMessages()\r\n      .then(rs => {\r\n        st.commit('setChatUnreadMessagCount', rs.data)\r\n      })\r\n  },\r\n  async sendAnnouncementDocumentMarking(st, data) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/announcementDocumentMarking\",\r\n      message: data,\r\n    });\r\n  },\r\n  async setChatUnreadCount({ commit }, data) {\r\n    await commit('setChatUnreadCount', JSON.parse(data.body))\r\n  },\r\n  async setChatUnreadMessagCount({ commit }, data) {\r\n    await commit(\"setChatUnreadMessagCount\", JSON.parse(data.body));\r\n  },\r\n  async setDocumentMarking({ commit }, data) {\r\n    await commit(\"setMarketing\", JSON.parse(data.body));\r\n  },\r\n  async setNotificationMsg({ commit }, data) {\r\n    await commit(\"setNotification\", JSON.parse(data.body));\r\n  },\r\n  async setCommentTask({ commit }, data) {\r\n    await commit(\"setComments\", JSON.parse(data.body));\r\n  },\r\n  async setIncomingPerson({ commit }, data) {\r\n    let parsed = JSON.parse(data.body)\r\n    if (parsed.deviceName === 'enter') {\r\n      await commit(\"setIncomingPerson\", parsed);\r\n    } else {\r\n      await commit(\"setExitingPerson\", parsed);\r\n    }\r\n  },\r\n  async setGroupUpdate({ commit }) {\r\n    await commit(\"setGroupUpdateE\", false);\r\n  },\r\n  async setMessage({ commit }, data) {\r\n    await commit(\"pushChatList\", JSON.parse(data.body));\r\n  },\r\n  async setGroupMessage({ commit }, data) {\r\n    await commit(\"pushGroupCount\", JSON.parse(data.body));\r\n    await commit(\"pushGroupChatList\", JSON.parse(data.body));\r\n  },\r\n  async sendMessage(st, data) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/sendMessage\",\r\n      message: data,\r\n    });\r\n  },\r\n  async sendMessageGroup(st, data) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/sendGroupMessage\",\r\n      message: data,\r\n    });\r\n  },\r\n  async allUnreadMessages(st) {\r\n    st.dispatch(\"stompClientSendMessage\", {\r\n      stompClient: globalStompClient,\r\n      endpoint: \"/app/allUnreadMessages\",\r\n      message: JSON.stringify({ user_id: JSON.parse(localStorage.getItem(\"user_id\")) }),\r\n    });\r\n  },\r\n  async onLoad(st, usr = null) {\r\n    let username = null, fullName = null;\r\n    if (!usr) {\r\n      username = TokenService.getUserInfo() ? TokenService.getUserInfo().username : null;\r\n      fullName = TokenService.getUserInfo() ? TokenService.getUserInfo().employeeFullName : null;\r\n    } else {\r\n      username = usr\r\n    }\r\n    // let ownerId = JSON.parse(localStorage.getItem(\"user_id\"));\r\n    if (username || fullName) {\r\n      if (usr === 'security') {\r\n        st.dispatch(\"connect\").then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/security/incomingPerson`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setIncomingPerson\", data);\r\n            },\r\n          });\r\n        })\r\n      } else {\r\n        st.dispatch(\"connect\")\r\n          .then(async (s) => {\r\n            st.dispatch(\"stompClientSendMessage\", {\r\n              stompClient: globalStompClient,\r\n              endpoint: \"/app/register\",\r\n              message: username,\r\n            });\r\n          })\r\n          .then(() => {\r\n            st.dispatch(\"stompSubscribe\", {\r\n              stompClient: globalStompClient,\r\n              endpoint: `/user/${username}/msg`,\r\n              callback: async (data) => {\r\n                st.dispatch(\"setMessage\", data);\r\n              },\r\n            });\r\n          }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/groupMsg`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setGroupMessage\", data);\r\n            },\r\n          });\r\n        }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/documentMarking`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setDocumentMarking\", data);\r\n            },\r\n          });\r\n        }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/notificationMsg`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setNotificationMsg\", data);\r\n              st.dispatch(\"setCount\", null, { root: true })\r\n            },\r\n          });\r\n        })\r\n          // .then(() => {\r\n          //     st.dispatch(\"stompSubscribe\", {\r\n          //         stompClient: globalStompClient,\r\n          //         endpoint: `/user/${fullName}/commentMgs`,\r\n          //         callback: async (data) => {\r\n          //             st.dispatch(\"setCommentTask\", data);\r\n          //         },\r\n          //     });\r\n          // })\r\n          .then(() => {\r\n            st.dispatch(\"stompSubscribe\", {\r\n              stompClient: globalStompClient,\r\n              endpoint: `/user/${username}/unreadMessages`,\r\n              callback: async (data) => {\r\n                st.dispatch(\"setChatUnreadMessagCount\", data);\r\n              },\r\n            });\r\n          }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/unreadMessage`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setChatUnreadCount\", data);\r\n            },\r\n          });\r\n        }).then(() => {\r\n          st.dispatch(\"stompSubscribe\", {\r\n            stompClient: globalStompClient,\r\n            endpoint: `/user/${username}/makeRead`,\r\n            callback: async (data) => {\r\n              st.dispatch(\"setChatMessageMakeRead\", data);\r\n            },\r\n          });\r\n        })\r\n      }\r\n    }\r\n  },\r\n  connect({ commit }) {\r\n    return new Promise((resolve, reject) => {\r\n      globalStompClient = Stomp.over(\r\n        new SockJS(`${process.env.VUE_APP_WEBSOCKET_API}/gs-guide-websocket`)\r\n      );\r\n      if (globalStompClient) {\r\n        globalStompClient.hasDebug = false\r\n      }\r\n      globalStompClient.connect({}, (frame) => resolve(globalStompClient));\r\n    });\r\n  },\r\n  stompClientSendMessage(st, { stompClient, endpoint, message }) {\r\n    stompClient.send(endpoint, message);\r\n  },\r\n  stompSubscribe(st, { stompClient, endpoint, callback }) {\r\n    stompClient.subscribe(endpoint, callback);\r\n    return stompClient;\r\n  },\r\n  async getByChatId({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.getByChatId(params);\r\n      await commit(\r\n        \"setListChatMesseges\",\r\n        res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListChatMesseges\", { list: [], total: 0 });\r\n    }\r\n  },\r\n  async getByGroupChatId({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.getByGroupChatId(params);\r\n      await commit(\r\n        \"setListGroupChatMesseges\",\r\n        res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListGroupChatMesseges\", { list: [], total: 0 });\r\n    }\r\n  },\r\n  async getContactList({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.getContactList(params);\r\n      await commit(\r\n        \"setListResponse\",\r\n        res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListResponse\", { list: [], total: 0 });\r\n    }\r\n  },\r\n  async getGroupChatList({ commit }, params) {\r\n    try {\r\n      const res = await messengerService.groupChatList(params);\r\n      await commit(\"setListResponseGroupChat\", res.data ? res.data : { list: [], total: 0 }\r\n      );\r\n    } catch (error) {\r\n      await commit(\"setListResponseGroupChat\", { list: [], total: 0 });\r\n    }\r\n  }\r\n}\r\n"]}]}